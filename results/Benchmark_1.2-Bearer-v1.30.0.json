{
  "source": "Bearer",
  "version": "v1.30.0",
  "findings": [
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00007.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00007.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "a7d389038dcf77969a24604f7d2b3d93_0",
      "old_fingerprint": "d45907bfb55a9cd885577ae854996b20_2",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00017.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00017.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 44
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 44
        },
        "content": "r.exec(cmd + param)"
      },
      "parent_line_number": 63,
      "snippet": "r.exec(cmd + param)",
      "fingerprint": "45cf5eb166f409d2de47b6dea06dcb49_0",
      "old_fingerprint": "0da8dba503b63cf7d6b78c672ed792f1_19",
      "code_extract": "            Process p = r.exec(cmd + param);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00090.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 81,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "692f1b0793237c4f80936f17d373a074_0",
      "old_fingerprint": "6742b32d9b629760e7a0a5c3ad095adc_79",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00091.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "f8f2b204d4baff510cafc7d7e39b5bdc_0",
      "old_fingerprint": "72a71a105903a07d53d7e55cda147d1e_67",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00159.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00159.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 67,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "9a9c382722d38a6e8216c8dcd3386600_0",
      "old_fingerprint": "2162a176bfb46a763c9bfa7c4c9ff115_33",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00174.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00174.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 63,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "101ac0a35f33ea3082d0c5e52ab85460_0",
      "old_fingerprint": "790f19e2ced9972d935de70a868bc766_18",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00176.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00176.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "6b186ab5ec77080f2cc97cc6ce766432_0",
      "old_fingerprint": "8afb992fd7c066489a1dbb77eae6f5ab_25",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00177.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00177.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 69,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "bd1f989fc64d03d8f498f94b51625be0_0",
      "old_fingerprint": "7930e126767f140b13ee0df11c5a8424_37",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00295.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00295.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 72,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "06209730f2ca9112250e0675a4e3133f_0",
      "old_fingerprint": "ce2c1ee357ffdfc5d0a9ef367c4fb09c_46",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00302.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00302.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 69,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "976e3533717894a52f0ae53ee8113254_0",
      "old_fingerprint": "451cbeb154281c0a6c4dcf30e506d60e_38",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00303.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00303.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 83,
      "snippet": "r.exec(args)",
      "fingerprint": "38116176820a92d399279e893de6e5e6_0",
      "old_fingerprint": "b9c40f64e073739ee73a33053d10f908_86",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00308.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00308.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 70,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "ce0a8262bbece2fd5150d029a18ea6d6_0",
      "old_fingerprint": "830985996b007388dfec4342a6ab7680_42",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00496.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00496.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 68,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "629e8787e63094af7d791545ebc16cd0_0",
      "old_fingerprint": "1714b3bffd4d4d19de204537bbf8a39c_36",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00498.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00498.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 68,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "54ee3bd3815155c0af8403432befd055_0",
      "old_fingerprint": "d4d52763551b5c1b4691f8e6825258d5_34",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00499.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00499.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "74ff63832b52f3926d6e8383f7f4c091_0",
      "old_fingerprint": "59db232e8b8519a06357038497482a11_12",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00567.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00567.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 78,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "46532da5de34683badec32b611d49a78_0",
      "old_fingerprint": "59022066fcf57ded973634feed61f1d0_72",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00568.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00568.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 87,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "6422c423bcb7382208110130581d21b6_0",
      "old_fingerprint": "a2543d4d609da933f2ec3a2e60e42a92_92",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00571.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00571.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "45399ac3a3f2cc3474dc8f3b67e2b754_0",
      "old_fingerprint": "331a9c5784db9bdc57f797f14cab3b8f_60",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00572.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00572.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 77,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "1680c2270be108692f3ffac6b4c7ff04_0",
      "old_fingerprint": "65c117d66697de251b5e57b1fe1e74d6_68",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00573.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00573.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 70,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "3a7144565ec164cb412a9b9f863b395f_0",
      "old_fingerprint": "e50cba5f50d08cda37afa593f7b10b81_41",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00574.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00574.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "fff84dd97a00487bd9cca67464c31397_0",
      "old_fingerprint": "1a232e96576b298b85d253e6fea281ba_55",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00576.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00576.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "eb9ac6f8d7cee8f7d8a641187c947208_0",
      "old_fingerprint": "d4294b27dc671d56b7fd5a4bc4fad63c_54",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00815.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00815.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 9,
          "end": 25
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 9,
          "end": 25
        },
        "content": "pb.command(args)"
      },
      "parent_line_number": 86,
      "snippet": "pb.command(args)",
      "fingerprint": "111c17f75fd3589ac27fe96197d5b152_0",
      "old_fingerprint": "0556b3aeb52ca86b0152ad36d75047b5_90",
      "code_extract": "        pb.command(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00825.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00825.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 83,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "5aac95bf588c561f2f649f151a743048_0",
      "old_fingerprint": "0af1ef4bba19cb37096c0991b0c5f0e2_83",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00826.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00826.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 88,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "44dfc606425321bdcfd2e8ed68872744_0",
      "old_fingerprint": "2ac3998091c07d9bea4dc47bdfec5e82_93",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00978.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 88,
      "snippet": "r.exec(args)",
      "fingerprint": "f81419da2cae3afe5c4c8b06a905c6c5_0",
      "old_fingerprint": "0e249d6e20e0ef4619a8a1168ea25bf0_94",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00979.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 90,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "438ffd72ce308e2112c0ce82b66475a0_0",
      "old_fingerprint": "01ad929acdcc0044b4806e7767846593_95",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00980.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "91a9018c324ba8f67b24bbaf5e88b036_0",
      "old_fingerprint": "d2202579fa66723dacf95e8a3ef730a3_61",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00981.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 90,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "f14592c7c6513401476f9333b9478088_0",
      "old_fingerprint": "c0483c16c426ff7d7dc03ab6ca9ec4e1_96",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00982.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "22fa13e6f2eb9d5afef57ea69cdf1d38_0",
      "old_fingerprint": "d43fb18faa6373cec32acf30352a81c8_62",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00983.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "36195cfa926c4b600000f6c2612ff853_0",
      "old_fingerprint": "773eca009357f500fd0db1d271f70474_56",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01064.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01064.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "eaadbd0d089a186807a8e55b9b7bdbf3_0",
      "old_fingerprint": "4cc2bed81c27ed24e1a207affa0e6b3b_11",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01065.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01065.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 74,
      "snippet": "r.exec(args)",
      "fingerprint": "9f98d053b10ca79f99358877288d7ad0_0",
      "old_fingerprint": "03d230808409df8bad4a7497d293ccff_52",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01066.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01066.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "456a1c74040d37f4aa6ee7a5d8107bc8_0",
      "old_fingerprint": "89545a6aec3e51d008cb97e3031fd82a_15",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01067.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01067.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "ea103d051f5477fc200267a579338fbb_0",
      "old_fingerprint": "14ba9ec58bd8a6c9938edcb0b614f21d_4",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01068.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01068.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "1488937c2c72330fee713c98a6944546_0",
      "old_fingerprint": "5b2d2946c9385aed011f555c46a4683d_21",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01189.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01189.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args)",
      "fingerprint": "9135c224d8faa15d69e104f7020c38c0_0",
      "old_fingerprint": "35451a1b744d62403239ea60021f696d_63",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01190.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01190.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "6201dc577418ea2ed019189e725d172e_0",
      "old_fingerprint": "78cbd981e6d24465056e4f439af1fc48_28",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01191.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01191.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "0a169475d4da98870b9aad5fd2880f41_0",
      "old_fingerprint": "c0921aff32c1d00e1551cbebedf5fecc_20",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01192.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01192.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "f2f1218af897cc6b79f70c95a9050cba_0",
      "old_fingerprint": "c7fe102291acd2f0c5e99e37deb12477_23",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01193.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01193.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 78,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "66e92a2066b24491bc9ae368ab81beb5_0",
      "old_fingerprint": "eddba56e8afe9d7c18de8c1a217c81b6_71",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01194.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01194.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 65,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "a5c918da6071d465575be4e6aaf13a16_0",
      "old_fingerprint": "dcae38e0a00e67130a6860bc080b64bb_31",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01360.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01360.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "493ae0133ac82576149e4b6e785969c7_0",
      "old_fingerprint": "94dc9fa2a1b268fda227dbae3eb506dc_7",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01361.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01361.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "7b86dd1cdd4e638004a73f8e0878f9ec_0",
      "old_fingerprint": "0872cdfa56b8e59cb1acc074d1670791_3",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01362.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01362.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "ab9e30ea7fa016e3540a38c022e1e212_0",
      "old_fingerprint": "a8518b8c5f8c9fb3de6aa193f0d83a09_57",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01363.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01363.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 60,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "094c6bed920411e4331143820a01d8ea_0",
      "old_fingerprint": "6d86d3556213f80a8f272de0b8f53253_1",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01364.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01364.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 60,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "f257d7d246c58b056e1ff341a05b24fc_0",
      "old_fingerprint": "cb01c17e3b956c3d91b717ff74476bdb_0",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01365.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01365.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 63,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "362b5f8953441a195df0e22324a853ac_0",
      "old_fingerprint": "175b30df88dbaa2b87be5216d3715bb8_17",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01430.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01430.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 74,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "97275f07357883f532e0580eff2b3012_0",
      "old_fingerprint": "08642bbe2e4d8fd0ae1d79a6f8e70e12_53",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01440.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01440.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 71,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "124253ba50c81a7889e4249d68081c7c_0",
      "old_fingerprint": "80164711ff72b49cc10b736b159219bd_44",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01441.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01441.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 83,
      "snippet": "r.exec(args)",
      "fingerprint": "d8d48ebf446df632955595b3735c549a_0",
      "old_fingerprint": "32e5f4a9f64f3acb04ce52f3cc458c6a_87",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01442.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01442.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 71,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "38a225a89b891b46e02df730b0d0e423_0",
      "old_fingerprint": "28dc5fa355dadc5d69e3a35f8652ea5f_43",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01443.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01443.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 72,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "b902807462c93ebe2223b70364b73e30_0",
      "old_fingerprint": "27482326a7b974899982d51d63674a97_48",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01444.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01444.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 70,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "d9a3fa6562009f0a4e7c2e6cc4b91db9_0",
      "old_fingerprint": "eef90c4c67e688d71949aca692aa3396_39",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01445.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01445.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 70,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "a57f861c1c548caec8041b4bb8f704af_0",
      "old_fingerprint": "652e1a03f1511cd814a04ac2cfe2b5f1_40",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01446.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01446.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 73,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "3053d46c5ab46e7e7fd930505fa6beab_0",
      "old_fingerprint": "5d73026a16dbe419cfa18c1423a5938c_49",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01672.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01672.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 9,
          "end": 25
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 9,
          "end": 25
        },
        "content": "pb.command(args)"
      },
      "parent_line_number": 86,
      "snippet": "pb.command(args)",
      "fingerprint": "9052c3c09ca1f58bc0b00e4ab55424e5_0",
      "old_fingerprint": "5ac936d26ade75d6015c1d13812f6212_91",
      "code_extract": "        pb.command(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01674.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01674.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 84,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "8c4b5409d40c52a83f8471131c133b34_0",
      "old_fingerprint": "30a66090a4473009f1afa43e1863ed56_88",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01685.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01685.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 95,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "31e354bbacc1c00eafe846e8a6745c9e_0",
      "old_fingerprint": "4ec30532b4919719f8831a2feacab754_98",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01686.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01686.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 81,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "b389e4f0c9a28f52b3a9e974767e78cc_0",
      "old_fingerprint": "29f06f780d346ba384d555c9dff4673a_78",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01687.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01687.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 95,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "0e130303d5310bf997a505df913c11d5_0",
      "old_fingerprint": "c2c3479e90fb4c56828ccba907744830_97",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01688.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01688.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 82,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "72d059c146804e0ddb6aca11c7ca400e_0",
      "old_fingerprint": "cd120ef5c6dee13ecd90edc0c7c8c366_82",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01689.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01689.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 82,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "940a7f347e138f878c4266c010b3b0c3_0",
      "old_fingerprint": "d8937e1b377a8bae0d9d807cf6f981a6_81",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01690.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01690.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 80,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "7e0612ff607a219484dde59bbe78d5ac_0",
      "old_fingerprint": "9799e9dca00f910632a63fabc7c0382e_76",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01691.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01691.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 80,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "52ff2e17dc42625cc98523998b33d392_0",
      "old_fingerprint": "3b4222320ddd37fe21afa4b1fe45e9d4_77",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01692.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01692.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 83,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "0aca558e7e50e540c53e6d4e5120d838_0",
      "old_fingerprint": "93c84ee96125125637503fc79cb404ac_84",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01693.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01693.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 83,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "198635275abe7fe4d65ba0918611425f_0",
      "old_fingerprint": "e8412f7b91c04388652205578cc4103c_85",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01852.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 79,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "1e3396f377aa00d7d5fc14421938781d_0",
      "old_fingerprint": "c879037380c8b5fecc518fb0a418ddb6_75",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01864.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 77,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "436ffe29e7f70d13ba8809450adc6f82_0",
      "old_fingerprint": "6083b9b791b14bb4c752d7f37e84e0e2_70",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01865.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 77,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "97b6673f65ef3cce3678974cf2e38ec1_0",
      "old_fingerprint": "dee1bf764e2c9e4a7d6b6c0c31c19aac_69",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01929.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01929.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 65,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "e44b090e2bc0a01b2b06666973054a43_0",
      "old_fingerprint": "513317543a92d532a4c03e5797424e04_29",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01936.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01936.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "f1c45c30a4ed9f9ec16d1c1267182429_0",
      "old_fingerprint": "2c55887325a0c4407522dcfcb76b922a_13",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01937.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01937.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "4cf0d93058d98e429c96ea15735e63c1_0",
      "old_fingerprint": "43e2b764ba83ab772e51b1fd440a2fa7_14",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01938.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01938.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 76,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "eaf78434bc1a4ba4088795d774bbe0aa_0",
      "old_fingerprint": "28352fc61734843a1e6e6210fed80942_66",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01939.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01939.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 62,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "0b46ae291183ef22da81d8ce4c75ecec_0",
      "old_fingerprint": "23bc83f44683658cb733c6433b9e7216_10",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01940.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01940.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 63,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "4938f2ce760735729766cee74cf7bb98_0",
      "old_fingerprint": "1376b5f4e1c55280a4babdb0df673c75_16",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01941.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01941.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 45
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 45
        },
        "content": "r.exec(cmd, argsEnv)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd, argsEnv)",
      "fingerprint": "0fad0991e1021561c78158f6b12d6a22_0",
      "old_fingerprint": "ce29332f0b5f8bde978d8a0b225d2975_5",
      "code_extract": "            Process p = r.exec(cmd, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01942.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01942.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "eb6c2a910abf00c343bab1aab0c1a7dd_0",
      "old_fingerprint": "c5c74b21a1cb087ac59c9c8ed75dbeea_27",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01943.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01943.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "56ac66e6e0eb20b89a29b5d8cb671154_0",
      "old_fingerprint": "23ae795602adf142590d02fd327c462f_22",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01944.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01944.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "40e23169c952f0d9fdb171215b8df99f_0",
      "old_fingerprint": "7d6f9e4175e9a0dc9f4ddf2a0f5ea853_24",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02059.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02059.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 53
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 53
        },
        "content": "new ProcessBuilder(args)"
      },
      "parent_line_number": 67,
      "snippet": "new ProcessBuilder(args)",
      "fingerprint": "56c1b2b9c447dbf754c888004726550d_0",
      "old_fingerprint": "f90f29c4e54ab9ac9ecd11d1c6b945bb_32",
      "code_extract": "        ProcessBuilder pb = new ProcessBuilder(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02067.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02067.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 78,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "0db6e4acc802a9581ecc976619983691_0",
      "old_fingerprint": "e91c43c7b945cef873812a2731669c7d_73",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02068.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02068.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 64,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "0993033356ac140f2204428275e8b86f_0",
      "old_fingerprint": "aaf26bd3a1bfd93ebb662c3994b01a8c_26",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02069.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02069.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 65,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "dc9265f45da9d614ad5018d55e4ced54_0",
      "old_fingerprint": "a8be782541af56d55c1b14ba4c714917_30",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02070.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02070.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "8d85a7d3da68f6bb1d2d2405df07bc65_0",
      "old_fingerprint": "efb6b743249c58b561252cfdc99c5f8b_9",
      "code_extract": "            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02249.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02249.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "1737fa0f72af7ae6d52009d5f15fb138_0",
      "old_fingerprint": "c7910e2922b24a5e5e2c3eb2fd282393_8",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02250.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02250.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 25,
          "end": 42
        },
        "content": "r.exec(cmd + bar)"
      },
      "parent_line_number": 61,
      "snippet": "r.exec(cmd + bar)",
      "fingerprint": "f201c0ddbdcef41bfb6abe9e683ddf2e_0",
      "old_fingerprint": "82dabeb1fd4c0fb3656400a56235e8fe_6",
      "code_extract": "            Process p = r.exec(cmd + bar);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02251.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02251.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 25,
          "end": 37
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 25,
          "end": 37
        },
        "content": "r.exec(args)"
      },
      "parent_line_number": 73,
      "snippet": "r.exec(args)",
      "fingerprint": "03a3700857a808d4bb1a523737552b3f_0",
      "old_fingerprint": "1afee86135aec723e4c07c16150aa951_50",
      "code_extract": "            Process p = r.exec(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02252.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02252.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "e60a37d36739491150b356fb35b4a0f1_0",
      "old_fingerprint": "b5124f40a85c44437f1fa1c4e47b5e5e_58",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02253.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02253.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 75,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "e9f6685093cd1defe104e47b046680b4_0",
      "old_fingerprint": "715c8b50153df9af7ad8bdb3fafb7c66_59",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02335.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02335.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 25
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 25
        },
        "content": "pb.command(args)"
      },
      "parent_line_number": 76,
      "snippet": "pb.command(args)",
      "fingerprint": "90845556cc277dec26cbb1753a715930_0",
      "old_fingerprint": "6b02ec341a9c782a473cb2eb034ffc1d_64",
      "code_extract": "        pb.command(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02336.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02336.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 25
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 25
        },
        "content": "pb.command(args)"
      },
      "parent_line_number": 76,
      "snippet": "pb.command(args)",
      "fingerprint": "0bb65eab10d85065c8843baeacf6a22b_0",
      "old_fingerprint": "8b362b1b193e61edc9081ddab0612e00_65",
      "code_extract": "        pb.command(args);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02340.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02340.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 85,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "35c34de083ec04bd9d799ff54c36aaff_0",
      "old_fingerprint": "00d39de434224d0f1c622838f4ed8577_89",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02341.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02341.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 71,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "b3186e48316e94773b304a532c11cb13_0",
      "old_fingerprint": "cfbb2813eb9a674192f76cbc896f786a_45",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02342.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02342.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 51
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 51
        },
        "content": "r.exec(cmd + bar, argsEnv)"
      },
      "parent_line_number": 72,
      "snippet": "r.exec(cmd + bar, argsEnv)",
      "fingerprint": "bb9636cab60022f34156244f79b123d2_0",
      "old_fingerprint": "93599b91438be717d681db4ab932d551_47",
      "code_extract": "            Process p = r.exec(cmd + bar, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02343.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02343.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 97
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 97
        },
        "content": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 73,
      "snippet": "r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "48014e1e99d345a07a960d17b04e95bb_0",
      "old_fingerprint": "adbdcd8f3e49e4911dbe903bee9cec42_51",
      "code_extract": "                    r.exec(cmd + bar, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02344.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02344.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 68,
      "snippet": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "54a562c70548f99412603442924d59e3_0",
      "old_fingerprint": "e2fa469d12ace1336e84303ad0d29ae6_35",
      "code_extract": "            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02610.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02610.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 46
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 46
        },
        "content": "r.exec(args, argsEnv)"
      },
      "parent_line_number": 95,
      "snippet": "r.exec(args, argsEnv)",
      "fingerprint": "87e19658ab14847d91e34dd4d1a89b1e_0",
      "old_fingerprint": "32c7fe816b18c834f39120392171a505_99",
      "code_extract": "            Process p = r.exec(args, argsEnv);",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02611.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02611.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 95,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "5d7fe0239f8265a47f69ae4f5cc0d4c5_0",
      "old_fingerprint": "a3aee399396e1cc9aa99ecb6df47b90e_100",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02612.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02612.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 96
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 25,
          "end": 96
        },
        "content": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 81,
      "snippet": "r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "bbd06a585824be4dc54f250359216727_0",
      "old_fingerprint": "832af6950acf56cc8a6028a70e4d28b8_80",
      "code_extract": "            Process p = r.exec(args, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["78"],
      "id": "java_lang_os_command_injection",
      "title": "Command injection vulnerability detected.",
      "description": "## Description\n\nUsing external or user-defined input directly in an OS command can allow attackers to perform dangerous commands on the operating system.\n\n## Remediations\n\n❌ Avoid using OS commands, with or without dynamic input, wherever possible. For example, look for an equivalent library or function to use instead.\n\n✅ For dynamic input, rely on hardcoded values wherever possible\n\n```java\n  String filePattern = \"*.json\";\n  if request.getParameter(\"format\") == \"xml\" {\n    filePattern = \"*.xml\"\n  }\n\n  Process process = Runtime.getRuntime().exec(\"ls /myDir/\" + extension);\n```\n\n## Resources\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_os_command_injection",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02613.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02613.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))"
      },
      "parent_line_number": 78,
      "snippet": "r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")))",
      "fingerprint": "2df46ea6cec8bbc0742ed3b7d25f9810_0",
      "old_fingerprint": "106d1633d7528d6fff33844a4ab1efb3_74",
      "code_extract": "            Process p = r.exec(cmd, argsEnv, new java.io.File(System.getProperty(\"user.dir\")));",
      "severity": "high"
    },
    {
      "cwe_ids": ["79"],
      "id": "javascript_lang_dangerous_insert_html",
      "title": "Dangerous dynamic HTML insert detected.",
      "description": "## Description\nThere are XSS vulnerabilities when dynamically inserting HTML that contains unsanitized data.\n\n## Remediations\nMake sure you use HTML sanitization library before inserting html\n\n```javascript\nimport sanitizeHtml from 'sanitize-html';\n\nconst html = `<strong>${user.Input}</strong>`;\ndocument.body.innerHTML = sanitizeHtml(html)\n```\n\n## Resources\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html",
      "line_number": 151,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/webapp/js/testsuiteutils.js",
      "filename": "webapp/js/testsuiteutils.js",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 151,
        "end": 151,
        "column": {
          "start": 5,
          "end": 25
        }
      },
      "sink": {
        "start": 151,
        "end": 151,
        "column": {
          "start": 5,
          "end": 25
        },
        "content": "txt.innerHTML = html"
      },
      "parent_line_number": 151,
      "snippet": "txt.innerHTML = html",
      "fingerprint": "11a9ebeb45d661b930db99c660c11db6_0",
      "old_fingerprint": "5c35c8abff13b52d7033b31959176f3a_0",
      "code_extract": "    txt.innerHTML = html;",
      "severity": "high"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00001\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00001\", \"FileName\")",
      "fingerprint": "4002513f2af743b806fdab331ee0bbf3_0",
      "old_fingerprint": "7a0e8492e210d02c6739338bacfd8bad_0",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00001\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00002\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00002\", \"FileName\")",
      "fingerprint": "f0f326631ff4e1558a3b33890fa5a59a_0",
      "old_fingerprint": "723e96fbaeb1174828e17fca5772ba73_1",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00002\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00003.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00003.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00003\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00003\", \"someSecret\")",
      "fingerprint": "9f13e2d7afc858ddc79c6f1e8d7068f9_0",
      "old_fingerprint": "570f813642a5fb88ed03470ce3a0160b_2",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00003\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00004\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00004\", \"color\")",
      "fingerprint": "ba9f94e4666167ac6ce33d3b74805663_0",
      "old_fingerprint": "c5896edd29711eb4af1ecddd49d6ed02_3",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00004\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00053.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00053\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00053\", \"someSecret\")",
      "fingerprint": "eb7468fb4511119290e79e7d5ca0ae9d_0",
      "old_fingerprint": "0e6d0ef39111b09d73275bd1c294fc9a_4",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00053\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00054.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00054.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00054\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00054\", \"someSecret\")",
      "fingerprint": "6d908b177c74376998dc0966e07b2d73_0",
      "old_fingerprint": "edd880a9f52eb61a73cde1227ea69911_5",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00054\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00055.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00055\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00055\", \"someSecret\")",
      "fingerprint": "745ff9bc622cae205497e183f75bc479_0",
      "old_fingerprint": "51880144fee346a6dd05ad348940aff6_6",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00055\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00056.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00056\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00056\", \"someSecret\")",
      "fingerprint": "0f8ab22f80c3adc7da86f8594e228633_0",
      "old_fingerprint": "62c6bc5887e95aea1c3a0f0393bc8829_7",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00056\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00057\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00057\", \"someSecret\")",
      "fingerprint": "792d1a5f027a9775d2bde0633fdcfad7_0",
      "old_fingerprint": "66241ad76d66b47a7b13c8c56d2d53d7_8",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00057\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00058.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00058.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00058\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00058\", \"someSecret\")",
      "fingerprint": "fa87a47eea279dca69df76f68099768f_0",
      "old_fingerprint": "bda3ce796f7df0235403c0030bf8cc5f_9",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00058\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00059.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00059.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00059\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00059\", \"someSecret\")",
      "fingerprint": "dc05f89beeb7fc0e72d7258624dc97c2_0",
      "old_fingerprint": "018653b6bb13d68e36b105b33af9323a_10",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00059\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00060\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00060\", \"FileName\")",
      "fingerprint": "26bca09257e0828f48d99f9c405e9779_0",
      "old_fingerprint": "de6dceb20c6ecf985b93d23bfc188baa_11",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00060\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00061\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00061\", \"FileName\")",
      "fingerprint": "e0e35dc5dcd4ecc51ecfb344000a3d81_0",
      "old_fingerprint": "1a897023c6d8dfcae0202fd22ac6659b_12",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00061\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00062.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00062.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00062\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00062\", \"FileName\")",
      "fingerprint": "557eadaf37283fc772ea6eb18c8cd1b5_0",
      "old_fingerprint": "f7c9bb4d57eaa0cf05497016e1cd34c1_13",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00062\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00063.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00063\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00063\", \"FileName\")",
      "fingerprint": "81562c9f9b27140c9e416164a86e179d_0",
      "old_fingerprint": "c250c2eb5bf0d0c7760cd0bf4ac66634_14",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00063\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00064.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00064\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00064\", \"FileName\")",
      "fingerprint": "a610b532268403585b9455ed9e3b7212_0",
      "old_fingerprint": "0856955f127c112b1a3c1a163f073e3f_15",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00064\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00065.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00065.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00065\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00065\", \"FileName\")",
      "fingerprint": "76064aa01b5c924b7d74787b18f35c88_0",
      "old_fingerprint": "07627f1a6dff0a864865c478d2c34e9d_16",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00065\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00069.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00069.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00069\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00069\", \"someSecret\")",
      "fingerprint": "38b1e7cd27e241c357c4aa1be3743edb_0",
      "old_fingerprint": "d8bb1ba991cd7ab27aaf24f9cf15f8d1_17",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00069\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00070.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00070\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00070\", \"someSecret\")",
      "fingerprint": "027d2dc481b15099013881cb112dfab5_0",
      "old_fingerprint": "4fe9b5992e6b811aa3d8b946055c7405_18",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00070\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00071.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00071\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00071\", \"someSecret\")",
      "fingerprint": "6173d140836f32328ed59a3c739bec03_0",
      "old_fingerprint": "fa97661c9c8b95d415b4e96c8f60b78d_19",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00071\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00072.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00072.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00072\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00072\", \"someSecret\")",
      "fingerprint": "6808ebf77e360c9175bccac192ff37e8_0",
      "old_fingerprint": "b32ce963ca1dad5df9fbe7cb539477e6_20",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00072\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00073.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00073\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00073\", \"someSecret\")",
      "fingerprint": "6dc062937ec72a9ff2ac433eaa93df95_0",
      "old_fingerprint": "4676b1705cfd8ccd3700eae9174e3cd2_21",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00073\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00074.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00074.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00074\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00074\", \"someSecret\")",
      "fingerprint": "d61387f1531f6d8634b42dc4b40781a9_0",
      "old_fingerprint": "7cb87a9defd01a61d51d9a9e20d674a8_22",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00074\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00075.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00075.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00075\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00075\", \"someSecret\")",
      "fingerprint": "f74ac460a4bcd2a98e0b69d9d5310a3d_0",
      "old_fingerprint": "73b000868398a1255e51ba892f0b3e68_23",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00075\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00076.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00076.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00076\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00076\", \"someSecret\")",
      "fingerprint": "5ee6c3d067da9315c94200e5d84f25a0_0",
      "old_fingerprint": "b659d01fb0080e2422494fdc64660dd5_24",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00076\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00077.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00077.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00077\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00077\", \"ECHOOO\")",
      "fingerprint": "e92dde3360cb68e017773ddc98732fea_0",
      "old_fingerprint": "c99c4eae6c999f7c10ebb64da00ca60d_25",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00077\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00090.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00090.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00090\", \"ls\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00090\", \"ls\")",
      "fingerprint": "9741fd064cee7d6db11beca934cbaeb1_0",
      "old_fingerprint": "8fd2d317b65bb0edaf455c293d86f648_26",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00090\", \"ls\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00091.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00091.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00091\", \"FOO%3Decho+Injection\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00091\", \"FOO%3Decho+Injection\")",
      "fingerprint": "04b6403d4d95ed8cd41fa2941f4f15d5_0",
      "old_fingerprint": "597cbeaa5f18cd957eb22752af241f0e_27",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00091\", \"FOO%3Decho+Injection\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00092.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00092.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00092\", \"FOO%3Decho+Injection\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00092\", \"FOO%3Decho+Injection\")",
      "fingerprint": "8330956d7fae331f15699692e0dd7892_0",
      "old_fingerprint": "2c53f7533378ca79868a9cd851d3afec_28",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00092\", \"FOO%3Decho+Injection\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00093.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00093.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00093\", \"ls\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00093\", \"ls\")",
      "fingerprint": "15fe1d9d374bba77e050974bb44f2ef2_0",
      "old_fingerprint": "fba05fa7d7a4a1bf372d626430d31f8f_29",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00093\", \"ls\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00097.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00097.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00097\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00097\", \"color\")",
      "fingerprint": "b7cbc42f96d6e55929c5b44d8b011410_0",
      "old_fingerprint": "d1b0f3e567756b7de315a3823d6170c3_30",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00097\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00098.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00098\", \"my_user_id\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00098\", \"my_user_id\")",
      "fingerprint": "fa47e34946f9dac3a27f4ebec46bbf64_0",
      "old_fingerprint": "18a987c60d7c3ea0fa50452c162628a2_31",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00098\", \"my_user_id\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00099.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00099\", \"my_userid\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00099\", \"my_userid\")",
      "fingerprint": "12411bccc197f5c029374c6c51b4b5c8_0",
      "old_fingerprint": "f003f0857eb696edb4c98a51c9ac577d_32",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00099\", \"my_userid\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00100.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00100.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00100\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00100\", \"bar\")",
      "fingerprint": "f6e717dd6333b7cdc438162e08b60004_0",
      "old_fingerprint": "eb45221931becc96140f2badac331f17_33",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00100\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00101.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00101.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00101\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00101\", \"bar\")",
      "fingerprint": "dc35c0d4d62d4bca3f28d93e78b2dd77_0",
      "old_fingerprint": "66d144962ca463a8e1ab30b4725c4885_34",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00101\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00102.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00102\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00102\", \"bar\")",
      "fingerprint": "fcd307d3c838dceb2a339dd604de3c7f_0",
      "old_fingerprint": "cc9610ffd9b047f91226032c7fa48301_35",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00102\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00103.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00103\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00103\", \"bar\")",
      "fingerprint": "1f644472f5d3001e872fbc8039191e3f_0",
      "old_fingerprint": "6bb491a6aefd120db7195721a9ee2b7a_36",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00103\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00104.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00104\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00104\", \"bar\")",
      "fingerprint": "62c3734010ecea9416ff9ce32ca34fbc_0",
      "old_fingerprint": "3135e80123ce2a5d469f5a81867a32a1_37",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00104\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00105.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00105\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00105\", \"bar\")",
      "fingerprint": "639e4e35fbbca286b664e27f0464c620_0",
      "old_fingerprint": "a4c2602a34b46b3bd5ee40b4efffd64a_38",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00105\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00106.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00106.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00106\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00106\", \"bar\")",
      "fingerprint": "4a6c87765dab191e3a61554da111c01d_0",
      "old_fingerprint": "ab271b7d8bb4673a75d5c65424c2d2b9_39",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00106\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00107.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00107.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00107\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00107\", \"bar\")",
      "fingerprint": "2b320c3ac4e5880d36c6bd92f7581fc9_0",
      "old_fingerprint": "ee3b3e0a649ebba89848a6d67a178d95_40",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00107\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00108.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00108.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00108\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00108\", \"bar\")",
      "fingerprint": "f0304af8e2d1128b735d027036124dcf_0",
      "old_fingerprint": "bddc846f14265743361fd9e90bbbd1c4_41",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00108\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00109.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00109\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00109\", \"bar\")",
      "fingerprint": "870f7b8cd6b1db26d84af8b98656b7cf_0",
      "old_fingerprint": "563f42b40bfa175fba2c029bf8843266_42",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00109\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00110.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00110.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00110\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00110\", \"bar\")",
      "fingerprint": "9bfb6b2bb295878e27e959d6e4d5071b_0",
      "old_fingerprint": "b97fd03d87a8c03d7f2ad2f3e9a71355_43",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00110\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00111.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00111.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00111\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00111\", \"bar\")",
      "fingerprint": "8072458f09202684be9f51ffb77d750d_0",
      "old_fingerprint": "3761be508b97f016a9d91c315b19cfbc_44",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00111\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00112.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00112\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00112\", \"bar\")",
      "fingerprint": "14f4fc4c7a79245c5f32de8b2c18531f_0",
      "old_fingerprint": "1b3e5e7f393ec9c111e3b641d4d045a2_45",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00112\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00113.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00113.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00113\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00113\", \"bar\")",
      "fingerprint": "7aaea62f71a0e26c3a13de051041f47b_0",
      "old_fingerprint": "ef43ec06b6bdb38a44fff460a8c81214_46",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00113\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00114.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00114\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00114\", \"bar\")",
      "fingerprint": "9bd8579888331f86d6c780ff6bbc5b96_0",
      "old_fingerprint": "1ea3932d720a529397a9f6d996fc97f0_47",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00114\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00115.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00115.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00115\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00115\", \"bar\")",
      "fingerprint": "71fc66e4babb583556d2708d2d3933d5_0",
      "old_fingerprint": "d9942b021e71b047db5fbb8039bf7d6c_48",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00115\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00116.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00116.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00116\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00116\", \"2222\")",
      "fingerprint": "8ee183b7854100505badf5bf1864ef01_0",
      "old_fingerprint": "7a30c592903405e48cdca439b869207f_49",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00116\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00117.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00117\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00117\", \"2222\")",
      "fingerprint": "bac6441f292cc5853edf3eb8d51f5a99_0",
      "old_fingerprint": "2ee95087dfe48f3ffa63c069ccc6ddad_50",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00117\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00118\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00118\", \"2222\")",
      "fingerprint": "02ce9410c246f92dfdad423a923aeefd_0",
      "old_fingerprint": "6972982035ac221d88ec509f90bccfe6_51",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00118\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00942.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00942.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00942\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00942\", \"someSecret\")",
      "fingerprint": "c0d42a110456bd7e3f08b7ab05f5333c_0",
      "old_fingerprint": "f4d96cb4c4678b19c0be259ae08f2301_52",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00942\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00943.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00943.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00943\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00943\", \"someSecret\")",
      "fingerprint": "e963f3febdd7cfb68fcd33b834b7206b_0",
      "old_fingerprint": "16e4ab93cd6c15182e4c79063d919530_53",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00943\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00944.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00944.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00944\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00944\", \"someSecret\")",
      "fingerprint": "0e350070e2c1887294ba4de06aba1dc7_0",
      "old_fingerprint": "13e6b82ee411ae6901c8fe3e6ee628cb_54",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00944\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00945.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00945\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00945\", \"someSecret\")",
      "fingerprint": "cdccf696529391e4ad83d16bbb30564d_0",
      "old_fingerprint": "96e65d60f07f18379170dca2e55b8f24_55",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00945\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00946.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00946\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00946\", \"someSecret\")",
      "fingerprint": "a043567ed79c85ed5da27378bd11a623_0",
      "old_fingerprint": "4f88812a10e23ac720db3036aad923bc_56",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00946\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00947.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00947\", \"Ms+Bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00947\", \"Ms+Bar\")",
      "fingerprint": "ac0333987b4b5c2f6ca488b1ee1b6be0_0",
      "old_fingerprint": "951a68ab2a5bf3dfcd05cbc33022ec9f_57",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00947\", \"Ms+Bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00948.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00948\", \"Ms+Bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00948\", \"Ms+Bar\")",
      "fingerprint": "0d731a3b2b9d2d671164a1b74ad704a7_0",
      "old_fingerprint": "65eed7a04a440d2df260368b42bf9ea4_58",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00948\", \"Ms+Bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00949.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00949\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00949\", \"FileName\")",
      "fingerprint": "ab64bdfde39cd963abe02c3ff8352e17_0",
      "old_fingerprint": "ca2d74ffefa558a1164e1a09c88fef30_59",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00949\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00950.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00950\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00950\", \"FileName\")",
      "fingerprint": "5bd772f704fe7e6eac9e94b5a12599d2_0",
      "old_fingerprint": "2e1fdb22d595fc18ff32418c52d9373b_60",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00950\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00951.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00951\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00951\", \"FileName\")",
      "fingerprint": "c23da31c4aed2c476fd93fe76bd20c27_0",
      "old_fingerprint": "6b0e824591f0ff86798c896a80fc70cf_61",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00951\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00952.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00952\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00952\", \"FileName\")",
      "fingerprint": "1d7f4b589dba21fd5da3dffb1735c115_0",
      "old_fingerprint": "1b0ef36b3673309ac216e9f777093796_62",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00952\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00953.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00953\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00953\", \"FileName\")",
      "fingerprint": "9fcf6bfe12489cad00be50a1528d5c74_0",
      "old_fingerprint": "c9d9cde3fb944bfdf231374482521809_63",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00953\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00954.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00954\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00954\", \"FileName\")",
      "fingerprint": "019349d89f013849122c937c4b03ed34_0",
      "old_fingerprint": "d20f3b4f66c68c4d23b468d9c020717f_64",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00954\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00955.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00955\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00955\", \"FileName\")",
      "fingerprint": "e3c0c3f45312e16e734b1b6b6f73800c_0",
      "old_fingerprint": "08b5b98e0639801e9bd1c14bbeda1016_65",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00955\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00956.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00956\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00956\", \"FileName\")",
      "fingerprint": "6914d3ce1a3eaf12c24531a76c0124af_0",
      "old_fingerprint": "6e7507893e61e863b17bd7e0aaa79d5e_66",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00956\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00957.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00957.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00957\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00957\", \"FileName\")",
      "fingerprint": "0cb2f96f4b3a0e40da568b3c4df12ad7_0",
      "old_fingerprint": "00e50adb1ae7482e0e8b3a8c53baaaa8_67",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00957\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00958.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00958.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00958\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00958\", \"FileName\")",
      "fingerprint": "156a0933fc74ef389ab66ec0de80275a_0",
      "old_fingerprint": "4f4e06412d6a8495b882a9149bb9b9a1_68",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00958\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00959.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00959\", \"Ms+Bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00959\", \"Ms+Bar\")",
      "fingerprint": "c9bc5721a1fe0cb8d69d43f5df1d198a_0",
      "old_fingerprint": "71e814558d2de0b44347456dfcfc267c_69",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00959\", \"Ms+Bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00961.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00961\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00961\", \"someSecret\")",
      "fingerprint": "a5ee817ee084953550324124b36afc87_0",
      "old_fingerprint": "d606bb484835a6facaf90b0af7012323_70",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00961\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00962.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00962.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00962\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00962\", \"someSecret\")",
      "fingerprint": "3ecc6a94217f08e7bf49b7082ce4454b_0",
      "old_fingerprint": "d5879eaf3d7d5ec2dc1c43660cc4978a_71",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00962\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00963.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00963\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00963\", \"someSecret\")",
      "fingerprint": "69c970ffca87675809752d1c63f4c2cf_0",
      "old_fingerprint": "54194a14744a49f1b4ce91815ba297d5_72",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00963\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00964.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00964.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00964\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00964\", \"someSecret\")",
      "fingerprint": "f58669ad8c0442045b6fcbaf8ce0ae8f_0",
      "old_fingerprint": "47a06d2dd0609bae7394402e1bd6d166_73",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00964\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00965.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00965.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00965\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00965\", \"someSecret\")",
      "fingerprint": "3c15ce9b3c56a111ea225a4dd5cfb3ba_0",
      "old_fingerprint": "c8932da7171f814fe9e4119249467e50_74",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00965\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00966.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00966.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00966\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00966\", \"someSecret\")",
      "fingerprint": "c855841a5e57ff0d3778e517ab736281_0",
      "old_fingerprint": "179c3e6fc4cb0a9a3259d8df7dcc2713_75",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00966\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00967.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00967.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00967\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00967\", \"someSecret\")",
      "fingerprint": "c3561e6aefa7f90bc89d7b13221addf2_0",
      "old_fingerprint": "536210fa047457b0c552c868554525e1_76",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00967\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00968.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00968.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00968\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00968\", \"ECHOOO\")",
      "fingerprint": "28a19ada43ecc4fbde123c38b8c7a404_0",
      "old_fingerprint": "8d88c5cc9de3c52ee0359ca34e59d4bc_77",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00968\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00969.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00969.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00969\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00969\", \"ECHOOO\")",
      "fingerprint": "253b2e27152679b992ee308925852167_0",
      "old_fingerprint": "a1b3ece7894241e86c78e9df86a3bc3e_78",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00969\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00970.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00970.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00970\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00970\", \"ECHOOO\")",
      "fingerprint": "6f6fc9239025c32969195c991095e8a5_0",
      "old_fingerprint": "513bc02a9e33654a7157eada52176fc8_79",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00970\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00978.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00978.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00978\", \"localhost\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00978\", \"localhost\")",
      "fingerprint": "36388aaa25980d7de7493f1f7158d74b_0",
      "old_fingerprint": "07f42e14339214a50eb9e59cd64d602e_80",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00978\", \"localhost\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00979.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00979.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 73
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 73
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00979\", \".\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00979\", \".\")",
      "fingerprint": "8ee9337432a046761978d6daa4a810e9_0",
      "old_fingerprint": "755f2d843c2b624a136b7f6b396c4494_81",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00979\", \".\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00980.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00980.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00980\", \"FOO%3Decho+Injection\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00980\", \"FOO%3Decho+Injection\")",
      "fingerprint": "71696a1c79c6a66978572f3dc36fc7ab_0",
      "old_fingerprint": "d6fe68066232e4cc3a445cf4cf2e6080_82",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00980\", \"FOO%3Decho+Injection\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00981.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00981.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 73
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 73
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00981\", \".\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00981\", \".\")",
      "fingerprint": "e50d000c08754a05e0bae19f30bda036_0",
      "old_fingerprint": "6d20805bdeccdc647a1a964f13f7fe63_83",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00981\", \".\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00982.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00982.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00982\", \"FOO%3Decho+Injection\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00982\", \"FOO%3Decho+Injection\")",
      "fingerprint": "0dcf1540f5a38623e05f4dbb511da7f7_0",
      "old_fingerprint": "bda6d067cc93a91bde20f99c32b2d6fd_84",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00982\", \"FOO%3Decho+Injection\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00983.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00983.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00983\", \"FOO%3Decho+Injection\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00983\", \"FOO%3Decho+Injection\")",
      "fingerprint": "b5f8e7d0f457b42d4ccf29458e683327_0",
      "old_fingerprint": "31a3dccc549e3e6e8498689c4a471852_85",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00983\", \"FOO%3Decho+Injection\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00991.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00991\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00991\", \"color\")",
      "fingerprint": "ec5891c5db9756355777322226010890_0",
      "old_fingerprint": "46122fb8df742f626487e9ea82357cf1_86",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00991\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00992.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00992\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00992\", \"color\")",
      "fingerprint": "34afd35ad7dd3b9342a1024c8467f4a7_0",
      "old_fingerprint": "43d0bc9806ac74dec510e276b8a5cde7_87",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00992\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00993.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00993\", \"my_user_id\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00993\", \"my_user_id\")",
      "fingerprint": "14a02028018a28b1c0c73b816840782d_0",
      "old_fingerprint": "773550eda8cc01b7bd63a329cd9fa8db_88",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00993\", \"my_user_id\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00994.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00994\", \"my_user_id\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00994\", \"my_user_id\")",
      "fingerprint": "252bda23d5cd1e475364db65197459bd_0",
      "old_fingerprint": "e4f4cb12c9bea4b95b8fc9f2f9e40560_89",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00994\", \"my_user_id\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00995.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest00995\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest00995\", \"color\")",
      "fingerprint": "a3c15ff7ce87d87d517a2e71b814baec_0",
      "old_fingerprint": "3fb6fae9e418776f73385282ec878d05_90",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest00995\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00996.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00996\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00996\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "efde607470f440e6f2b8a15c32336674_0",
      "old_fingerprint": "5fb902b55ece41e51edb302453b499cd_91",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00996\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00997.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00997\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00997\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "69192f38004249225d5d4da4128afc33_0",
      "old_fingerprint": "1adb59e6e42eee70fac89a53ade9791e_92",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00997\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00998.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00998\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00998\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "a35dc6730eaafb7045b4542ce13d3ff2_0",
      "old_fingerprint": "44c5fe4fbabde8bdd268b3d22d327ec2_93",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00998\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00999.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00999\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00999\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "b3fd65148c06e84d6411110706c55af0_0",
      "old_fingerprint": "9f5ba04660d477ede57a27513ba4e9f8_94",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest00999\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01000.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01000\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01000\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "bc355038bc6f5c1575c4400f26e01ebe_0",
      "old_fingerprint": "5ffeb8c2fb8ab44952e60edf6126c47a_95",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01000\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01001\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01001\", \"bar\")",
      "fingerprint": "c13a38446caeca64858e387bb3fd0478_0",
      "old_fingerprint": "b2ab3aa2e5efe71f6b35da75b329bc7c_96",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01001\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01002\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01002\", \"bar\")",
      "fingerprint": "451b1e8afb2599a9693d1539a4c4f49d_0",
      "old_fingerprint": "f7d8a327220a2b6ad3c9c5b60a538c2d_97",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01002\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01003.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01003\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01003\", \"bar\")",
      "fingerprint": "e79fdf364bc4dc372c98e22b0c4c4dd9_0",
      "old_fingerprint": "baac1ccaaf99b35d269056364e4204a6_98",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01003\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01004\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01004\", \"bar\")",
      "fingerprint": "0de1fcf90f187bc890375372debfc332_0",
      "old_fingerprint": "241adb7c31b67831dd601698f1478e9c_99",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01004\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01005\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01005\", \"bar\")",
      "fingerprint": "866df4b48a52db711ef3bd3db64da985_0",
      "old_fingerprint": "ae1ff9e9eb36e0527c3b76ab6a59eb0d_100",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01005\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01006\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01006\", \"bar\")",
      "fingerprint": "4bf4809c63a47e714ada2c6aec35d5b6_0",
      "old_fingerprint": "1e8aa18581d50ca1c9399d336fda7922_101",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01006\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01007.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01007\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01007\", \"bar\")",
      "fingerprint": "b30570430a23c2d1092cc932018f7a78_0",
      "old_fingerprint": "879d3919d6c4ca1c6e5617c8a4228ae4_102",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01007\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01008.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01008\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01008\", \"bar\")",
      "fingerprint": "91cac7a81c71ded547d9a3e02ec37196_0",
      "old_fingerprint": "a06935658eca10f2a0474f9eda87348a_103",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01008\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01009.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01009\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01009\", \"bar\")",
      "fingerprint": "57eea294cd951a8dcd59a27927d04a19_0",
      "old_fingerprint": "732567713bad4c36cabf71ddb87a622d_104",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01009\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01010.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01010\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01010\", \"bar\")",
      "fingerprint": "b62342a7b76178dcb8b13eb761a5efca_0",
      "old_fingerprint": "1c2b8ac6a2fd5ac0e81347f356f4e66d_105",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01010\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01011.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01011\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01011\", \"bar\")",
      "fingerprint": "ff249c834db8b274cb7aebd6634b43b6_0",
      "old_fingerprint": "347182894eff9d0c0f40472bffe69185_106",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01011\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01012.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01012\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01012\", \"bar\")",
      "fingerprint": "ae0d87e5fc0f2c890541943eb4970804_0",
      "old_fingerprint": "3c394d911bf96662b11e895d530a89a5_107",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01012\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01013.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01013\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01013\", \"2222\")",
      "fingerprint": "e45be77582e56b3e287e8f0e3fe27681_0",
      "old_fingerprint": "c5444b02c6d97e6eccab47016064f9f9_108",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01013\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01014\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01014\", \"2222\")",
      "fingerprint": "e9026d36596cda4affc49db7786b1a12_0",
      "old_fingerprint": "3bde03e4284aa73fec741cdc0d63875f_109",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01014\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01822.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01822\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01822\", \"someSecret\")",
      "fingerprint": "55fb2a7e1ba950a7d3fc0ba0a0373ce9_0",
      "old_fingerprint": "6da369778d838e2aaf7b961ea47683d1_110",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01822\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01823.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01823\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01823\", \"someSecret\")",
      "fingerprint": "61c82f02a3cfe2dc16ab4c49b7b1af09_0",
      "old_fingerprint": "9d3a106ba28900d577f6a0bb509b3776_111",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01823\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01824.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01824.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01824\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01824\", \"someSecret\")",
      "fingerprint": "4fea48e35637b83e4b66e1c7df0c310e_0",
      "old_fingerprint": "8b372f0837a968f8d6da379225d66d72_112",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01824\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01825.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01825.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01825\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01825\", \"someSecret\")",
      "fingerprint": "e35f375cba84e117c85ec79b211ec22c_0",
      "old_fingerprint": "7405f83eed6d12f1f10d2b00839f74ff_113",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01825\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01826.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01826.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01826\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01826\", \"someSecret\")",
      "fingerprint": "9436133731e84f1bdc72de2a431d8760_0",
      "old_fingerprint": "e09325c4e09efddc97f3f075646250b5_114",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01826\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01827.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01827.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01827\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01827\", \"someSecret\")",
      "fingerprint": "0f64259232ddd421a6d0114dc43cec15_0",
      "old_fingerprint": "c9292aa1606dfa6ff8639998b63e0efd_115",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01827\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01828.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01828.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01828\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01828\", \"someSecret\")",
      "fingerprint": "ac336b017bc879deecb64dd4be83908a_0",
      "old_fingerprint": "bb14e8d25e5f9323eba781fd45c1dbe3_116",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01828\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01829.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01829\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01829\", \"someSecret\")",
      "fingerprint": "aa3a59972bd9839733656a2a8a31f372_0",
      "old_fingerprint": "111dab0a896ac5210f953c0984d2b6f2_117",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01829\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01830.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01830\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01830\", \"someSecret\")",
      "fingerprint": "7ce7c44c127f0e0414ecdce63bb4a332_0",
      "old_fingerprint": "643c42a1d90ec0eddd60275a6ffbfc93_118",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01830\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01831.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01831\", \"Ms+Bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01831\", \"Ms+Bar\")",
      "fingerprint": "89f9de953374344b2b7a70ab2a22eeb1_0",
      "old_fingerprint": "6a537ceba053ec67381a3a302830da5a_119",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01831\", \"Ms+Bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01832.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01832\", \"Ms+Bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01832\", \"Ms+Bar\")",
      "fingerprint": "d22375937494e9ad8749b3b481bcf132_0",
      "old_fingerprint": "6531eed35a0fb56cab1ffe67e96a073f_120",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01832\", \"Ms+Bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01833.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01833\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01833\", \"FileName\")",
      "fingerprint": "5ec4a4f060b3b21ec21f854c72cd0fc7_0",
      "old_fingerprint": "b9042bc0be71d8800eb19ee09dc80fe1_121",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01833\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01834.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01834\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01834\", \"FileName\")",
      "fingerprint": "2d12cbae83ae79d8b94657560928be12_0",
      "old_fingerprint": "df198826548eab5a697e46d85004530f_122",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01834\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01835.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01835\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01835\", \"FileName\")",
      "fingerprint": "cdd0e9d0aecccddd4913099775097a3a_0",
      "old_fingerprint": "bf4c198d66287ca5b1b4c38b97b472e8_123",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01835\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01836.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01836\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01836\", \"FileName\")",
      "fingerprint": "35ea8de2c1556358169febde50b534f1_0",
      "old_fingerprint": "859392b21e7bdb469b258575e4a51557_124",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01836\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01837.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01837\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01837\", \"FileName\")",
      "fingerprint": "a45a841284a1fb3f9747d171257e031c_0",
      "old_fingerprint": "d66ed09bd088154ff67f5e2de9156d55_125",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01837\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01838.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01838\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01838\", \"FileName\")",
      "fingerprint": "86c6511e09665ae67b2427b9583a238b_0",
      "old_fingerprint": "01e2042e19344fbc5ca8258766a39dc5_126",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01838\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01839.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01839\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01839\", \"FileName\")",
      "fingerprint": "0453d4fe2c6212d6ac203f353a238464_0",
      "old_fingerprint": "aba788fde4f4def0b7039880f5049848_127",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01839\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01840.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01840\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01840\", \"FileName\")",
      "fingerprint": "f247b4c21fcd5e30c6f01e7c2fdf68b5_0",
      "old_fingerprint": "da036d3915a878d6e0b03a6bdf87e0c7_128",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01840\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01841.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 80
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01841\", \"FileName\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01841\", \"FileName\")",
      "fingerprint": "7c27ba053778891edecc42a3c1b3e3d5_0",
      "old_fingerprint": "02294c3403125ac17938af074cba5f40_129",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01841\", \"FileName\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01844.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01844\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01844\", \"someSecret\")",
      "fingerprint": "e8536898b48e479761d810b75bda5bc6_0",
      "old_fingerprint": "a6afa27bbfe597813d3bb056f29fadc0_130",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01844\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01845.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01845\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01845\", \"someSecret\")",
      "fingerprint": "8831769a143750783e2224a9c42083f6_0",
      "old_fingerprint": "915c766a88d2f1e91a7b0660924ca178_131",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01845\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01846.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01846\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01846\", \"someSecret\")",
      "fingerprint": "3cfafd211ad5892f2637ef4240678e9c_0",
      "old_fingerprint": "35a78c821b6842a98d0c12082349e3f2_132",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01846\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01847.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01847.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01847\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01847\", \"someSecret\")",
      "fingerprint": "5c9491ba78fa3177674267aabf4f7605_0",
      "old_fingerprint": "9c246d03f6c277ac779b28aa8fd07916_133",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01847\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01848.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01848.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01848\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01848\", \"someSecret\")",
      "fingerprint": "40a086a5512623b612916f8ec4d42bb1_0",
      "old_fingerprint": "6a87fa74bdfa6f2c9c426d4461c854ff_134",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01848\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01849.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01849.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01849\", \"someSecret\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01849\", \"someSecret\")",
      "fingerprint": "9fef480c96cacc629acdb95455cd6eb5_0",
      "old_fingerprint": "68eb4d0d3b9727f95bfb84a494498374_135",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01849\", \"someSecret\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01850.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01850.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01850\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01850\", \"ECHOOO\")",
      "fingerprint": "f2b2ddfbb8fb7c07ca8e3af26eb0e854_0",
      "old_fingerprint": "a66e412ee47174693576702dc6d52fa1_136",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01850\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01851.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01851.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01851\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01851\", \"ECHOOO\")",
      "fingerprint": "5dfc5b27810fcd27b43f5b84454fd343_0",
      "old_fingerprint": "223dd6649451c94c33092420eaa5dbc8_137",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01851\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01852.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01852.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 78
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01852\", \"ECHOOO\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01852\", \"ECHOOO\")",
      "fingerprint": "0b9260d3a2c47bd6266651231ed20176_0",
      "old_fingerprint": "21eea142e24ac15515267465b2954dcf_138",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01852\", \"ECHOOO\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01864.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01864.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01864\", \"ls\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01864\", \"ls\")",
      "fingerprint": "b6f3e813ba689deeaeaf00137dd85553_0",
      "old_fingerprint": "86212f8fafe8fe3f4c0ad99e720db2b2_139",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01864\", \"ls\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01865.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01865.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 74
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01865\", \"ls\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01865\", \"ls\")",
      "fingerprint": "e91bf8bee0f4eefbffc044e973053709_0",
      "old_fingerprint": "cfac67e8a5ae11c70b63befbeabd8294_140",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01865\", \"ls\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01872.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01872\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01872\", \"color\")",
      "fingerprint": "533f0e996a1996fe079307b9d75237cf_0",
      "old_fingerprint": "8332f974a4623f8879c3e9f017edd2a3_141",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01872\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01873.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 82
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01873\", \"my_user_id\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01873\", \"my_user_id\")",
      "fingerprint": "920c5862e124cc1b1d941191bdda07cf_0",
      "old_fingerprint": "1d0d4d4b58ca47fd138d735019155cda_142",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01873\", \"my_user_id\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01874.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01874\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01874\", \"color\")",
      "fingerprint": "e2e186180ba1af07a4427cf8b7e0b38d_0",
      "old_fingerprint": "3b27f208d4040c224ac155759817db82_143",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01874\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01875.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01875\", \"color\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01875\", \"color\")",
      "fingerprint": "8fe88040818747474b409e7fe4217da8_0",
      "old_fingerprint": "61544854d96ca964cad88d487a276640_144",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01875\", \"color\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01876.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 81
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01876\", \"my_userid\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01876\", \"my_userid\")",
      "fingerprint": "c41f757f2bdb382fb11064dcce386014_0",
      "old_fingerprint": "ba54387f061025ba8302302db961dc6b_145",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01876\", \"my_userid\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01877.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        }
      },
      "sink": {
        "start": 37,
        "end": 38,
        "column": {
          "start": 17,
          "end": 95
        },
        "content": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01877\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01877\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\")",
      "fingerprint": "a9ec96961f0a73771c5b359f9b74fd1a_0",
      "old_fingerprint": "8eb76e5b69d3e3a20fea8571ec991818_146",
      "code_extract": "                new javax.servlet.http.Cookie(\n                        \"BenchmarkTest01877\", \"verifyUserPassword%28%27foo%27%2C%27bar%27%29\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01878.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01878\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01878\", \"bar\")",
      "fingerprint": "061dfda051e284a8cacb86a0b88da362_0",
      "old_fingerprint": "e8da5e69a45959738f5cac3326a0b6a1_147",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01878\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01879.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01879\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01879\", \"bar\")",
      "fingerprint": "952e9b8312bd628d7efed284d4175535_0",
      "old_fingerprint": "14184594d0b2777d32ab3c8244b55ccf_148",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01879\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01880.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01880\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01880\", \"bar\")",
      "fingerprint": "5bab61c6cfea2025b08fe9fb45cbd8af_0",
      "old_fingerprint": "5810cc65695eea65dcc6132f404136ce_149",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01880\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01881.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01881\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01881\", \"bar\")",
      "fingerprint": "3f65deee4f4213ea8e69fd5db57215d0_0",
      "old_fingerprint": "a91d479e5a5f215b4f9fb70910b2ab10_150",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01881\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01882.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01882\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01882\", \"bar\")",
      "fingerprint": "8e3f7ea05d6e5f0263a0edd91df467c7_0",
      "old_fingerprint": "4cf84fe0ce339f424a751199cc27ef06_151",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01882\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01883.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01883\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01883\", \"bar\")",
      "fingerprint": "e0a02a2f0f86e2200cd5563536ff0ee0_0",
      "old_fingerprint": "a19c13da56e0a286beb74a734db2fe2b_152",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01883\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01884.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01884\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01884\", \"bar\")",
      "fingerprint": "35c49df66bac163e3210fb7fc863af0a_0",
      "old_fingerprint": "beb06dc877a6797d0c6cec5b5ccf93f0_153",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01884\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01885.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01885\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01885\", \"bar\")",
      "fingerprint": "867a707479985dc1688afee23bedc693_0",
      "old_fingerprint": "c79f6dc8c68c86b7f501a5f3433a4ee5_154",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01885\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01886.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01886\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01886\", \"bar\")",
      "fingerprint": "e60952bec90808c415b8f1ddfd75b74a_0",
      "old_fingerprint": "8c0905a88d40b8f88879d6b2dc89a5c1_155",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01886\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01887.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01887\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01887\", \"bar\")",
      "fingerprint": "80d20d94a3eca866f19a6d6d55662b2c_0",
      "old_fingerprint": "a8161ca3d02451add7453ac773b6c4d5_156",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01887\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01888.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01888\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01888\", \"bar\")",
      "fingerprint": "ba93f29465e8af10f83491b2bad97daf_0",
      "old_fingerprint": "6362e3da035eaa6ffca3a8d93c08b49e_157",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01888\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01889.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01889\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01889\", \"bar\")",
      "fingerprint": "ab1305795d57fbfd20d4b3cc723866a5_0",
      "old_fingerprint": "48c5c28846d6b94372cbe09cac74094e_158",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01889\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01890.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01890\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01890\", \"bar\")",
      "fingerprint": "73d8d2a392c5312961ee84de73a4011d_0",
      "old_fingerprint": "8f6c02899fc84b7841acbe15fb31d6d0_159",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01890\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01891.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 75
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01891\", \"bar\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01891\", \"bar\")",
      "fingerprint": "d7ba054f6115425d94c88cb063f99fa9_0",
      "old_fingerprint": "96663dddb7966423b7a186db2761ffa8_160",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01891\", \"bar\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01892.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01892\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01892\", \"2222\")",
      "fingerprint": "24c5827aeb92bcc631bfa428bb54c034_0",
      "old_fingerprint": "2a29e0f83fe8805680788956c717eea5_161",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01892\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01893.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01893\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01893\", \"2222\")",
      "fingerprint": "e3cdcf55a4d60f19636ef4dcc8386ace_0",
      "old_fingerprint": "99bdfaa604645e886421ed11c66489e3_162",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01893\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_http_only",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"HttpOnly\" attribute when set to \"true\" protects the cookie value from\nbeing accessed by client side JavaScript such as reading the \"document.cookie\"\nvalues. By enabling this protection, a website that is vulnerable to Cross-Site\nScripting (XSS) will be able to block malicious scripts from accessing the\ncookie value from JavaScript.\n\n## Remediations\n\n✅ Set `setHttpOnly` to `true`\n\n```java\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_http_only",
      "line_number": 37,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        }
      },
      "sink": {
        "start": 37,
        "end": 37,
        "column": {
          "start": 17,
          "end": 76
        },
        "content": "new javax.servlet.http.Cookie(\"BenchmarkTest01894\", \"2222\")"
      },
      "parent_line_number": 37,
      "snippet": "new javax.servlet.http.Cookie(\"BenchmarkTest01894\", \"2222\")",
      "fingerprint": "27d1e08123793b5b662d72c807ca71f3_0",
      "old_fingerprint": "c38670cd692ee5349e8ede21366f0fbc_163",
      "code_extract": "                new javax.servlet.http.Cookie(\"BenchmarkTest01894\", \"2222\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00169.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 78,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "5245eb426aeb8045dd76512f0bf747bf_0",
      "old_fingerprint": "5d277670d9287bd8b5dd91f4977d9569_23",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00170.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 89,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "5843723b4f6b271e3445dabcb6e52146_0",
      "old_fingerprint": "d14015d4428ec94fad92d0f8d5fe7a37_32",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00241.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 83,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "b0e7f2eada967ad5e3d45b19a3e97bb8_0",
      "old_fingerprint": "0d22ef630b17177804df28a2bd99c2c8_27",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00300.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 77,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "cc69d3c4642544616a14fb0aa770f7f7_0",
      "old_fingerprint": "58bdb907a86856962ae4958058ccfa4a_21",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00348.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 62,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "c99ddc64ab5d270401b68c40dfd540a5_0",
      "old_fingerprint": "8aa6a0fcb91a3e25ae52a42d4c3693e7_0",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00403.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 68,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "7e3829625956cddfc2430a7f83edabf1_0",
      "old_fingerprint": "50527feb4740b9186d7d2bee3df2a670_12",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00491.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 71,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "22e3156559796f89240835004204b977_0",
      "old_fingerprint": "deb0966f995f9c7d27fd6086649c15e8_18",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 77,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "df6e2b926a321b2827b7750d42f88d34_0",
      "old_fingerprint": "d258077a7a5ff459be3a952c7399b4b1_20",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00566.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 79,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "255956e4d2b9cec59c576506286a12ac_0",
      "old_fingerprint": "b1d93322e859c8870daf7da049728ae2_25",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00736.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 70,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "827364c350fe1ed56e10ef1a4a4d1a7b_0",
      "old_fingerprint": "6e83ece7bb23af4fad5027965e0af880_14",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00820.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 87,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "514b5da449153b6f45fecfd29f7b5edd_0",
      "old_fingerprint": "a3f6ca01cf3c57899f6a8c76aeaa3d0b_30",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00821.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 88,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "58f70bd4ab290163cf74fc05088483cb_0",
      "old_fingerprint": "b77723112d15d681d60022a514908e8a_31",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00903.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 83,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "6f8e8a5079a5590335537827655d9885_0",
      "old_fingerprint": "0e5cf47895b70bc1a754d501ab2339b9_26",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 68,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "ca11ace4f0ff5144964bdf4eb6bc984a_0",
      "old_fingerprint": "1ea9163005a35e859c54c7bccb6d6f58_13",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01134.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 78,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "3b41f02dbdb5502d271021b001762fc1_0",
      "old_fingerprint": "2d95b040834c5d3b3cee9ad6900cf271_22",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01185.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 70,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "805c9f5864ca91188c4908ffcea89b2b_0",
      "old_fingerprint": "f36e09bbf3db2b174ba3e15abfff4cdf_15",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01186.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 70,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "a91cdb8838d8030b2b2fc21acbb8d483_0",
      "old_fingerprint": "84849b16a78d064a073835418f95fcd3_16",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01187.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 70,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "eb4ae24e09e3c0ba0e4805efcc794857_0",
      "old_fingerprint": "2337e6944e913d7dfdd1f93f88f7ec3c_17",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01280.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 63,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "02a0e5f6079e1ce99d157257b0b1c274_0",
      "old_fingerprint": "4e468dce35578543aa86b38c6ebb600a_5",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01281.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 63,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "851722f6ae4a74b3f258f536bda66f11_0",
      "old_fingerprint": "56e91068f059664c33a85e13554dcbf1_3",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01282.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 63,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "c693c12344451aeeb6956cf1293e39c5_0",
      "old_fingerprint": "174024b9ba2e7c6c145cd2a4209b781a_4",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01283.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 63,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "41dcc99df468f44f80e74983818ba870_0",
      "old_fingerprint": "b8004b58969e9d3a966afb6de06ae7df_1",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01521.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 65,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "7b6c5daef6fff8560b0eff157636779a_0",
      "old_fingerprint": "7d98903413602048eb8ec2fa4f1de6c2_9",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01682.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 87,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "229a24712907a9bad9a114f24cc8e80d_0",
      "old_fingerprint": "6d620adbd0dd072aa574692de8423980_29",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01683.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 87,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "0afe9bd37f28732be15dfee6483936bc_0",
      "old_fingerprint": "d2c31d801bc0b976e8630b4266dafb1d_28",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01789.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 64,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "0acaaeb80b1c7337d60022b436bafbfd_0",
      "old_fingerprint": "a95f9f03ee5e271d10df5c62779ee4f5_6",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 78,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "d6a9362a93f3c8b965654847180f9660_0",
      "old_fingerprint": "4c69bbb1da1f8ad8420937667f2d1bf6_24",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02142.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 63,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "9f56497e9399e461c17c004b33be9be9_0",
      "old_fingerprint": "0594af132f5d223ee68f989149d56f37_2",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02339.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 77,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "1583d04cb9aa98b168298580039378b5_0",
      "old_fingerprint": "7b2313d0f9ea6e89005acb859856b594_19",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02427.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 65,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "0523af72c4006bbfde1a2cab1ec92389_0",
      "old_fingerprint": "25981e552316acf01451539f6fc7a4e4_10",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02507.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 65,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "5360cc8b303c78d32afc7e264cfbfc52_0",
      "old_fingerprint": "e9b71bb9567487312c1b018b79b89c5c_11",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02709.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 64,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "916b502d0ad4a0cf5f53d88600882a4d_0",
      "old_fingerprint": "704a065e7cb919766dbcf97df26ca09a_7",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_cookie_missing_secure",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nThe \"Secure\" attribute when set to \"true\" ensures that a client will only send\nthe cookie to the server when HTTPS is being used. This prevents the cookie\nfrom being observed by unauthorized third parties.\n\n## Remediations\n\n✅ Set `setSecure` to `true`\n\n```java\ncookie.setSecure(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_cookie_missing_secure",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02710.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 44,
          "end": 92
        },
        "content": "new javax.servlet.http.Cookie(\"SomeCookie\", str)"
      },
      "parent_line_number": 64,
      "snippet": "new javax.servlet.http.Cookie(\"SomeCookie\", str)",
      "fingerprint": "7e1be45e9baebee1df005a353e4dc83d_0",
      "old_fingerprint": "b8ced5a374a8c9ab8689fd43dff4752e_8",
      "code_extract": "        javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(\"SomeCookie\", str);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00087.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00087.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 91,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "acc1b7855e3371af9771c73ac8cc2864_0",
      "old_fingerprint": "fa864bb7287248c76d3e383ae494723e_35",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00169.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00169.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 80,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "b9404a8cad2834c69ae9d6fb986ca277_0",
      "old_fingerprint": "5bfd7b82ee6f2ce2116ff2cc3e5bd648_22",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00170.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00170.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 91,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "882471019d71bcdf72d70fe3eef1e324_0",
      "old_fingerprint": "934c8358399f70f824d7dc0e1da0886e_34",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00241.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00241.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 85,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "8e56cb29c89c2ff0e6e3eba7afd1864c_0",
      "old_fingerprint": "774394881a697328e693dbab940005cc_29",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00300.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00300.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 79,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "c5b38460f286c9e673202c621b83ef99_0",
      "old_fingerprint": "c9a9af9b81d71a839fc051a6f8030f4f_21",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00348.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00348.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 64,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "93db1699573bcdcdf18fef2dcd4ff0ee_0",
      "old_fingerprint": "ac5a462928e36f4449e091276764ee02_0",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00403.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00403.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 70,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "f50e9145152cdd64d62c8c01c727249e_0",
      "old_fingerprint": "ce6f60d757415badb8c76f9724ceabe7_13",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00491.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00491.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 73,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "478c4e15b16ea87578fbc6450d7a295d_0",
      "old_fingerprint": "46cc4fe4a3a7712406814816eae4f7be_18",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 79,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "494c30b1c958550fa273c8fb49e60bf6_0",
      "old_fingerprint": "1965ff9bfcf14ca1e9aedab0d6ce10c2_20",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00566.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00566.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 81,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "b0941b83bcfd81ace3b71de06f2de8cc_0",
      "old_fingerprint": "3330eace4a928cf45acc8142d92eb411_25",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00736.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00736.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 72,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "44e1741664f0c82a0b75cf3c562b3c7d_0",
      "old_fingerprint": "c174a2846fa7733fe556ee90dea10343_17",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00820.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00820.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 89,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "8a954b92cdb1bfbca5fd37f13794ec99_0",
      "old_fingerprint": "cb2ea5976ea3f646df3d04c664355764_32",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00821.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00821.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 90,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "414a7622b57476fb13c50d7fb1cd3ccd_0",
      "old_fingerprint": "dbfdf17fd2202ed048ce43ab40ea0646_33",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00903.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00903.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 85,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "4cb41e82e9040e68f4f5064073bceb81_0",
      "old_fingerprint": "d0473c8e780225f0d6f717bf0d40cb7e_28",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00977.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00977.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 84,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "8b9d96a714cd6333060a66c20dbad512_0",
      "old_fingerprint": "0d11f7e7da7660c1c93b14504d857dcf_26",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 70,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "63050ae60412c66b6e6b68ae8623fcce_0",
      "old_fingerprint": "bd80ee13c4991809112aa78a4675ae30_12",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01134.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01134.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 80,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "76be966f06eccf4bd5ea08438371eb82_0",
      "old_fingerprint": "2cf603e6e788241d871f732834997265_24",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01185.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01185.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 72,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "7915c55acd0edf32b7248eef3bdf7d15_0",
      "old_fingerprint": "1c787509b14cf13f2e819bf15f58412d_15",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01186.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01186.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 72,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "2f00fba10c194d7cc174dbf484459d6f_0",
      "old_fingerprint": "51c28d83102a5b93ae044b0437964524_14",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01187.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01187.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 72,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "e2b8ddb718cc7453c16d48398e8d85b6_0",
      "old_fingerprint": "7875fd5cf56d293766b1817bf469fd69_16",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01280.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01280.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 65,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "89aebd40a4fe88fd754f2995c2ae260f_0",
      "old_fingerprint": "3be1c3c0351e078333ee2d5a4c491910_2",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01281.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01281.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 65,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "2c3d16937daa0b1786947731d649c816_0",
      "old_fingerprint": "20d608049168251cd9b22a662fa610de_3",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01282.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01282.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 65,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "ea65c8f699ad355915129851c265094f_0",
      "old_fingerprint": "250d6e594248fd081e4f84653ece7a25_4",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01283.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01283.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 65,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "2b67acae447464e41d2d8efc36db0f7e_0",
      "old_fingerprint": "d724255cde45a7b9e41cba544560806e_1",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01521.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01521.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 67,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "882b182e55f3b73da1932f9f962e9a25_0",
      "old_fingerprint": "8b7e8bad005308b9ef8e8d83a6d880da_9",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01682.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01682.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 89,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "81c903c113a092243d2b43da5886b7cb_0",
      "old_fingerprint": "4a99d6f841a8aa58ea427c18f1b50bcf_31",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01683.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01683.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 89,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "b4acf2d56ca8a73b1011124273f7fef8_0",
      "old_fingerprint": "0fde08a874c1b9406d4fb75101498985_30",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01789.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01789.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 66,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "4d19ae8bd4af00e95e7ab6c4688bbfde_0",
      "old_fingerprint": "2dcf641abf263265079b802a890f3210_8",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01861.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01861.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 84,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "6374e1bd6ad554a28e39c548cc25c302_0",
      "old_fingerprint": "42d29cb54bcd727f31c83a5b7ae287af_27",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 80,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "589a96f2f7bffca7757ecc1c74637a33_0",
      "old_fingerprint": "70fe6ead7d068703035be0a7eaf2cefd_23",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02142.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02142.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 65,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "eaf6257c62e9345ad11f54de98a7008a_0",
      "old_fingerprint": "bbbe6488a9d9375019d045e63f1c6515_5",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02339.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02339.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 79,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "9843c6c7b964ba66260d3016e09aaef9_0",
      "old_fingerprint": "ecff4804cecadf4c86215c672a93453c_19",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02427.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02427.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 67,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "47e8635c32e81135ab43c2e8e28684d7_0",
      "old_fingerprint": "dd9b482f11205ead1f37c74099d86ba2_10",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02507.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02507.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 67,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "e9fed18fcc8147df4bd3bd8be4f25a52_0",
      "old_fingerprint": "1de64dbb160ae310d4076ed523443ca8_11",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02709.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02709.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 66,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "68ad3576629e85c6fd55627c82e5aafc_0",
      "old_fingerprint": "5dd6949f667c43d47221cbd1d8a54c12_7",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["614"],
      "id": "java_lang_insecure_cookie",
      "title": "Missing secure options for cookie detected.",
      "description": "## Description\n\nTo make sure cookies don't open your application up to exploits or unauthorized access, make sure to set security options appropriately.\n\n## Remediations\n\n✅ Set `Secure` to `true` to force cookies to only be sent over HTTPS\n✅ Set `HttpOnly` to `true` to protect the cookie value from being accessed by client side JavaScript\n\n```java\ncookie.setSecure(true);\ncookie.setHttpOnly(true);\n```\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insecure_cookie",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02710.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02710.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 32
        },
        "content": "cookie.setSecure(false)"
      },
      "parent_line_number": 66,
      "snippet": "cookie.setSecure(false)",
      "fingerprint": "8dbbdbe2733ec79875c83f8e33b906a2_0",
      "old_fingerprint": "a150a9b9e3d0c4ebfe86f8d4791baf07_6",
      "code_extract": "        cookie.setSecure(false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 47,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00023.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 47,
        "end": 47,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 47,
        "end": 47,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 47,
      "snippet": "new java.util.Random()",
      "fingerprint": "555f832cb60136541deb077fb3972b5b_0",
      "old_fingerprint": "6a9c8066b8d6818c86128b9bcdbc7568_1",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00066.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 72,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "d0e384ed9817dac67067379b987a7dcd_0",
      "old_fingerprint": "6df75aa861eb886b8d9c24e6773ed1f8_198",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00067.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 88,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "0358a0d0c9c9d89503642a605eea27e7_0",
      "old_fingerprint": "737fdc52175faf9b0f5982257d4199fc_216",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00068.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 72,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "6908aad5b11cf64713f013d82304ca0e_0",
      "old_fingerprint": "f7783609840371747fa8c416e2fefa9c_193",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00078.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 74,
      "snippet": "new java.util.Random()",
      "fingerprint": "e063d1f4ae64746bc48c879dea23647c_0",
      "old_fingerprint": "905b011c3f42698c59c2f619c95636ba_210",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00079.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "29eb81a482583994de50f2610be1270c_0",
      "old_fingerprint": "22bcc6102bed1bc98fb2590ab5351cc1_200",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00080.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "f3c57116a04946af037f74cf1cb28a18_0",
      "old_fingerprint": "c93f22b9d1bde4ba574e972f5a8c4901_158",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00081.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "9b72456dd241b4e637c22192818c2680_0",
      "old_fingerprint": "12b406926f5da806b0e54b0beb6bb51f_159",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00082.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "4792e0b21bca5e9407edaaff587915f3_0",
      "old_fingerprint": "7f8675ad36616df2db756442ed7f99eb_181",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00083.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "1261b63527e6bd4cc7adbe3e5c3d8acd_0",
      "old_fingerprint": "c870248e92e3be9504049a44044f53f8_203",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00084.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 69,
      "snippet": "new java.util.Random()",
      "fingerprint": "b7abf529ae8967a356c2bd4f1cafcc1c_0",
      "old_fingerprint": "d7e6d4aa8b747ac3f783c90414c61aa0_186",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00085.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "c3b82af692048db3c474b3cfd5584b56_0",
      "old_fingerprint": "d75aa2ca9340c3d38e99efea33d5b645_202",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00086.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "bd24e9250d7b640da926308aa955c91e_0",
      "old_fingerprint": "06600c8646539c9393c2047545c5b6aa_201",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00140.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 63,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "7917d558ed6be0688d5908933af936cd_0",
      "old_fingerprint": "7c4ecf35aba6055d8490917668c8bf1b_139",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00160.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 61,
      "snippet": "new java.util.Random()",
      "fingerprint": "2343f1b5dd9e2f95dbdc7c251a916004_0",
      "old_fingerprint": "bb34d8fd85c694ecab0f5f82d203e697_125",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00161.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 59,
      "snippet": "new java.util.Random()",
      "fingerprint": "e9123f2b6eba22460a6dc27dd3c5ad52_0",
      "old_fingerprint": "7f599d02d64bde1d1fbc9ef025d2a509_118",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00162.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "922806f5bfbfe46ea7fa8f5c4b3cc691_0",
      "old_fingerprint": "bc26a353a7395d908aefcc50a899501c_87",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00163.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 54,
      "snippet": "new java.util.Random()",
      "fingerprint": "a0b23512366c2e96811b1afe1dd0985a_0",
      "old_fingerprint": "7e37e8af110cfc5293db8253291825fd_92",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00164.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 58,
      "snippet": "new java.util.Random()",
      "fingerprint": "b1477d0ba96d0a19cb0f47c3fa6245a4_0",
      "old_fingerprint": "10e96bae688c76acdfde2e103eaaa57b_115",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00165.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 56,
      "snippet": "new java.util.Random()",
      "fingerprint": "ba1a1bdc44bf723f7196cd8b17197f7b_0",
      "old_fingerprint": "995a50ced594822be863b25f1acdbef1_108",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00166.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "265415054760c579b9f3efe9c54c37ac_0",
      "old_fingerprint": "88e874c45125653e0849e4554b55df6b_89",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00167.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "f8fff61280cdc1a20727da7a32b242ee_0",
      "old_fingerprint": "5931204323a288f3a5949c8cf4b6e727_123",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00168.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 58,
      "snippet": "new java.util.Random()",
      "fingerprint": "c5c3ff4a474737325e50dfb21f3b9bfe_0",
      "old_fingerprint": "148082e79913e5897892dc424d4fff50_117",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00230.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "69dcc5c275a73bcd895679991160d7f2_0",
      "old_fingerprint": "e51c7e4eac378e2803f7fcbe9d7b732b_160",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00231.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "5bb4fec247ea02788dfcef3f76ff81ca_0",
      "old_fingerprint": "89c8d304ad6da5f9e4cb1e834c76ccc7_182",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00232.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 69,
      "snippet": "new java.util.Random()",
      "fingerprint": "f34121c1782e4563ae563175b66f9488_0",
      "old_fingerprint": "176f92016b85577b3c4cca9e8805cc07_188",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00233.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 65,
      "snippet": "new java.util.Random()",
      "fingerprint": "84cd76601bd887870dc8ceccdf444dc5_0",
      "old_fingerprint": "b1cecd252cd4570ea4d5f0333a913af0_153",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00234.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 69,
      "snippet": "new java.util.Random()",
      "fingerprint": "fc790474417885e5a683f23d20a855e6_0",
      "old_fingerprint": "8d69a44726fba645a084ccda098e70f5_185",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00235.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 65,
      "snippet": "new java.util.Random()",
      "fingerprint": "3349afde015801124f436f6df94aad73_0",
      "old_fingerprint": "a3f8e86a6d15fe899fe54e887be9f82a_154",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00236.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "c5c6f1fa12683efff03938846972fdf0_0",
      "old_fingerprint": "7c4a9454d3ff3e08450c27604aaf9654_183",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00237.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 82,
      "snippet": "new java.util.Random()",
      "fingerprint": "a0eeb1573d189564300fbe52dbc9341c_0",
      "old_fingerprint": "8a50110ae98af3c64e5073a7709cf1f6_214",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00238.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 70,
      "snippet": "new java.util.Random()",
      "fingerprint": "5d3fb4210525370bf2c69ddb37e6d276_0",
      "old_fingerprint": "dbfa39f50f8bb26dc35f63f1b55895e2_189",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00239.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 83,
      "snippet": "new java.util.Random()",
      "fingerprint": "6823ff17754350a4a028a19d518f9f23_0",
      "old_fingerprint": "0aab311ae64d1898919c4391198ef433_215",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00240.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 65,
      "snippet": "new java.util.Random()",
      "fingerprint": "a570264046480922e7a34522d8e98949_0",
      "old_fingerprint": "988db06e3950b0eb97e2d58519325571_155",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00296.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "946a75021ba19a7bdb69b15134f7835a_0",
      "old_fingerprint": "92ca77863cc4be24106d7849c05a4ac8_121",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00297.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 57,
      "snippet": "new java.util.Random()",
      "fingerprint": "44edb60655146df308dbcbc32b6db6a3_0",
      "old_fingerprint": "d22e3ccf0fcca88f60711fc21f9b69f3_110",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00298.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "9ae11a58da7ed09bdffcd56884c87abf_0",
      "old_fingerprint": "f8d91094c5606f9dc0d59b4ae2557a79_120",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00299.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "eb0d9b9b7e315b4c2b6c6bfd62082f79_0",
      "old_fingerprint": "25f65afe366ce609c1d146b1adc2c0f8_122",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 47,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00347.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 47,
        "end": 47,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 47,
        "end": 47,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 47,
      "snippet": "new java.util.Random()",
      "fingerprint": "f457756684755286328bccbbf1bde4dc_0",
      "old_fingerprint": "1f59f61acdc504027f7dc7ba9f6e6728_0",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00368.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 48,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "907b7d1734bee983a802243871a48b5d_0",
      "old_fingerprint": "428de613554b2ffb448186b0314b44b1_15",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00369.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 51,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "6dd50c126d7f28c98c91a50b5dde3888_0",
      "old_fingerprint": "f890aad21b9d6d30db03f09fca693ef2_64",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00397.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "c1e1ac65498236994242f89af0273f34_0",
      "old_fingerprint": "b8e5e6fc3586ef6a67928a378a2b2c18_41",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00398.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 54,
      "snippet": "new java.util.Random()",
      "fingerprint": "8ffa88c3f4fe3fa3344bd1a062990842_0",
      "old_fingerprint": "14b3f040ce4a15deea7868b801708b30_91",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00399.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 69,
      "snippet": "new java.util.Random()",
      "fingerprint": "e6b49d3527a87af37ada728bb54f84fb_0",
      "old_fingerprint": "ce4bd502ef1861883aa94ac68a52d4b5_184",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00400.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "08b3b464d3125bc7a5672e976d5b7d1c_0",
      "old_fingerprint": "05a4c243030663b99a42314a3ae537d5_176",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00401.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "154b8849deee6c3d5cadcce01897c5ee_0",
      "old_fingerprint": "26a3b0c13677cf3a9d6c579c6e35aa21_104",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00402.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "a69a98df504756fc5edeb3a1715a8a6a_0",
      "old_fingerprint": "e7838fe4595473ed3608422b3268addd_67",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00461.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 52,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "4590f7d938e7cef193db1b2fa9dec75e_0",
      "old_fingerprint": "1b5ce6f7e70deb4780c98e1f7e579256_73",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00482.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "bcb4d27d75f5df456f1716dd4d36e3fb_0",
      "old_fingerprint": "ed0a30d1f015ca479739ec143502b038_84",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00483.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 58,
      "snippet": "new java.util.Random()",
      "fingerprint": "6b2070bdd8abc307e2eec663d0ba7b9a_0",
      "old_fingerprint": "c021b34e22554d374c284650d8e6ab61_116",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00484.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 57,
      "snippet": "new java.util.Random()",
      "fingerprint": "3a3fca579e082a89814f5444d0dd3daa_0",
      "old_fingerprint": "4955776167bdb250d53974dc042c75cf_114",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00485.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 54,
      "snippet": "new java.util.Random()",
      "fingerprint": "05fb39eb1cd5a4ae52b6dd02e5f99b80_0",
      "old_fingerprint": "0c92f53e320f7e76c9f759fd208235c7_90",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00486.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "1ac258f02d66f0afe012572f29f2734f_0",
      "old_fingerprint": "867b2199cc1761d88cba4f81efbc58fc_72",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00487.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 57,
      "snippet": "new java.util.Random()",
      "fingerprint": "67fe41bf57bac2dccb6636f0767f6266_0",
      "old_fingerprint": "3f9dfc3d6b27dd1a725bb97bb0a0d3eb_113",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00488.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "dacdbd958327e2af6e84dc17f33d4500_0",
      "old_fingerprint": "27c11be3c08aa025767c62072a8fb0cd_131",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00489.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 57,
      "snippet": "new java.util.Random()",
      "fingerprint": "d124fc728909c819df6ef25dbb0765bc_0",
      "old_fingerprint": "945a8adc5ef310467ec7c468446d3419_109",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00490.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "8ab6c4f5ead148475f402e4177cabf0f_0",
      "old_fingerprint": "0cd2081bd858ac0c9df264f39e8a41ac_126",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00560.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "fdef1b379243906f530d91a81f2319e0_0",
      "old_fingerprint": "a3f155e2d25122a824ac73ee5abf8e86_170",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00561.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "f8c68f1931be9dec210b3afa53ac538e_0",
      "old_fingerprint": "6cabf26b9edb95576ff2722105c00c48_197",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00562.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 81,
      "snippet": "new java.util.Random()",
      "fingerprint": "3beee668bb38e52275c4d5d33fc4529d_0",
      "old_fingerprint": "59139ea598983abb3041310e6bb967c2_213",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00563.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "71ebf53711d7a8baf03f586cbff9c302_0",
      "old_fingerprint": "6115865003f92c248e1e75e81b76218b_130",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00564.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "9df481130a286e37a2dc5435f4d6f83d_0",
      "old_fingerprint": "a5209ae66b6172f395f91b900b4083ba_137",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00652.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "6a492d1b167ef80735e8f6efd51be80d_0",
      "old_fingerprint": "4919979053bd25cb1046c075de39d63a_85",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00653.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "0e8b012a8c53703b16105695b2fdf99b_0",
      "old_fingerprint": "fe762f057bc3231fbef2cdeeba66e915_105",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00654.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "0fd01844d9439066c804267b89382f78_0",
      "old_fingerprint": "899f8a9ede6c05a98afb6b5f1887725d_119",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00702.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 57,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "fca1a31b6e757957e7cfe0c90dc0586d_0",
      "old_fingerprint": "91e0bfba1cb5d6f355dfe5c0a0ef7ff3_112",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00733.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 51,
      "snippet": "new java.util.Random()",
      "fingerprint": "c70461ffe1d8e696aa6c287c571907bb_0",
      "old_fingerprint": "4630232e13e6ff092e5d01538d413208_66",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00734.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 69,
      "snippet": "new java.util.Random()",
      "fingerprint": "0c5cb2dad31c9ba72f9961d3d64aa701_0",
      "old_fingerprint": "940601f03c2f5bc27b0768879bbc7480_187",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00735.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 60,
      "snippet": "new java.util.Random()",
      "fingerprint": "77740c0833e2ae238011105a74dcee63_0",
      "old_fingerprint": "faa435a46a5139e756c1827f72786683_124",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00817.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 92,
      "snippet": "new java.util.Random()",
      "fingerprint": "36269d4af2856b9a6e69479013307e5f_0",
      "old_fingerprint": "eee54f0e0243aa626d5e51e658c9059e_217",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00818.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 75,
      "snippet": "new java.util.Random()",
      "fingerprint": "2108c024edfc4e2010088991c4cb4f7f_0",
      "old_fingerprint": "d97e5d73348b600595a0119de433fce1_211",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00819.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 77,
      "snippet": "new java.util.Random()",
      "fingerprint": "45abf1c217b4395e2d1baf69b90539fc_0",
      "old_fingerprint": "d1f3fa07070987ea77e4716d4e2d18be_212",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00898.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 57,
      "snippet": "new java.util.Random()",
      "fingerprint": "ca369f0dc98c6d9a99ff480354ff0f4e_0",
      "old_fingerprint": "69bc6cb546465ed63abf3d553d8f1db7_111",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00899.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "4c7d7d303156b92a7f66cf6d4811623d_0",
      "old_fingerprint": "bd7c48a66fa079a306e5b6d652f704d7_179",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00900.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "08a5bc462631f28a0da729b9b403a890_0",
      "old_fingerprint": "5b6025134bb6e27ab8f63a3c01505e20_178",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00901.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "dfdba620e22e8483daad5c3a17a6cdd5_0",
      "old_fingerprint": "5b5695ec7d3a1ba23b2d31611dc37d1f_177",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00902.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 54,
      "snippet": "new java.util.Random()",
      "fingerprint": "4a2437695ad2135e759abaceed53481d_0",
      "old_fingerprint": "4f7e3ffa380c515d5b64afc34d9fb6f4_93",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00960.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 67,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "2ef9da0fa6d3c08c2ec0d4f91aa26bf0_0",
      "old_fingerprint": "2f4f74579a2918c531b928471ea93d79_156",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00971.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "eb673685a5c90e61c7c67d98a85440a0_0",
      "old_fingerprint": "acfcc156541d661c9bfcc5c34b74d92d_175",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00972.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "3f48006d3bd37dabbf4db74333038795_0",
      "old_fingerprint": "f93a0bf9b59c381e4c30d5a392dc024d_174",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00973.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "fca2a94615d6aa4205d9c9a99a917b2d_0",
      "old_fingerprint": "39fa02a8e9e5a6b9d7ab892b435cb9b9_173",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00974.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "58712bf1a7cece300ab46ac62cbe405c_0",
      "old_fingerprint": "8da0204f37d5dbeeeac7d523680e0c35_171",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00975.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "9964ae0a939abf29b446d408fa766d57_0",
      "old_fingerprint": "da50b4418a55f7de7b88fbd00fe05e4b_168",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00976.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "bdcef814111758746f15f11f491e31c3_0",
      "old_fingerprint": "b96880c675dfd02c9aa6a116e1bc1d43_169",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01058.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 54,
      "snippet": "new java.util.Random()",
      "fingerprint": "08b60b9f2a63a61a2c770b0dc5fdf43b_0",
      "old_fingerprint": "4cb203d11477e0f00cdb5976a56551c8_94",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01059.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "b62f5772c5ead494d8198659d2a6bfeb_0",
      "old_fingerprint": "9ac3854536782e62d941e6524136db24_78",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "9629ea2f50f62ff437f107de29b0246d_0",
      "old_fingerprint": "8b818d6bd7910b078b2d0973184ed717_86",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01119.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 63,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "8320119dfd7a77bfc6745aff42c9fed5_0",
      "old_fingerprint": "ca603268296729e23bd5960aae02f254_147",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01127.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "67c785e15d7263e7e2a2827675cff189_0",
      "old_fingerprint": "abe9c7951b6d97021dfe05aa105bc3b2_141",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01128.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "beac85cb384fad126442aab9422f28e3_0",
      "old_fingerprint": "4eb8fef2fda93c6446c47b24a9fcf6a9_140",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01129.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "6a5ae3ceaf464ce3fafee139df0917ac_0",
      "old_fingerprint": "148a906ef674c731eb008d7d44718a4e_136",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01130.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "6c8ce5a1e4014f7589787a0490b51c60_0",
      "old_fingerprint": "50271df8e6bf136795894693ee456c54_138",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01131.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "75ed1f028c6110371aa601e3b380e7f7_0",
      "old_fingerprint": "016b587c154f06ebc77053781a0121be_146",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01132.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "b3e276e68418e9d563528c0621abc7d5_0",
      "old_fingerprint": "b166dd65ceed12c195188e165d3bf4ef_142",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01133.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "01b75baade9a3b2a21db0bc59e9290bc_0",
      "old_fingerprint": "5371375baf78f368c8bdfcda173b430e_145",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01162.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 55,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "ad79644fec81c289d092719f77cf3e94_0",
      "old_fingerprint": "d38b07e3f56934f5dee4e71f59ec5ed8_102",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01163.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 55,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "e9b7ade1da8e7d1e2d9d78a082962de2_0",
      "old_fingerprint": "952a67f054926cf5d386a8d0023b5dd2_96",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01183.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "543833997be639466348b94b131afb2c_0",
      "old_fingerprint": "d4f7b9f90c85a3cf5068773b2fa5ef47_97",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01184.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "67766f53ab6fec86c479a827fa7a7888_0",
      "old_fingerprint": "47b39349dc8315afeb4ba5808b507d1d_98",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01271.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "24dd16b14a0f633802d5ab9ba40ac964_0",
      "old_fingerprint": "dcbc794dfb493371895276e2d0ad1871_3",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01272.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "23dce293ec3f66c5e0ab06b34b2fea21_0",
      "old_fingerprint": "bbc0296177ede644bbd2cf3b0f7482f0_2",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01273.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "d4e03f90482d077f383ba1d1d129533a_0",
      "old_fingerprint": "58b0e8be055b6d4be85c0c18d4a161bf_7",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01274.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "af73a2585200ede3b1f6f69bf9f5a2bb_0",
      "old_fingerprint": "730b4d73729ab762a1726ddcb9dfc5ac_6",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01275.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "95c3f608dff7d26d55bcc10c1baa6483_0",
      "old_fingerprint": "97fef5b92988a812e3c5f7304065860f_5",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01276.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "939e2abf11131527da01cd521ab2f937_0",
      "old_fingerprint": "7700ce239b97b8032e64a0bfb90e6cbd_4",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01277.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "3937c60163e7f28e204e8c3a6531f94c_0",
      "old_fingerprint": "d6b0d246d5a25337a54a4666d450a2a0_9",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01278.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "209d69e8df98d7e205433ac0dfb2dcf3_0",
      "old_fingerprint": "1add970770f900def950844076896d7a_8",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01279.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "a0dfefbc33d860134328775a787bf4bf_0",
      "old_fingerprint": "3bb73d7c8ad345841c2d3dc1a725aca8_11",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01354.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "a9d2e6288e737dbc5e2b7b4f62f0c2c9_0",
      "old_fingerprint": "3ae417dfabdbebd2c0750737b92e45b7_77",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01355.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "f140ffc9df6c59257567e3cbf1fd91e3_0",
      "old_fingerprint": "3f75ff3962a2a063671f3df6ca67cbc9_71",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01356.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "34d799e0857d87cb7a61cb675772c81a_0",
      "old_fingerprint": "642c165a3f75a0f57a93c97a72800f98_70",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01357.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "51feaa1c4bab7d3cb5cc1dba0a229086_0",
      "old_fingerprint": "c0aa9d80dbaebd5665a0bad5bb0132cb_69",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01358.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "fb4080a278d4854329e33c11d9f50546_0",
      "old_fingerprint": "58dfa04bb3bf2475726b58e5b540975d_68",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01431.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "a53601c3f74cee12f3c38f4124378067_0",
      "old_fingerprint": "a768a16217335677370e55d3264a01cd_128",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01432.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "07c4e29e200d4c82f61bdbb84b41e5a4_0",
      "old_fingerprint": "195d6e97226f2b216113e60e9a7df64d_129",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01433.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "5fb3d1811eb7f8b09eb68d90aec0f6d4_0",
      "old_fingerprint": "8445f71eb6648a41d9f3300e1dc1da38_132",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01434.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "1ffc6dba1e0238dc9cca09c693fd6f7f_0",
      "old_fingerprint": "54176f7516ae01439d038822e6b391df_133",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01435.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "4548ab44425e62e3cd40c2083f880668_0",
      "old_fingerprint": "5667e6e0060109918124d89eb71100dc_134",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01502.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 50,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "13198884c9e779f5fbab5de07617112e_0",
      "old_fingerprint": "b2ea11fd5ee5e80ee6c45cc3c9eb6a28_63",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01518.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "90bf314bd4633d81a2585d9c10902597_0",
      "old_fingerprint": "2052e5dad3f1d619d0dd2747105cbf5b_40",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01519.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "ebbd1822a7019c3f319ca6a6818b6dc2_0",
      "old_fingerprint": "036fafb91ed71fd089514796799b078c_36",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01520.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "450578230bdb3445ebdee0f83ed0f808_0",
      "old_fingerprint": "b6fd6f71f6895056f8f4958de20c0414_43",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01575.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 50,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "b3a6eb1202d7fff9b023fbeb532f2070_0",
      "old_fingerprint": "a8d1e3b306edcdf867ef283a5c871336_62",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01602.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "9243131cb7f5450f6913124b23ec566a_0",
      "old_fingerprint": "ca282624c9973e51248976cc527b352d_61",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01603.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "50b3cda2c7d865a9bd4b015ed5a69e18_0",
      "old_fingerprint": "e1d50608bf34b81f7e8181cb115d085b_60",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01648.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 72,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "cfc6e7cab9c6dd78585c6c72db4aea2a_0",
      "old_fingerprint": "1e067951eee21c680a87ac5aae5564ef_190",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01675.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 73,
      "snippet": "new java.util.Random()",
      "fingerprint": "1d365a17bfca3e09127907e32b178be7_0",
      "old_fingerprint": "ec8a33cbf9b89664c6e451643930076b_209",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01676.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "bba55c70fcb69cd77f04fc1d15342f32_0",
      "old_fingerprint": "a3e6e3cb970fa68c307458307dd157d5_196",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01677.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "b99e8e4acebec71ad51d165f40d34d95_0",
      "old_fingerprint": "07a294fdaa3ae93b21c7c9573807921b_195",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01678.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "b985223d8614dfd06d06ab7e54e93425_0",
      "old_fingerprint": "9076874e22c2c59191ffa5e0d180d10c_199",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01679.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "05c9f1944a400ed551c2f7f0a011a9b5_0",
      "old_fingerprint": "c0fc9787422f9552764d66a77df30062_204",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01680.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "b5f875eae747613a8fdb0719b40f8a48_0",
      "old_fingerprint": "f1a3987d014c26f8769b87b478203e60_191",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01681.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "6143cc1e59f9c6f365df6383633c80e8_0",
      "old_fingerprint": "d5f879ec5c8c4515abddfb57e07ae2fc_194",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01781.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "903de8b4880da06f7363db8de83cec9a_0",
      "old_fingerprint": "b530519ea8e6892f6e5c64ef16588250_16",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01782.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "1b87a02c9eeaef748ce109201ea937bd_0",
      "old_fingerprint": "94b863e13511726e898da6a8a4d0a1fc_22",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01783.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "1be26ed6991cc848e6ace1d23359f7d5_0",
      "old_fingerprint": "38f2da3006c7f3efe0ba9c36ccf858b0_17",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01784.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "af4b251b30c067ba26ca9baa7a9db09e_0",
      "old_fingerprint": "f271edd0b72d5c1ed63ae48c5a6396f4_26",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01785.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "7b8516db94437f3bbb875c489533dfda_0",
      "old_fingerprint": "7226d7fa2f9cca7c2bcad82fd4a35766_19",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01786.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "e0626dc00b3a5b40c40d59551e96e71d_0",
      "old_fingerprint": "4ed5aeedc765366ed53635b48d7851be_29",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01787.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "6d72d63c550ba2c7c77083fdae6bfa37_0",
      "old_fingerprint": "f87d6d0c79d3e95d08f0100f6ee20dc1_28",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01788.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "6d2fdb13089be9fb1a520bab3c3dd7e6_0",
      "old_fingerprint": "b866d0b2188d628b348f5649876147f0_25",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01842.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 67,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "94f433f41a85d8be5724d490b5d82de5_0",
      "old_fingerprint": "bf3350382c3be9ab7e45768c86cfc8d8_157",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01843.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 67,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "792885732476cb25d2bec12ecc3ced14_0",
      "old_fingerprint": "31c9d53b44944c6223034d91c50ec6d1_172",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01853.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 68,
      "snippet": "new java.util.Random()",
      "fingerprint": "d2f92185b19881117ad9c84f58f9beec_0",
      "old_fingerprint": "87ef887f8d8dd007500db6f78d27acd0_180",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01854.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "896984a3c256d86e2ac5411a90f01261_0",
      "old_fingerprint": "71c952a3cb90f0ff497596a9ba6a4c63_167",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01855.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "dcbb2a2f2de4cd3c87c2413e6e48f710_0",
      "old_fingerprint": "cbefd5f6e86503ae88b334e6b278da3a_166",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01856.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "a5da5440957adf9c702ac68790f6b59f_0",
      "old_fingerprint": "cb4dab6c5cf3c38df3dff2c1a2d54eda_165",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01857.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "996a93aaa2b27a89adba3ec67a4ae305_0",
      "old_fingerprint": "a130d614ed4c615a3f331ee4f41a4c82_164",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01858.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "10c17c9cd5071120826f63a95054c368_0",
      "old_fingerprint": "a33331682d87264998d3a292d4811ef0_163",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01859.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "5fd3327d9b89605b55a58dc37106f506_0",
      "old_fingerprint": "83580257869933e82bef6362afe7c701_162",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01860.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 67,
      "snippet": "new java.util.Random()",
      "fingerprint": "8d7f78164e362bfb5bdf1b77de646088_0",
      "old_fingerprint": "bb49525ae62c78a5a6470b6211c03df6_161",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01910.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 53,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "20728cef63841a6161a39d663e8e6323_0",
      "old_fingerprint": "4aefdb3666c1d7e24fc0d010fa72d4a9_80",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01930.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "39369dde20a5a458d5f3c1e98e54e765_0",
      "old_fingerprint": "aca123a92736333f9723edd4cf90c9df_81",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01931.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "f976bcc5560711cc8218e50516c1e163_0",
      "old_fingerprint": "ed52fb226a0afc0c7d8d44556c5a6979_82",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01932.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "9928ff5eeda8a8de453f090076ff0d10_0",
      "old_fingerprint": "c4b61f389da99b977a025160d079b84b_83",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01933.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "cc296c0d26aa6f47cdf5f416c2057f0c_0",
      "old_fingerprint": "d6612f6581b4782ab4f1b153f5d69803_79",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01934.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 53,
      "snippet": "new java.util.Random()",
      "fingerprint": "6241eb090935e4e03e3623302b720d01_0",
      "old_fingerprint": "e6947f338fdf576859fa416c5cdfeaac_88",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01992.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 63,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "657a293e1844fde65ee1d8f7c726fdbf_0",
      "old_fingerprint": "35205ce9e95ed2cec5c5bef2ae4ef41f_143",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01999.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 64,
      "snippet": "new java.util.Random()",
      "fingerprint": "140421964accf5ef09c21e233d044526_0",
      "old_fingerprint": "5dcfded2aee9f22d1f0229d12864036c_152",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02000.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 64,
      "snippet": "new java.util.Random()",
      "fingerprint": "c7e5541c70a416252549283e7c0a9fde_0",
      "old_fingerprint": "c14fd13895eb688394dc3d22eeaea3fe_151",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "347d4203fa5a0272cb76a261d54276f2_0",
      "old_fingerprint": "f233102feaab0d2bb9e13a0e1e675913_144",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "d1b54ad817d32280e8099fd5cb8d2fce_0",
      "old_fingerprint": "0a41cb3b762dd1ab69ce21a8aca3c72b_150",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02003.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "4a4f3db8af3c8a7d8158866db471137d_0",
      "old_fingerprint": "4370a6be3e0f6df8a137c9efa482dda6_149",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 63,
      "snippet": "new java.util.Random()",
      "fingerprint": "0ac1cb2b44a875b2f50663664c9b040d_0",
      "old_fingerprint": "dd518bfe237544bd20135dfd35896ab6_148",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02038.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 55,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "bb6643f70d6b168556be7cba4e4d3f97_0",
      "old_fingerprint": "e5b4ce424dc0044cdf8fb6cab55fc164_107",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02039.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 55,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "eccac3b7b92ad552053e71c0b6e98fd8_0",
      "old_fingerprint": "93bfcf595668c5dc470b3e8e53164c3e_106",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02040.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 55,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "cdfa1a25f2e9fc2a997fba9110116847_0",
      "old_fingerprint": "1be0a6e44a3dda4bfdfbf3ed935cfbb8_95",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "fa9c223b3e7149676094213cb9f85657_0",
      "old_fingerprint": "a6c0cf1c44d41e7c7cac1a8caeba0562_103",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "64c0e13ed6657003f2485abbe062f8af_0",
      "old_fingerprint": "7ef5d6d2b8a9eeb35405bae85f993435_99",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02062.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "fe0e0be2d2713e9d00b6bba93c548639_0",
      "old_fingerprint": "ddfbde3c61fd542aff3fc1dc0728beb1_100",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02063.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 55,
      "snippet": "new java.util.Random()",
      "fingerprint": "7aefcfc457ee56532af5459930ad58a5_0",
      "old_fingerprint": "f08f4e902c7fd785e5e3c21780109709_101",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02117.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 48,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "5a5f69ee99efc6ffaed66c37678e63e7_0",
      "old_fingerprint": "82a6d1dd4aea30672681317b97e23e70_10",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02138.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "51fcca29ad6b33f1eeee83a0a55a5149_0",
      "old_fingerprint": "32c4bccf7ac0cfe74381d186e3d82909_21",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02139.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "63b69d9a6ad91c9cc517856fb63152fb_0",
      "old_fingerprint": "5fb8af05d6314227c5c64d02fd2f89f0_12",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02140.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "011a69053f8249539868e57d8a54720d_0",
      "old_fingerprint": "24486322e07f389c9c91cbbbb52641d6_13",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02141.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 48,
      "snippet": "new java.util.Random()",
      "fingerprint": "d33802381726ab50390f0bdca40782e8_0",
      "old_fingerprint": "65505e72afb184e675b35f514a342360_14",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02209.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 52,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "2a119ad019a35a7d15772bc8198b70e3_0",
      "old_fingerprint": "d520943027cc2fc7a51432b6fbda4005_74",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02245.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "920bd1ff17f8a3d7620f6fb24ac73867_0",
      "old_fingerprint": "f1fdb9f9e3503b2fb22953a84771cc50_75",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02246.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 52,
      "snippet": "new java.util.Random()",
      "fingerprint": "626a3693174d19fd8e1fb19113d7f8ba_0",
      "old_fingerprint": "0b5b817b1af12ee2f9f85253a848e1d6_76",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02337.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "9ed7a4940d500a4423e95ae7f434f14b_0",
      "old_fingerprint": "5601d5d7b776bbce449e9f84d073a9a9_127",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02338.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 62,
      "snippet": "new java.util.Random()",
      "fingerprint": "22a364738e040f8aa59147aface97f32_0",
      "old_fingerprint": "4fab934d917277265c3c03f553b814bb_135",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02415.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 51,
      "snippet": "new java.util.Random()",
      "fingerprint": "bc625eb9b5cf93654efb464ef4c17b31_0",
      "old_fingerprint": "87e514b12f154e5af480e6088513d712_65",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02416.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "99201c60ba48300b86326617786296c0_0",
      "old_fingerprint": "bbe56dc5e8d9ab3a7dd40dd5b6d0b19c_35",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02417.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "fec30a9421f9e4d2df4202614ba22e9a_0",
      "old_fingerprint": "074b23b1d06c9ca4a04a9e20ea567701_34",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02418.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "ee0c38e569d03ba6e699b9fdffd5549d_0",
      "old_fingerprint": "ad2978aa0666b10ee787f4c02ae2f2f5_49",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02419.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "b327c27ecc297e4833aa1eccd8488c90_0",
      "old_fingerprint": "65831b9a0be60759aaa1dea19a5a879b_37",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02420.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "c4167f659771ec6abfd14bff2c4e6df8_0",
      "old_fingerprint": "d393d946bc0b0ce4b41e2f63041f450f_38",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02421.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "fc013e2fa9873206c6d4494e0d289efd_0",
      "old_fingerprint": "6b59ebd74c73632023d560d0ae285ecb_42",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02422.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "a001c099f8c4bdaf1293699da7296745_0",
      "old_fingerprint": "19133f77efe120791f588a4e7c0551ce_32",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02423.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 26,
          "end": 48
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 26,
          "end": 48
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "42eabd015998030dbbc27cc8e76fbda1_0",
      "old_fingerprint": "045e2b6993e1db32b47c0a19f067bb70_44",
      "code_extract": "        int randNumber = new java.util.Random().nextInt(99);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02424.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "8d8219a0196b28bc85c84fc3ac998f76_0",
      "old_fingerprint": "7e04d68f10ab011df30a0d23cdb199f1_45",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02425.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "ac40a5851db1ee0a7cbb91c53af26c4d_0",
      "old_fingerprint": "25c34fe3ef71a67dc204fe9866e14469_46",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02426.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "4e0d2659b23c00924a250fcf122a4013_0",
      "old_fingerprint": "f113b87c4169870c18d539218d28dbaa_47",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02473.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 47
        },
        "content": "java.lang.Math.random()"
      },
      "parent_line_number": 50,
      "snippet": "java.lang.Math.random()",
      "fingerprint": "9a1ce6c072554a8bef75fcb15384b5d3_0",
      "old_fingerprint": "93f0577c5c11089a0ee430fb680803f8_48",
      "code_extract": "        double value = java.lang.Math.random();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02497.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "b4e8a030f70ebef95bcdb4bdf5c51cd1_0",
      "old_fingerprint": "424df99a53828fe010a35f8752a2000c_51",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02498.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "75026fa535fca8edafe4f6d2fbecde6b_0",
      "old_fingerprint": "ace897b73d969bbbc6478244be9fef59_52",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02499.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "305d395ff95e55c27dfc84a565f15dd7_0",
      "old_fingerprint": "c4a398fb2390a327abd027f70529c646_54",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02500.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "1241b850978b0446652c74c1c4c6804d_0",
      "old_fingerprint": "381cbfb892de8a7f25de3189968b95d0_57",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02501.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "bdefddab5e77ac1cf8c7c4af78d169bd_0",
      "old_fingerprint": "a3e53cc90e87d6ddad0ab33970b3ae8a_39",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02502.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "d02af0cc855ed72a9079ef8da1f115b2_0",
      "old_fingerprint": "321e948139550551163af54c6dea6ffc_33",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02503.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "d8b8126e6237f90a53228dd5bef77ab3_0",
      "old_fingerprint": "c67aa28dd4a885a322d1600f6f056359_50",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02504.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "9e18518ee355289bdffbf37738261f5f_0",
      "old_fingerprint": "a7a616b09e77032736db44e7cdffc8e9_53",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02505.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "cc36a21cd13e3e02723f31a95f69ea48_0",
      "old_fingerprint": "c923c9e198d2b814c721c38c66be8caa_55",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02506.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "64d0094a03c714b582f6fd36c2488ced_0",
      "old_fingerprint": "a8ae9108ea0678a4b1034d9c144f6b00_56",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02602.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 73,
      "snippet": "new java.util.Random()",
      "fingerprint": "ce06d5ce220f9db200d4533a51e7408f_0",
      "old_fingerprint": "4ebe6ee0288171d623f7746811615f27_207",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02603.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 73,
      "snippet": "new java.util.Random()",
      "fingerprint": "db984d877742dd8f9458c4ac66457aa3_0",
      "old_fingerprint": "0d06db6c9d482af431b40933a8af15c7_208",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02604.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "00cf729be39336f6a2b783e71602b577_0",
      "old_fingerprint": "872796365eff13140487ae087f7fa257_206",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02605.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "821d3c4258e00130d733b52643c34172_0",
      "old_fingerprint": "1028e2b349de2299385bb225986c3481_192",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02606.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 72,
      "snippet": "new java.util.Random()",
      "fingerprint": "293c93481241a310e6cd59046958f006_0",
      "old_fingerprint": "da6c69c7dfd78770db879e69b77625c4_205",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02700.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "2a0583370c598956276354ad21138ea4_0",
      "old_fingerprint": "5580e6d9a8253252f7c944a28a3329d4_59",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02701.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 31
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 50,
      "snippet": "new java.util.Random()",
      "fingerprint": "beaec4ae0c24e3febf493ea6b06c65c3_0",
      "old_fingerprint": "f3ae74d8bfd5518eb3965b55ee0b7723_58",
      "code_extract": "        new java.util.Random().nextBytes(bytes);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02702.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "6a6464e0c4590f6d98852af69f1b0e12_0",
      "old_fingerprint": "401d16030bd9da871b4c91abc9bbaac2_18",
      "code_extract": "        double value = new java.util.Random().nextDouble();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02703.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "4bcf1c34ee0f5b7a50a68bf018ed1e50_0",
      "old_fingerprint": "e38573a5645d1b66fe22402455cce906_23",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02704.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 22,
          "end": 44
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 22,
          "end": 44
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "50b00e1d9251af0d49ed29bef30fdf15_0",
      "old_fingerprint": "4a55b3597e5b0c327c6bacf07a306c68_24",
      "code_extract": "        float rand = new java.util.Random().nextFloat();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02705.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 24,
          "end": 46
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "9e2a6a2618020305d405736929269ed8_0",
      "old_fingerprint": "e16c5b94b7db9d5a15d0a976f0f75840_27",
      "code_extract": "        double stuff = new java.util.Random().nextGaussian();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02706.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "296f995ff5ead00554a40d768e0870d5_0",
      "old_fingerprint": "6ad615fc60bb2abff010cfe36959cc31_30",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02707.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 17,
          "end": 39
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "e7e788cd4f7280c0d2f4b0aee2cbe793_0",
      "old_fingerprint": "b9804cb202e8fe646a920c71496ee2ee_31",
      "code_extract": "        int r = new java.util.Random().nextInt();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["330"],
      "id": "java_lang_insufficiently_random_values",
      "title": "Insufficiently random value detected.",
      "description": "## Description\n\nUsing predictable random values makes our application vulnerable to attacks,\nespecially if these values are used for security purposes.\n\n## Remediations\n\n✅ Use a stronger library when generating random values\n\n```java\nSecureRandom random = new SecureRandom();\n```\n\n## Resources\n- [Java SecureRandom class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/SecureRandom.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_insufficiently_random_values",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02708.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 18,
          "end": 40
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 18,
          "end": 40
        },
        "content": "new java.util.Random()"
      },
      "parent_line_number": 49,
      "snippet": "new java.util.Random()",
      "fingerprint": "223b8cd77266733621f16fb9153afc46_0",
      "old_fingerprint": "e8c31963f36faeeacee2a9e5d9a0e726_20",
      "code_extract": "        long l = new java.util.Random().nextLong();",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00012.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00012.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 68,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "d7a776756a292f828e240aed80ddaa0f_0",
      "old_fingerprint": "7db40b9a8dfa6b8e5a7f65f7e23008bd_11",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00138.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00138.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 72,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "68b8da99e4bac8c4ad9806d077dd9580_0",
      "old_fingerprint": "6e78b667903059f9f9bd201619c37ae7_14",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00947.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00947.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 79,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "8c2a386acb473935e56aab1116c883b6_0",
      "old_fingerprint": "8e9299e08704c0ef463bf3d542dc47f5_20",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00948.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00948.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 78,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "3e55462e8c9752f83ce66bb21a930203_0",
      "old_fingerprint": "0f0f242c61664d3ee52c890f8fc343e8_19",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00959.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00959.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 81,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "3a44b838bdff8ffac18eabc858baab04_0",
      "old_fingerprint": "62a4e84dcd2eb1083c08fb75b01af979_23",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01023.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01023.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 65,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "bdd05bf30307d8f8ebd79e05728a732e_0",
      "old_fingerprint": "1c0b8068c1113f3359a816e09535731c_5",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01024.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01024.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 65,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "aecfe79714a11a9f6da6ca69a13a4e45_0",
      "old_fingerprint": "23ec82a5528762591e94cc1c016d7d0e_6",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01154.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01154.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 67,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "972c213460e07b6c7782669bbacde1d5_0",
      "old_fingerprint": "3ce0d127e45d4336991bb5387be5c667_10",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01326.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01326.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 64,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "5894397884403755d11a61c9e20bf454_0",
      "old_fingerprint": "9374cae23fc1651d3069bd9322708857_2",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01327.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01327.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 64,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "568f48476cdf3b52ac48f993664a2461_0",
      "old_fingerprint": "a05e0b2bded679442974eb1098155e2c_3",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01402.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01402.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 74,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "c6306bb1d98a7deaa05f29e7d5acbdd3_0",
      "old_fingerprint": "06c4b9716258502f8ed0a4a5dff807d1_16",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01831.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01831.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 79,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "962da05abb04b73be8861009cc8745cd_0",
      "old_fingerprint": "873a4bf4e90863c89f7cd69e6ba69b25_22",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01832.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01832.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 79,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "079baa75fc8f1a755a85f45f87fdcbfa_0",
      "old_fingerprint": "e60c3435106cf210745ac8684cc50aad_21",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01902.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01902.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 64,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "e325c017806cfbc3bfca6530a7bed7ae_0",
      "old_fingerprint": "7b70fda601c2ac1485dd4d2525e702dd_1",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01903.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01903.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 64,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "466f86dfce21ebedc5b914f0ca306869_0",
      "old_fingerprint": "130e9b3509471adec7c4b0e656a3a858_4",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01909.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01909.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "idc.search(base, filter, sc)"
      },
      "parent_line_number": 66,
      "snippet": "idc.search(base, filter, sc)",
      "fingerprint": "1206885629d0371c0c994a611fc90c96_0",
      "old_fingerprint": "0f64195ef4fe3ff6650c719e35e19369_9",
      "code_extract": "                    idc.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02025.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02025.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 66,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "1307c179868ac20838e518cad1369d4b_0",
      "old_fingerprint": "d43d55be30e18fd15287fd3965e51dc7_8",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02036.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02036.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 69,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "f2e549e75f0998ed8fa2671a9e9ec3bf_0",
      "old_fingerprint": "0e3699ede596e107d9cc7d327a2eedca_13",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02037.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02037.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 69,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "0d834f2ea7f3e951956d615e662dc0d8_0",
      "old_fingerprint": "1465a326ae65320d797ec41ff3d8e7da_12",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02196.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02196.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 63,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "fef2d64d570ba3a93861e0d509acd9af_0",
      "old_fingerprint": "b4827f34cf3aa103afefba692436f2e4_0",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02208.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02208.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 66,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "220f2d0c35b2139d79ce05d0357b68cc_0",
      "old_fingerprint": "225f27f25178a1f689eaff3538d86e9f_7",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02299.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02299.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "ctx.search(base, filter, sc)"
      },
      "parent_line_number": 73,
      "snippet": "ctx.search(base, filter, sc)",
      "fingerprint": "7d21793f084ee3e71d8a711d8c3e70e2_0",
      "old_fingerprint": "9a54fefbcea29d5a7fd0f19f478d8de9_15",
      "code_extract": "                    ctx.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02305.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02305.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 76,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "1da429094fea62983e7709b21cf7ef51_0",
      "old_fingerprint": "deae7233f9e416da6185ad2737d5d824_18",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02306.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02306.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "idc.search(base, filter, sc)"
      },
      "parent_line_number": 75,
      "snippet": "idc.search(base, filter, sc)",
      "fingerprint": "dff8c6eddaa089bc24bf4d0e876b05a7_0",
      "old_fingerprint": "48cae44e5b1c14560dba058386342aa9_17",
      "code_extract": "                    idc.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02553.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02553.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "ctx.search(base, filter, filters, sc)"
      },
      "parent_line_number": 84,
      "snippet": "ctx.search(base, filter, filters, sc)",
      "fingerprint": "7ce37a53f02d2c312cad61ffef185930_0",
      "old_fingerprint": "49308865d1f2b8400be04f2846502654_24",
      "code_extract": "                    ctx.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02571.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02571.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 21,
          "end": 58
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 21,
          "end": 58
        },
        "content": "idc.search(base, filter, filters, sc)"
      },
      "parent_line_number": 86,
      "snippet": "idc.search(base, filter, filters, sc)",
      "fingerprint": "b074c9de1510b75c6a457a5ececc3ddd_0",
      "old_fingerprint": "4e058f651682ea531d6555db3fd370d3_26",
      "code_extract": "                    idc.search(base, filter, filters, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["90"],
      "id": "java_lang_ldap_injection",
      "title": "LDAP injection threat detected",
      "description": "## Description\n  Unsatized input going into LDAP query detected. This could lead to LDAP injection, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.\n\n## Remediations\n\n✅ Sanitize LDAP query data\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          String filter = \"(&(objectclass=person))(|(uid=\" + sanitizedUserID + \")(street={0}))\";\n          String base = \"ou=users,ou=system\";\n          Object[] filters = new Object[] {\"First avenue\"};\n          javax.naming.directory.SearchControls sc = new javax.naming.directory.SearchControls();\n\n          dirContext.search(base, filter, filters, sc);\n      }\n  }\n```\n\n## References\n- [LDAP Injection](https://owasp.org/www-community/attacks/LDAP_Injection)\n- [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_ldap_injection",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02572.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02572.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 21,
          "end": 49
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 21,
          "end": 49
        },
        "content": "idc.search(base, filter, sc)"
      },
      "parent_line_number": 85,
      "snippet": "idc.search(base, filter, sc)",
      "fingerprint": "b9af22dd1ce687428afcc66cd55f6e92_0",
      "old_fingerprint": "e503b19f9fa5004fc5bf726298920f9f_25",
      "code_extract": "                    idc.search(base, filter, sc);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "e557e3cd2a959dfc904a71ea6b7ccd91_0",
      "old_fingerprint": "edceb41a9cc53cc939c007911a26ffc9_12",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "d28d6c5ee430d85c3bcc6f82b324204d_0",
      "old_fingerprint": "6eab6eefc2fa47e46d38c63f4f849f9f_40",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "6360ce711931b1551e6d94daeeb7934b_0",
      "old_fingerprint": "979084d1dcceefdb53e169f1f769f10d_19",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 69,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "a4714266cf0c6a0d831fad82ab41c423_0",
      "old_fingerprint": "8de2d52d786896a2c6a793817cad4886_23",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "edace0f2967d8d0df8e3a7eb37e8f793_0",
      "old_fingerprint": "9eafbdc9f3906e78b216bf7d0e0999dd_17",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 77,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "acb2c946abf0fe42be4fd2bbcdce5afc_0",
      "old_fingerprint": "f15f9947d2864e8040170b128c6d1f91_32",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "778221a73266faefc7468c6d614d9b83_0",
      "old_fingerprint": "da1446cff37e2cf5b80cfb08f146d7f3_37",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 68,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "82bafeed2c34c00ea2614033729bdb2e_0",
      "old_fingerprint": "c2893c6cea6e827ca0e2bff815a792d0_22",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 71,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "ff19cb095805aa5ffe33d7798adc4100_0",
      "old_fingerprint": "0ad712d0e671601761b921c354866098_25",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 67,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "47e4b93cc5c05408e2e729a3dd32e060_0",
      "old_fingerprint": "4bfca39b18147e4bee837bbc7cb03dc3_21",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 71,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "461c2d552970f9a96c07ffca97f9a891_0",
      "old_fingerprint": "c8e5f233d8dc2cd0dc874a2e51419feb_24",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "a96f0331fc929fdfe0f295ea8910e058_0",
      "old_fingerprint": "5f9d4f8dd4012b6a9a730caeb445d6c9_7",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "85811a331cc97f444b5018dac5f5d4c6_0",
      "old_fingerprint": "8300804f840247ede411f8aa77b921c2_18",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "06a641bff9e9ee3f7a7c690d09df438b_0",
      "old_fingerprint": "535de76df37df79a971d468a3ec466c9_35",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 80,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "84d209bf656e153f6789829e9f744d7a_0",
      "old_fingerprint": "549225462ff33953a3eaa3e94116793b_34",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 79,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "44043b3fbcd579e9f72927812437a1d5_0",
      "old_fingerprint": "631e6263b4c8203d6003742b501aee32_33",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "4a631bf8ab06dcb8b32cc65ba388e328_0",
      "old_fingerprint": "345925b1f761e95d793d18ff9cb2f012_16",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "6408802ae832009cf3442262c76402b7_0",
      "old_fingerprint": "8204ce0abb6eaac4c9014aa151413cfa_29",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "f79ac1cefdbc463cb39bbdfb7118050f_0",
      "old_fingerprint": "37a26d482fb09fa7f3939d9245cd39b2_30",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 66,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "a671cec1ce2f9bd570c7d8bd69ce994e_0",
      "old_fingerprint": "a53cfef38e83ad98bc329c30acaa8631_20",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 59,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "2b50dd95c5391a3f358ee80f81c70820_0",
      "old_fingerprint": "c258f222aa6f596c99f38ac64d034ea5_1",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 59,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "85ded24d770e84e51921d3a00eef4d00_0",
      "old_fingerprint": "abb12a279ebb9c07113347f812a7e4d9_0",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "10b0c64a111a8a17a4847468d818b76b_0",
      "old_fingerprint": "7564c8edf37ac898b9d32569eb181466_11",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "e6be07c4bf8891bd4de702cabebd0c5d_0",
      "old_fingerprint": "edc216d3f372c8c2a468aff075a78a93_10",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "6d2dd0d136fbf04c6cd3323fc21d0178_0",
      "old_fingerprint": "309ef5f100e9d73be37c985ad546d379_8",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "10554c5df49e1611faca7787d96d5eec_0",
      "old_fingerprint": "04e46d93ea7398916c469c640cec4abc_4",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "5ddcb7ebf7184e4ba80896f2156a731f_0",
      "old_fingerprint": "027274efa22dfea355d8dddfc193ada3_39",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "089bcbcad0a97d22a33d04f7a27c52ce_0",
      "old_fingerprint": "1977351e3ba80a54abeff42b6eb053be_36",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "d7bb54f66e96fa03ba09c9ed10a37595_0",
      "old_fingerprint": "b291e360038474a71a4a2568d432bfba_14",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "fb7d594852a72519ade48a27546916ca_0",
      "old_fingerprint": "d39627270fed5cd763176e2392b1f01c_15",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "16e5574e9e7c29af7f87164aa0b08412_0",
      "old_fingerprint": "b21fbb63d94e643d1291d88b1125ee11_31",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "5137e030f7c8a4ec1d9ed17ee7933ba4_0",
      "old_fingerprint": "528449867a1aa3dccd56d667fd32c355_9",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "aa78bfddaaa6d5906007e4b538e4decb_0",
      "old_fingerprint": "204712efebcd86aa61560e0666390644_13",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "412530d98940d82da7fbf74e2c28564c_0",
      "old_fingerprint": "896ac2e3773289f42de20e4075b98951_26",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "0e140e86bdfaadae39286182595cabec_0",
      "old_fingerprint": "891ac8066135f746ce9e0214b35166b9_28",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "f710049ca17208b9aa951031cfd97099_0",
      "old_fingerprint": "44bb93dffdc0715f537df6cd35e6a630_27",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "84dd60f7d81941e77314f4929a4343d3_0",
      "old_fingerprint": "559a30a8e71cb10ed43f961aacbfc523_6",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "1789fdb5993e8a8986b65a35dd000a4c_0",
      "old_fingerprint": "897d58757a831b371fb141db82a2fd1d_5",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "85ed46ce0ec585a1ab856eb46c253561_0",
      "old_fingerprint": "9d2047db6696de0d1abe0eb030dfcae9_38",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 60,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "ae02c12ba9f6c345682b9b25611869d9_0",
      "old_fingerprint": "3f6526070c50aba074c697f16f7f3fcc_2",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["353"],
      "id": "java_lang_missing_integrity_check",
      "title": "Missing support for integrity check detected.",
      "description": "## Description\n\nIf a protocol does not include integrity checks (\"checksums\"), we cannot determine whether or not an attacker has interfered or manipulated the transmitted data (man-in-the-middle attack).\n\n## Remediations\n\n✅ Use encryption schemes that provide integrity\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_integrity_check",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 60,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "97d74247b4c81d21957fd7385780f032_0",
      "old_fingerprint": "69efc2b7f7a443bf0ccba556acfa726f_3",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "2b05bdeb1248912e33258917421e91ff_0",
      "old_fingerprint": "1bff95a3cb3020fab82cd9495bf9010c_12",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "d9b4ab72452f198720df1a7995e97615_0",
      "old_fingerprint": "c758c0d515526752fd80cab377658d9b_40",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "b35a3d7fc12845a7b13efa48264daf03_0",
      "old_fingerprint": "d121bfbae93cfcccd7bd18db85708bd7_19",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 69,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "b0dfb84519960c583e4cb24286666658_0",
      "old_fingerprint": "98c1ab13e2fe55b1c03e468289f187e0_23",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "d2472dc557b589087d952a5c94859362_0",
      "old_fingerprint": "5b41d8dac21675073f1e44b28da797c2_17",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 77,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "ef0694fa1917ec19d1bdffb8a0fd0917_0",
      "old_fingerprint": "0e739e6cce3ac0574334377eaef3f07e_32",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "57ab2fadd6c4c9ff588befdf5ba4ecb6_0",
      "old_fingerprint": "ac49939ce627cf3b08aa9c546af35524_37",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 68,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "edae20c96cc9abfafec5775c7581ed52_0",
      "old_fingerprint": "946a72589d2342ca9595f2df6878642b_22",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 71,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "131b8b642a6f8ae1b1226a25b591eb31_0",
      "old_fingerprint": "1373048ea8709a76656c0e8fbbb0db5e_25",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 67,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "f9177d22864c63c35a6b5e58c18bacc8_0",
      "old_fingerprint": "adc7e5b2aeb4d9e8c143d9b1b852f14b_21",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 71,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "be19965f1b5b2432c3ff00c1f14b0a8c_0",
      "old_fingerprint": "5a5d39ebc60df88f6ce23e9d2acf11f8_24",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "f00382026c6383109b6044c340f3bc80_0",
      "old_fingerprint": "34dda877506461148ee49988765388ea_7",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "815e3144e016e72cfebaa6dc14cedbdf_0",
      "old_fingerprint": "e192dacbf725b246f0f6c01f63909aef_18",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "b69e4e78c169a9555046ab7a77276515_0",
      "old_fingerprint": "7ae2d302ff5035f1a0172964439fc35e_35",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 80,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "c07a266c973203dd7b5685d817bd7e44_0",
      "old_fingerprint": "1424a77ec474f2a0c479ef56c7cec499_34",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 79,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "fb08280a8a32726a68687e2c057c01df_0",
      "old_fingerprint": "1ca6369613774743b292e11b78b105f4_33",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "c5b42cc14a2f4bd4859ade78cb661d64_0",
      "old_fingerprint": "4544ec463f0aa94a45c4f4a4d8cbd4a2_16",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "7d3f8a7298c8755c59f73399cf48fa00_0",
      "old_fingerprint": "cf8ea7c0f3e92c54872afe4d683c9162_29",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "88b07d1f81b47c34abdaf0b913d311fd_0",
      "old_fingerprint": "d51ea5ab7af059fc3846372ea63af54d_30",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 66,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "139225b12dfaf26c8af9fadc2a0e4d87_0",
      "old_fingerprint": "0aa12e779abd9f62455995391caf1d51_20",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 59,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "66e91d7446c7c241f1178aebc2eb4374_0",
      "old_fingerprint": "6b6d5ba880152a2a30bd33dba10ed7be_1",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 59,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "6457e98f2cfd51a3d8a260a8678b6614_0",
      "old_fingerprint": "0e3663275ba22e55313f164a3f62b479_0",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "e02e5ccc8ed0e87f27667ea36ae407a1_0",
      "old_fingerprint": "1ee21a6ecd49ff06160614c89758f3cc_11",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "e054676f7322fde5ae0cb6c797fa2fad_0",
      "old_fingerprint": "c0ec722ae8723f42b1493318c4001bfc_10",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "0059624b7a197baf4320ef977d3ee85f_0",
      "old_fingerprint": "a0ecd7183154f96d15bded2639848a0b_8",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "024a04a888b146fdbe51d5c728b747b4_0",
      "old_fingerprint": "ec23db47908fe4d28955fd34ea5a24a2_4",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "5340615cfe35db4ec9406f51508312b7_0",
      "old_fingerprint": "d43a812a9dbf05d1ac123f359ff67a1e_39",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "79d458c5edbbc7c84db0f1b34360af71_0",
      "old_fingerprint": "05267b2685b36ef17162ea7f0e8debf9_36",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "3da453272c0a2bf6c4c012723138cb25_0",
      "old_fingerprint": "82a339a890646d661a5267ea0f41c7a9_14",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 64,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "25058bfb7a2c4fb3d298d547f615576f_0",
      "old_fingerprint": "90e706858c1a6acde3dcae45854b9d58_15",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 74,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "908724e8a339bb5968815b2dd3cdfb37_0",
      "old_fingerprint": "b8537c0af580f8d6b3041befb512410c_31",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "9ba75b99675733a8f5d52316737f7129_0",
      "old_fingerprint": "94258903d130ee8cecc58fd01a8f68b8_9",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 63,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "fc266569cce1e18c3b0fe9bcdb0614fe_0",
      "old_fingerprint": "1e58d312be39f9d21e98f34849cdd51b_13",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "85f44f31a6b8376d92bf49dcce5ef4c1_0",
      "old_fingerprint": "aa4e4611d19cc579f05dfb63cbd11a56_26",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "7ac56eeee09d20280b166ca71ee6c514_0",
      "old_fingerprint": "414bc440ed5f35996a0c5c9933811db5_28",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 73,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "76ec65fb066032f339bb18ccd92b4de0_0",
      "old_fingerprint": "53a38131ea6e81c46bf7c3bc2cf8bb08_27",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "8e4bc49dcdeeb902c3ec587039bb85d4_0",
      "old_fingerprint": "bc3258cab69ccc56bc9ede0e4bb78f3f_6",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 61,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "6d94da6b3045d3716005df5379d7b540_0",
      "old_fingerprint": "aeda8feab7c4c9c22fddc02e3fd15b85_5",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 83,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "47666dea835f64e3c6aaed181c52cc33_0",
      "old_fingerprint": "67d64fd7f089801b202601e5f7bceb1e_38",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 60,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "5d0aaee4dac47e7a2b4188d91b08ed19_0",
      "old_fingerprint": "efbda49615381a19f8b44b3b89ace3b5_2",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_padding_oracle_encryption_vulnerability",
      "title": "Padding Oracle encryption vulnerability detected.",
      "description": "## Description\n\nUsing a block cipher algorithm mode, such as CBC, together with a padding scheme is vulnerable to Padding Oracle attacks.\n\n## Remediations\n\n❌  Do not use CBC (Cipher Block Chaining) mode with padding\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n✅ Prefer GCM (Galois/Counter Mode) instead\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/GCM/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n- [Java Security Standard Algorithm Names](https://docs.oracle.com/en/java/javase/20/docs/specs/security/standard-names.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_padding_oracle_encryption_vulnerability",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 92
        },
        "content": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")"
      },
      "parent_line_number": 60,
      "snippet": "javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\")",
      "fingerprint": "9403afd3bd89bf46077585132bd85d9c_0",
      "old_fingerprint": "29b80cad4d10e5adffe2a0882d4be881_3",
      "code_extract": "            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(\"DES/CBC/PKCS5Padding\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 71,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "93df6ed06cc615c73bb91bf7743a5d00_0",
      "old_fingerprint": "5459a3d9102fde583e0a1bf1f2a8deae_94",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "6e7b999d034438b35e1900ec4aadd201_0",
      "old_fingerprint": "9d46df3ee31edb927ebef4a4e4712d1b_97",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00011.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00011.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 35,
          "end": 71
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 35,
          "end": 71
        },
        "content": "new java.io.File(param, \"/Test.txt\")"
      },
      "parent_line_number": 54,
      "snippet": "new java.io.File(param, \"/Test.txt\")",
      "fingerprint": "674f8132b1f7b91e7af5d330f2205d3c_0",
      "old_fingerprint": "75fac1306b693041d818234d2e2695aa_7",
      "code_extract": "        java.io.File fileTarget = new java.io.File(param, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00028.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00028.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 57,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "ad929a19420b0b520f89374010a5fcbf_0",
      "old_fingerprint": "8083bb0bb48fb65805554bbf615d2795_16",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 76,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 76,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 75,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "42b35790447c890755fdc6837f881969_0",
      "old_fingerprint": "8ccc52fe0a0cf30306c32f66608a0639_122",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 74,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "ddb9f6454fb2cc3161f108d2bcdfad0e_0",
      "old_fingerprint": "9b3ea36e986972d5dd1773f77a495e7c_116",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00063.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00063.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 74
        },
        "content": "new java.io.FileInputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.FileInputStream(new java.io.File(fileName))",
      "fingerprint": "315daed56eb4f4eee314ab1399ad4b60_0",
      "old_fingerprint": "7cb8b0f564cad600aa412fcaa0d1fc1c_130",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00064.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00064.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "cca276a69d842cb61d49ed12b7bff76e_0",
      "old_fingerprint": "b7e8a1089d9c33851a4ddf0315c48c58_141",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00133.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00133.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 63,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "29940ba130158737ac9d673b4e7e80ea_0",
      "old_fingerprint": "40e4ca2765b95e03cac73e208cc8a0a0_54",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00215.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00215.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 65,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 64,
        "end": 65,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "87c7572a9f52e1cc12a5f82ff4e2d2ab_0",
      "old_fingerprint": "5b0064cb701ef7dc8ae2cd076c54eff5_61",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00219.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00219.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "2e85d423e948f1c4e5d08f6d1191b490_0",
      "old_fingerprint": "905e637e0903e6877ad496b4d397191c_113",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00221.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00221.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 74,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "23ed79e4dc60417e12b09018400142d6_0",
      "old_fingerprint": "03b416b4a517b86465a92051c422de1f_118",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00452.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00452.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 60,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "1d8f648eb6d744cedca0be84f050f4be_0",
      "old_fingerprint": "58638cf09aed7a1ad59febeac5845903_38",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00453.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00453.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "0fabfb8aed75209e4621afd3b70477f7_0",
      "old_fingerprint": "7eec4859cd4242706597a6b8e488c447_148",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00454.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00454.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 62,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "526d1eb355ac595fd8cfecd10569109c_0",
      "old_fingerprint": "c2c3ff2c5e6a45f8ca6fb6ee5464db24_48",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00455.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00455.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "2d3ce4b898498150d8adc87b5922da06_0",
      "old_fingerprint": "aa59a241bbf03bcdcaaedec27dcab1f8_59",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00459.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00459.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 65,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "da4ed90553ff15329df278040066f0a4_0",
      "old_fingerprint": "375af3a578de1f6fd23a45e41b24e09b_65",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00526.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00526.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 62,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "7220bc8abf686caad66349897669f5fd_0",
      "old_fingerprint": "6e09fa98d577c374ab94ff809230d9b7_52",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00527.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00527.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "e783a4c5cdfb60b59eecc382aac02587_0",
      "old_fingerprint": "481c80380519464f9f0851b30948fc9a_64",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00529.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00529.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "1f11918aa3c6f8400f95fec4dc463f40_0",
      "old_fingerprint": "96e12c9302dbbc8263bb38852382c270_69",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00787.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00787.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 85,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "5d7af28d76a3430716766f024fb023a2_0",
      "old_fingerprint": "a07bd6b44e463cd6403d3dacae1e701e_157",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00788.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00788.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 80,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "0099ca8540b333ca06fe56e6689903cd_0",
      "old_fingerprint": "4eeb6323fbfbeaa392e9192651180456_149",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00949.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00949.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "d8cc0a4062cc18f7253e0a5f5c43f078_0",
      "old_fingerprint": "24a2c3bf7eec8bc1b2df538d174d89cf_80",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00950.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00950.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "b8b895c1ce5e3742af1a034792b79dea_0",
      "old_fingerprint": "f7203ac4b5f117bfd7285c263a1d5f82_68",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00951.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00951.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 84,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "1e73af3f4536a72b60204e42a3c8f377_0",
      "old_fingerprint": "abe984130ea7b4980d01d620754d553a_153",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00952.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00952.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 87,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "75d571c9208d1a8ec0237e7962d6e1c3_0",
      "old_fingerprint": "abc5c162bd5b2176d0b72da65d184c6c_158",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00953.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00953.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "ce208412c7e763a7dc6da65fd62f0f3b_0",
      "old_fingerprint": "68e438d769fe8a0ceb2c5a0ea948b436_145",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00954.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00954.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "2d206d9a52cc538798fb546f33b1d925_0",
      "old_fingerprint": "ae36b1104a58977cbbc5ca060d5817d3_146",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00955.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00955.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "1cdadcb79de9383a575fff39294dd058_0",
      "old_fingerprint": "9868928537403ab08b4364f4431812b7_143",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00956.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00956.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "5938d0d90455913a0b8b26efde4bbb2d_0",
      "old_fingerprint": "621da2b9fc91002db59fb0c1ab99c882_144",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01025.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01025.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 54,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "134fe30c78501f92182e702182355bca_0",
      "old_fingerprint": "7a463857823f6c47028043cd9294972c_8",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01026.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01026.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 53,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "278a0b055fbe76aea4d76bd1dce3c0c7_0",
      "old_fingerprint": "79cadce8b180e813831aae858a4a6d28_3",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01027.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01027.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 53,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "e4a9e8e4bc9863e981823e9468755907_0",
      "old_fingerprint": "1d32fe279f11196d34811b0741aafaed_2",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01028.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01028.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 70,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "86a4fd6ae84dac9efa64c235f843801f_0",
      "old_fingerprint": "a5b53da04d6be0e904b73c1a0666cc80_93",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01029.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01029.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "d2c583c2c65a09a27f0c7e2581b89d77_0",
      "old_fingerprint": "c50d2bc564b45f2c5b740203cbd0706d_110",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01030.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01030.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "3f66c8ccbf4d4f0d2cfed91c5c94ed70_0",
      "old_fingerprint": "ee93a5735f041ec757fbdcbb657d525a_108",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01031.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01031.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "84331cdbd3f079ee59f8ca3412d70169_0",
      "old_fingerprint": "65673fb408981e15efb24e35919b06ef_21",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01032.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01032.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "21184885c777ffd55bc24b31a79595a9_0",
      "old_fingerprint": "141c4e017a52bfbbd707c28f2ab5d1d9_32",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01033.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01033.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 75
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName))",
      "fingerprint": "b7ce07edda34bf19eae43740fd4cbf7d_0",
      "old_fingerprint": "1921041759ee6f4997784df9355a9374_30",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01034.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01034.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "d2aa1974b2f982c524f4fe8785d86005_0",
      "old_fingerprint": "9d7cff26e6c72a24a1d04ae96651ce39_29",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01035.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01035.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "1947372e2003726224c87e6f6fe35562_0",
      "old_fingerprint": "af115297bcd92bffe24c40dcb7ab5549_28",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01109.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01109.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 63,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "5e58f3fb5313a52ef5885823d07900d1_0",
      "old_fingerprint": "1306039bd54d50708b63ba0f75cbe86e_56",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01110.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01110.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 80,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "4452e9c4255c335787f7388e957491f6_0",
      "old_fingerprint": "0ddab81a326abea7ef0ac25d73055d6c_150",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01111.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01111.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "e2952d80d2a9dcb2597ae4799baa76cb_0",
      "old_fingerprint": "afe45900806a0f75e3ff092f4e1e2b99_82",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01112.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01112.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "2f2e1a02368de8f265a7e7379b010cea_0",
      "old_fingerprint": "3fc22a129ffa365c9e05c32f8775309d_81",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01113.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01113.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "655bb4830f87556c3f7191e20349f6f3_0",
      "old_fingerprint": "b362be8d988ae80c3d5bfa2afc6226a6_91",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01114.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01114.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "d6e45e1d68d38c1e5b5cb95001f2b884_0",
      "old_fingerprint": "e1cb1e6c47e9531de88376697cc598e2_89",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01115.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01115.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 75
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName))",
      "fingerprint": "7a68e28c142ac00f2699bdf27f8b8b20_0",
      "old_fingerprint": "e528c8a38b30210fd823abcb2c08f84d_87",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01116.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01116.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 75,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "e8ccf7deba380a46a8cf901563d175ae_0",
      "old_fingerprint": "b4a907d925e2d82b565cbe3beb81c33f_121",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01117.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01117.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 75,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "02eaf566209fdbb72c2c54e5f7b31cdb_0",
      "old_fingerprint": "1606058993db721f93cec67856c40646_119",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01155.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01155.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 55,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "d1a8172505e464142c337fc33336d506_0",
      "old_fingerprint": "68a4ca046fe0472820c7141c4030dfca_9",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01156.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01156.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "1d19f4c8f03b5e07dafa3caaee854f55_0",
      "old_fingerprint": "c64f7bdca3e50ef7e6822c07efe12714_99",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01157.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01157.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "94db20d7a134edaa2955128760a5d5fc_0",
      "old_fingerprint": "1afe7a98a6120e5de647387395e74abe_100",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01158.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01158.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 60,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "c55f5ff1f0c2c3fc3b7ef096a3670401_0",
      "old_fingerprint": "a62a2e37a38134da2c9ee6bbee64aa3f_42",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01159.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01159.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 60,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "b60626b30bbf7b456c6b0046e4e162f3_0",
      "old_fingerprint": "8e3a89a01fe95dfa6bb30c86998b598b_41",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01160.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01160.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 61,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "088deee082e1d95951e879f15cd8e8d5_0",
      "old_fingerprint": "fdec04a27c2169f33c37f997670dd206_46",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01161.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01161.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 61,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "ce109f13c3e614b17b05969a3e01222e_0",
      "old_fingerprint": "e2abdc7640ad3a18a9d343a79a813428_45",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01328.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01328.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "6e1dd3fb2b37b5d16f0bebad98fbc4c7_0",
      "old_fingerprint": "dd68ad94d42e32d26434ec7770e84a42_86",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01329.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01329.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "f1a004c878172f8290f2fe624d06e7a9_0",
      "old_fingerprint": "115bc3a98bc7c73dbc8cd84655472cea_96",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01330.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01330.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 75
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName))",
      "fingerprint": "80c8f5dd801f825921c6671eaa25a9e0_0",
      "old_fingerprint": "1e0add0432aae0087299c157ed0a5d7a_25",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01331.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01331.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "8d4210c3455b51cdd6b9a7c509b0eb96_0",
      "old_fingerprint": "cba067da64eaa2bcc060f9a67fd94c55_24",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01403.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01403.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 64,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 63,
        "end": 64,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 63,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "b548dcc9e28cbe90c0e75ef102163de5_0",
      "old_fingerprint": "9c787b528791ebdca632c0fda5cfd543_57",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01404.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01404.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 62,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "aa914171aa9adc78ce92c4c1d04c89f1_0",
      "old_fingerprint": "edb24007f312f4bd15bc94a1c79a1457_49",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01405.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01405.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 74
        },
        "content": "new java.io.FileInputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.FileInputStream(new java.io.File(fileName))",
      "fingerprint": "2ec318c1fa89967b4b71651597058b0d_0",
      "old_fingerprint": "86128bd13a73f68367d62d07049ac809_73",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01406.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01406.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "be87fc4d7e0d98114ebe27a8df3f0490_0",
      "old_fingerprint": "ca6c8a18db52bf839cf3e1acffc1e129_72",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01407.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01407.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 74,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "9d4c22fb4f10d585f55769b32e83971b_0",
      "old_fingerprint": "361ba757b3c38075a9bed2c817795151_117",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01408.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01408.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "f84407718df9f98fcd56437b9f9182f2_0",
      "old_fingerprint": "b349e4d46095c563e167ef311fc95fbe_78",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01642.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01642.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "0dbd79fee4212e0ee6c21ad187f6fc3f_0",
      "old_fingerprint": "a422c2e890b563b4d0fe082585a351f2_114",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01643.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01643.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 89,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "7355e64e07f403e83b1528d0452065ef_0",
      "old_fingerprint": "240a95a8ab52a57a5ab00ace21a365f6_160",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01644.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01644.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "bf8d5c6fa30f159364ecdf85abc38f56_0",
      "old_fingerprint": "ee3ee69329cad95e75f0f21a1196c31f_123",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01645.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01645.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "fa3e1455fa2497189b85785b39273172_0",
      "old_fingerprint": "f34706a4aef0dce998c8d581490e2411_124",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01646.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01646.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 48,
          "end": 74
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "f524daa70122bada08ec51e34dc47e12_0",
      "old_fingerprint": "8cb74580ae1940b4f4d5f8972615312c_132",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01647.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01647.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "d89df88f9738f942c4d1d743bc5b6a84_0",
      "old_fingerprint": "e1d4a500648218b8b7d0c2a3192c5bf1_142",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01833.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01833.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "13692683fb01f90a2f223e257c4b70e2_0",
      "old_fingerprint": "4bbb135210b86b52e87221266569d9ff_77",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01834.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01834.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "0afb798c54fdf89de14429aa9ba5220e_0",
      "old_fingerprint": "0e9306298d773f2816a9d5c3c82e4b03_79",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01835.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01835.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "f8384800657ed74321102b06e6bcb885_0",
      "old_fingerprint": "9fcda592b7897b9f0267e5c05eef851f_76",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01836.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01836.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 84,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "6619621476d088303c4e4add2d21f169_0",
      "old_fingerprint": "c5dcd117279bda1aa4a83cede02303ef_155",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01837.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01837.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 87,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "9b0c30ef9c811a998b9266ed17a7055f_0",
      "old_fingerprint": "becaedc6ddd182b99684ff2c682f1b5c_159",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01838.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01838.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 19,
          "end": 74
        },
        "content": "new java.io.FileInputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.FileInputStream(new java.io.File(fileName))",
      "fingerprint": "87bf759bc9244586740079c74c39d76d_0",
      "old_fingerprint": "c20a6a3adc4ae506843e0127f0fa66da_102",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01839.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01839.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "7dcf4cdaf69dcdd9b2b62068de63ed86_0",
      "old_fingerprint": "cfd9605382966bb0f6cb9619a36facf0_109",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01840.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01840.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 48,
          "end": 74
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "6c280efc2f4923b9fa1935b500cf2e3c_0",
      "old_fingerprint": "47243481f574e3f7581e1b834807487a_106",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01841.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01841.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 79,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "0be3e5c5ca3b35643588b38582bab64c_0",
      "old_fingerprint": "a73bbec35b5db7cc4d788444ea23cc38_147",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01904.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01904.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 53,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "e43d09ef4a5270bef96c2857231ba0cb_0",
      "old_fingerprint": "dd88a7aad8a6306f4c2a065bd11baa5b_6",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01905.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01905.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "de865cbb6869b25f762fc9e9ea5afb6b_0",
      "old_fingerprint": "4ed4d370edd9d7ce198d71693b171ea3_22",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01906.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01906.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 75
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName))",
      "fingerprint": "dcaaef6d1b05c617ed1f21cff4677724_0",
      "old_fingerprint": "593ba9978951f9a427ea933ada09c15b_27",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01907.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01907.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 48,
          "end": 74
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 59,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "c447e5709d762f64a38e9187bd4f2b55_0",
      "old_fingerprint": "152133a8107b1e2abff15fa164ea58dd_35",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01983.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01983.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "266ea377aeb312f1d748e06e238be13b_0",
      "old_fingerprint": "d3a7f84f646ad5ce7ac05768c71eebc8_60",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01984.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01984.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "99e323f477e01d899c49347d5bed9aeb_0",
      "old_fingerprint": "38a38824cb7a613a542adb06d5e8e33a_62",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01985.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01985.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 63,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "ea9483744fa1e81e175dfc0874ccacc1_0",
      "old_fingerprint": "156d9a5ebbada9281053169dabe663ca_55",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01986.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01986.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 83,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "4f143f54a4a3c06faa9ad112dfee281f_0",
      "old_fingerprint": "8b12936c7d43001a9c957abb006ff902_152",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01987.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01987.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 83,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "8cec4eb155d3d8b5b45c3ad35973553f_0",
      "old_fingerprint": "f5258719f7e0cf8f092428ed8f84ede3_151",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01988.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01988.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 68,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "fdf69c84b2cb91fea1c13ea64872b6b3_0",
      "old_fingerprint": "08084efa81397d7a2a3270cb8aabcfc2_75",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01989.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01989.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "2b3afca5ca52f2fedc986a79f67ddb8a_0",
      "old_fingerprint": "d20ddc80989ff2651575522bc2c81007_84",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01990.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01990.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 69,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "b906efae001720eba7d96bab5aaeed95_0",
      "old_fingerprint": "2a7ce206fb38b244d4380f0d65b5c356_85",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02026.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02026.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 57,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 56,
        "end": 57,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 56,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "8996877c7d6e998631a0ad68ff444d77_0",
      "old_fingerprint": "5ed066b38e45337e8c8788002288b631_13",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02027.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02027.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 56,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "e57c7e9ba3c0d3f62777fd995e8bffcf_0",
      "old_fingerprint": "4686391b96425977df53bc90c26ebcb9_11",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02028.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02028.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 56,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "4974fa9b84dae1b77eda49c6129ced23_0",
      "old_fingerprint": "f94374a1c64767cf9649e0430bafdb66_12",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02029.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02029.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 55,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "c68b0cbf0d2dc0e958865f96eb7b24a7_0",
      "old_fingerprint": "66eff85f420831ca8b62bd3904f345a0_10",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02030.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02030.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 75,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "4cff9ac7494ed37d3b45efcc8c78c051_0",
      "old_fingerprint": "ed247e9468977be5ee35fb1ba2d7fc23_120",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02031.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02031.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 74
        },
        "content": "new java.io.FileInputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 60,
      "snippet": "new java.io.FileInputStream(new java.io.File(fileName))",
      "fingerprint": "d9489be90054de77d46efc931ef0bdb9_0",
      "old_fingerprint": "8798c99d02e05bb3648f31a517cf6d96_37",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02032.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02032.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 60,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "139faf018a3d41448325c5c4a4e38d84_0",
      "old_fingerprint": "723cc4e81b27f74fc1238da6ccb6ec0b_40",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02033.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02033.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 61,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "02fadd8cb79fbf7ea505342597a690a4_0",
      "old_fingerprint": "0fd7acad95944fd6f0b66318e7534ae4_43",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02034.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02034.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "818df6cb21d522351f7a6efb90d13916_0",
      "old_fingerprint": "721b0fd5cf421c5c7106af7ec4a8dc1d_71",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02197.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02197.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 54,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 53,
        "end": 54,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 53,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "31d5a2971f6b547721ed341c1d3e2b98_0",
      "old_fingerprint": "ec79c022c5fc4d34b75b63bbcf92e382_4",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02198.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02198.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 17,
          "end": 87
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 17,
          "end": 87
        },
        "content": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)"
      },
      "parent_line_number": 53,
      "snippet": "new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar)",
      "fingerprint": "6c24740ee473e8b2670ba3633b0f475f_0",
      "old_fingerprint": "ac782d466bcfd0dd2b6a4cc0546aebd7_5",
      "code_extract": "                new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR, bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02199.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02199.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 52,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "1e2f416b97116e6d26e17d364b8e4750_0",
      "old_fingerprint": "faccd28e899d66455774a56efc15b062_1",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02200.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02200.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 52,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "911e13d4aa35b1fdd12fa1de52054aa2_0",
      "old_fingerprint": "75eca143f1fa90841e16f0e47bdbbae0_0",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02201.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02201.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 57,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "f70bbd5f1fe1d2dbaf0b9c3e46250b1d_0",
      "old_fingerprint": "1c7e1d5577dc9771b5e1b166081e8e4d_14",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02202.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02202.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 48,
          "end": 74
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "b2c9992dcdd19177532ebd3c5eab6e8e_0",
      "old_fingerprint": "d34fbd814b6a47de4b57ebf2a4773ed5_18",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02203.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02203.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 75
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 48,
          "end": 74
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "76a6efccc38cf0c6522e8d1033a31b59_0",
      "old_fingerprint": "ec5eee5201b5555cd76e260950cd84f8_17",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02204.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02204.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 64,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "7631cdccdf314cba9270ead037a6546d_0",
      "old_fingerprint": "efacada390752c913905f7b2500bd78f_63",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02205.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02205.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 58,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "3512031851ca4a182c1e9811e2795400_0",
      "old_fingerprint": "68b491cccd839f3f4ac4a85086c3a506_19",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02300.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02300.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 64,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 63,
        "end": 64,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 63,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "48231227437246681d520368d0ba2f68_0",
      "old_fingerprint": "76278c56b44d40ecfd33d6603e8b36b0_58",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02301.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02301.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 62,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "d3056b12e963c01779c7eb914f570a08_0",
      "old_fingerprint": "6e3a1ab11b40377365d2529ef8416ab2_51",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02302.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02302.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 62,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "c6695c137a20f9976d6fb4cedb2cf538_0",
      "old_fingerprint": "b8f631a665458c3b32fdc3f016a57285_50",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02303.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02303.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 47,
          "end": 73
        },
        "content": "new java.io.File(fileName)"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.File(fileName)",
      "fingerprint": "c39fc62c69431dd5eea5f28097c80dbb_0",
      "old_fingerprint": "34d28902f2e3d353b09bc4b4702abd91_66",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02304.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02304.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 67,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "7b235a2c798e039348720a7ccc2481d9_0",
      "old_fingerprint": "4709e07c3bf83341753a3b5b2d5130cf_67",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02554.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02554.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 74,
        "column": {
          "start": 17,
          "end": 96
        }
      },
      "sink": {
        "start": 73,
        "end": 74,
        "column": {
          "start": 17,
          "end": 96
        },
        "content": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)"
      },
      "parent_line_number": 73,
      "snippet": "new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar)",
      "fingerprint": "417c2d6af44bf636b7d3c7d3ee334967_0",
      "old_fingerprint": "e14fa0ec3442ed21a4ec0fae5207563f_107",
      "code_extract": "                new java.io.File(\n                        new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR), bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02555.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02555.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "d337d441940cc277cc05a859ec705587_0",
      "old_fingerprint": "0423269321ee4495e7e7263b83e0764f_101",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02556.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02556.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 56
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 56
        },
        "content": "new java.io.File(bar)"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(bar)",
      "fingerprint": "fd3a4bf624d49846e3c6942b857f7e4c_0",
      "old_fingerprint": "cb50f3bb5b5ca32232171669b889c2f3_105",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02557.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02557.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "a75da57453784be8e21ff79e1a93fbdb_0",
      "old_fingerprint": "ef178d69d3dca1c453c0d9c427ad744f_104",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02558.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02558.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 69
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 35,
          "end": 69
        },
        "content": "new java.io.File(bar, \"/Test.txt\")"
      },
      "parent_line_number": 72,
      "snippet": "new java.io.File(bar, \"/Test.txt\")",
      "fingerprint": "84e6632859a0ef6f2d8ce00a1f992225_0",
      "old_fingerprint": "81826252a2319af994609ae3c7ad7f74_98",
      "code_extract": "        java.io.File fileTarget = new java.io.File(bar, \"/Test.txt\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02559.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02559.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 39,
          "end": 64
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 39,
          "end": 64
        },
        "content": "new java.io.File(fileURI)"
      },
      "parent_line_number": 89,
      "snippet": "new java.io.File(fileURI)",
      "fingerprint": "e355197f8631134c0c543bde0ff10ccd_0",
      "old_fingerprint": "0e9de7373a8df89e506076c0e7fd2e32_161",
      "code_extract": "            java.io.File fileTarget = new java.io.File(fileURI);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02560.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02560.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 74
        },
        "content": "new java.io.FileInputStream(new java.io.File(fileName))"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.FileInputStream(new java.io.File(fileName))",
      "fingerprint": "1a5097b404194a4dcf1bc06fd2abc186_0",
      "old_fingerprint": "e797e8fb4fc2e397ed1cdb4cfe30ba27_127",
      "code_extract": "            fis = new java.io.FileInputStream(new java.io.File(fileName));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02561.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02561.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "ac1fed44f67d5ba64c9c576d9d09a6f5_0",
      "old_fingerprint": "2322e150b1c1fc12aca283e71fc9f859_126",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02562.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02562.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 19,
          "end": 56
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 77,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "2cee7150743a1310c1e69a025f5a9a45_0",
      "old_fingerprint": "745d4a013fab4e129a5d07b2e8ca28a1_125",
      "code_extract": "            fis = new java.io.FileInputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02563.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02563.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "c5051493a0c816c2e48ffd3564e2ba68_0",
      "old_fingerprint": "6ad4e89839be48c78282c514e2de60d5_139",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02564.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02564.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 82
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 82
        },
        "content": "new java.io.FileOutputStream(new java.io.File(fileName), false)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(new java.io.File(fileName), false)",
      "fingerprint": "8d5bf189ac40539e9f64263563ae6aeb_0",
      "old_fingerprint": "e4cfe473433befb70a2f60e323df93fc_137",
      "code_extract": "            fos = new java.io.FileOutputStream(new java.io.File(fileName), false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 84,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "1a44b53d6b3a0e418bd7daeae30c0f65_0",
      "old_fingerprint": "d3a778be130225e3827aaef2befeb51c_156",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02566.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02566.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 46,
          "end": 83
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 46,
          "end": 83
        },
        "content": "new java.io.FileInputStream(fileName)"
      },
      "parent_line_number": 84,
      "snippet": "new java.io.FileInputStream(fileName)",
      "fingerprint": "55430137eb080ec3a603b4f2ec1c195e_0",
      "old_fingerprint": "9a4e98b0804dc045b984133a6d8d2bee_154",
      "code_extract": "                new java.io.FileOutputStream(new java.io.FileInputStream(fileName).getFD()); ) {",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02567.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02567.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 64
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 64
        },
        "content": "new java.io.FileOutputStream(fileName, false)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(fileName, false)",
      "fingerprint": "df21818bda21b41bf072ec44764a96b9_0",
      "old_fingerprint": "af42e7875729919dc07eebc7ad768efa_136",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName, false);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02568.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02568.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "ad277c0735fce6ea4a1e36d2db445c43_0",
      "old_fingerprint": "77a578897e69b0e65a8b106a8ef1b27e_135",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["22"],
      "id": "java_lang_path_traversal",
      "title": "Possible path traversal vulnerability detected",
      "description": "## Description\n\nAllowing unsanitized user input in path resolution methods means an attacker could gain access to files and folders outside of the intended scope.\n\n## Remediations\n❌ Avoid wherever possible\n\n✅ Sanitize user input when resolving paths, for example:\nUse `FilenameUtils.getName()` to mitigate against unwanted patterns in the path (such as `\\..\\..`)\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String image = request.getParameter(\"user_profile_picture\");\n          File file = new File(\"user/profile/\" + FilenameUtils.getName(image));\n      }\n  }\n```\n\n## Resources\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_path_traversal",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02569.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02569.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 19,
          "end": 57
        },
        "content": "new java.io.FileOutputStream(fileName)"
      },
      "parent_line_number": 78,
      "snippet": "new java.io.FileOutputStream(fileName)",
      "fingerprint": "33a0fe972b438396accddad46f0b14ae_0",
      "old_fingerprint": "e0d538c1864bd0ae792e76ec3c8907c3_134",
      "code_extract": "            fos = new java.io.FileOutputStream(fileName);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00008.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00008.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 57,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "5a82da93b3506c49692838d39ffdb8df_0",
      "old_fingerprint": "bfc4bf4212c6aabfae9b894751a32368_5",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00018.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00018.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 59,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "cc467ffbb8636827c1d74baac95ce839_0",
      "old_fingerprint": "aa37c2d275cf843035114c6368dc6f8d_50",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00034.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00034.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 56,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "2c78e3a047665b33ad7f52932ed8bbae_0",
      "old_fingerprint": "05d7d62cc6e8f3a0b081996387a52064_0",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00037.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00037.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 71,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 67,
        "end": 71,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 67,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "1ccb53365165736dfb725cf255e3f4bf_0",
      "old_fingerprint": "ff56444b2bd1e32c6ac2e29de6bec8ee_85",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00105.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00105.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "09436507c8e1fea4ee688886f3cb9afb_0",
      "old_fingerprint": "81c020b0eb4116148ac6eb46bdc3686e_143",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00109.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00109.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 79,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "11e3c2cb6180b8e88f536d0e8d532762_0",
      "old_fingerprint": "27ce185f56784fd51bbe0a5a7b4f16b6_176",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00112.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00112.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 74,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "7d20fda80ac248f2e3c61e8cd4416baa_0",
      "old_fingerprint": "8e3fc6e818f6a153d9196d47fc096ae4_134",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00114.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00114.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "175c826e0856126a5d85c27a51f8ce5b_0",
      "old_fingerprint": "c6b3689842b89aafce825e07c529d13e_140",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00203.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00203.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 63,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "3d456baf01fc77b71a0185ee01a13bca_0",
      "old_fingerprint": "a1c8c44b77f82e55873ad886d1366d33_78",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00204.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00204.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "c23ad1e518e28a25a8cb76498229d4a7_0",
      "old_fingerprint": "d9d484693572739ff6a49fddfdf91af8_52",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00328.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00328.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 65,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "86c4e32cb9dfa50fd9833093147d225a_0",
      "old_fingerprint": "c6191bcaacd09f745182bcc54552df20_79",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00329.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00329.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 65,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "e82d8b0556731443a2751a1fb2c094d5_0",
      "old_fingerprint": "c51d280555d4ca479752c31f772be559_81",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00333.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00333.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 84
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 52,
          "end": 84
        },
        "content": "connection.prepareStatement(sql)"
      },
      "parent_line_number": 65,
      "snippet": "connection.prepareStatement(sql)",
      "fingerprint": "b23e70f1d53ca671312f5a7d9ccb6d98_0",
      "old_fingerprint": "83c2de47bb78b5a1abad95065bc07475_82",
      "code_extract": "            java.sql.PreparedStatement statement = connection.prepareStatement(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00343.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00343.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 65,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "db0df9f9c8ee90fc9cb03b6ff23eda40_0",
      "old_fingerprint": "fab4f8568234aa46049324804aa3ae82_83",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00344.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00344.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 65,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "a7253d3fa5438764d5edd097f9ec3865_0",
      "old_fingerprint": "ba6b19659d242e66be4e99465edbf760_80",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00512.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00512.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 57,
      "snippet": "statement.execute(sql)",
      "fingerprint": "4694fb96ba2d77ecb5a3bfc715ee8dcd_0",
      "old_fingerprint": "92017180793a6cf4fe2bcc2ccffa2f70_15",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00514.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00514.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 62,
      "snippet": "statement.execute(sql)",
      "fingerprint": "1055ed976b63bdecd1509746517ab787_0",
      "old_fingerprint": "8537406c39e166fabf58abe4f9abe1d1_77",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00517.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00517.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 62,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "141a303cc42f562d6b21cfe8b8eb2e75_0",
      "old_fingerprint": "97d3b0e63fbbf4d92287f907285c17da_76",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00518.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00518.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 59,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "b74a065241e7c7c24522492eeedcaf85_0",
      "old_fingerprint": "98f7b27341750f1313e8b3c84b6cb44d_47",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00591.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00591.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 70,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "20cbceecde6bba8b73f1febc1ffc209e_0",
      "old_fingerprint": "6953fd255f22dd0b413e11fcae13f6f0_107",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00595.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00595.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "75b17e1b287fec3532f74bbc074786d8_0",
      "old_fingerprint": "c0bc68097a949cb0274bc78903d9b355_121",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00601.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00601.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 72,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "b9d6c9240cf03baf41bf8edb9432a1a2_0",
      "old_fingerprint": "72fb1f158986b6f6f91ea4392451fb11_109",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00603.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00603.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 69,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "81a3bb058da0a501e45ab9b960a83507_0",
      "old_fingerprint": "2a3c1f979b4851884ec0dca79e53f7eb_106",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00604.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00604.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 74,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "a13771196c7542a9ca8ad7c35b9f9f3c_0",
      "old_fingerprint": "aa1ca188db7b810735c1cc5853fc4e74_129",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00605.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00605.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "e62e7c85888cd4c1308b9d1ff52b6567_0",
      "old_fingerprint": "79ca65e8bb6e1022e5cd9a130ecbc60f_118",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00839.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00839.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 83,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "84a4ccebdc094321ecd9e89988f96b13_0",
      "old_fingerprint": "25cf9ea6433a43e4cca65893a556fd2d_178",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00848.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00848.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "97a17166e9e46fd84c90418d799df479_0",
      "old_fingerprint": "9f910cda4ddad37df2968574d8ab0ebd_146",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00851.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00851.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 82,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "2a3599de15339a73a0f76a7bed2f5f83_0",
      "old_fingerprint": "4c6e0600f95410767f584d40d1b6d94d_177",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00996.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00996.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "b9a78d5ac1299b4c504458fb508e844c_0",
      "old_fingerprint": "4c0bde04ec9eb629bb3f7af79c19f670_120",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00997.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00997.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 74,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "1eeee642daf5a13e9ce5215b18f1a064_0",
      "old_fingerprint": "c1bff67e57767f498886232e394f2afc_133",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00998.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00998.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 74,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "c92196b4155b39078c66f83fcf491d57_0",
      "old_fingerprint": "229c95bc9fab0fe98a89afcf55ffb7eb_132",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00999.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00999.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 74,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "2d1f9fb6bc6703b5e54d219b8fac969e_0",
      "old_fingerprint": "32cf9a1546b8dec8a04555f4523095c4_131",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01000.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01000.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 78,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 74,
        "end": 78,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 74,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "19823e508b1438e3f094baa64fe9c5eb_0",
      "old_fingerprint": "44492bc06e405576332ccce79156e600_128",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 52,
          "end": 84
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 52,
          "end": 84
        },
        "content": "connection.prepareStatement(sql)"
      },
      "parent_line_number": 72,
      "snippet": "connection.prepareStatement(sql)",
      "fingerprint": "914b846502339b153bee496574303522_0",
      "old_fingerprint": "cd54f04d3d95972b11aefb8bfb366965_119",
      "code_extract": "            java.sql.PreparedStatement statement = connection.prepareStatement(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 71
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 71
        },
        "content": "connection.prepareStatement(sql, new int[] {1, 2})"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(sql, new int[] {1, 2})",
      "fingerprint": "e99fab6b152a25b28edd3a5a9ef36197_0",
      "old_fingerprint": "a7e142b187f807b41e11d58727fd00d7_126",
      "code_extract": "                    connection.prepareStatement(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01003.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01003.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "f15712068b4accb3ee1fa6f43b9e61d9_0",
      "old_fingerprint": "f3950c8a6e50fe9bca0b319bf9deaf61_127",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "2ffaf6168a6a0e6c741eb1b3db704ba3_0",
      "old_fingerprint": "cfd3ef3ff8e15e600fa392d25df7f3ff_125",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01011.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01011.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 72,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "b79fe27261af35493a971cf485218f02_0",
      "old_fingerprint": "382943ecd2b341560e096e1dbabe1111_115",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01012.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01012.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 72,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "937dc5c7ae5ddf823a340e0c3a607c88_0",
      "old_fingerprint": "273e8b5caeb8d96062ec2c98092122ec_114",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01083.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01083.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 62,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 59,
        "end": 62,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 59,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "bdc91779b182d769dd87d30558313fd9_0",
      "old_fingerprint": "010bcd59e6773e9e8a1de7ed0a5ce5d1_46",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01084.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01084.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 59,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "d3a9123126b8466bf50f2b479cb2cc5d_0",
      "old_fingerprint": "e1f731ba0d2c42c92b832cf7cae45e1d_45",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01090.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01090.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "b2e1c8f630a44bde3fe591c7b7a1a310_0",
      "old_fingerprint": "1403a435dc4eb1c86cb8662765e1ed0d_41",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01091.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01091.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql)",
      "fingerprint": "3f0f166b7873ee5bba9fc8691e652f43_0",
      "old_fingerprint": "4388a8ab7625f4c3111463dee04a86d2_42",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01092.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01092.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql)",
      "fingerprint": "b80bd7b34aaec7bfe071d0258aea3b75_0",
      "old_fingerprint": "92e021d4b0f5060119e63543b4fde15c_43",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01093.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01093.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "e8c1eae4b27901756067ce60d8fa117a_0",
      "old_fingerprint": "c500ef03872357fe7aa24ac76e96560a_44",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01094.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01094.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "46f222e35826115fb5db1629121c93c1_0",
      "old_fingerprint": "7cf8a7bba5a24362ebdd91e2fe5b60e7_40",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01095.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01095.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "8e134021e0ba3e2c00be433e0df1c956_0",
      "old_fingerprint": "2632674c8df4fda596f79f3470e9d92a_39",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01096.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01096.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "4ce9dce248515a008c4ab129abadf014_0",
      "old_fingerprint": "4d3c573cd7cc50f9a8ea0a203afab11f_34",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01097.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01097.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "6c2bac77b48e04a19b9055bc0e8bd171_0",
      "old_fingerprint": "4e4f5b3b9153dad4c6ae92474beff755_31",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01098.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01098.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 58,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "3cdc3272418e58dd5ffdf303713a6c56_0",
      "old_fingerprint": "5c0838f5069625fc0ba7467c645d456c_30",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01208.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01208.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 65,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 61,
        "end": 65,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "c6c474e3d60f966ed42692dbdcdd17b5_0",
      "old_fingerprint": "318d29a961409dbdcc2a4551dc23cd95_72",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01209.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01209.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "d97e4a36070c3f1959bf0f33dfb777d5_0",
      "old_fingerprint": "e893884ba3cd153062357afb9d6d3c22_67",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01210.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01210.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "80bc17eb026e8f6bcacf65932c87bf9a_0",
      "old_fingerprint": "e8ec62389fc128748caad940f96c7c14_69",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01211.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01211.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 65,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 61,
        "end": 65,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "18f0938b2a66df2ca4e85b63c858ad0e_0",
      "old_fingerprint": "1498c6cde382b7c0537a91375e35b79e_75",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01212.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01212.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 71
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 71
        },
        "content": "connection.prepareStatement(sql, new int[] {1, 2})"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(sql, new int[] {1, 2})",
      "fingerprint": "bec74b6de6d351150e2ab71d47b663a1_0",
      "old_fingerprint": "6159294643ab18d6b11c0963a7a96418_74",
      "code_extract": "                    connection.prepareStatement(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01213.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01213.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "d759c4383f2b7f016cc9f66527924e0a_0",
      "old_fingerprint": "85d41957a2ca51ca9661e6c20026af18_73",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01216.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01216.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "14eb3d0e189e3fd8f4954a678ad5bf63_0",
      "old_fingerprint": "ccc22ea4c4e1094132a7e7b8b02cd6f3_56",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01217.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01217.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "28766105e13c1b8631dda3b19085d7ba_0",
      "old_fingerprint": "63467cb8c8696e4cefa1871adb6fe29d_57",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01218.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01218.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "906d2b5fdf96b20ddc38920ea42e479f_0",
      "old_fingerprint": "18eaebe3df2ec10bef21139b2d15d3df_51",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01219.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01219.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "b1c7b1798be940a3e5b7ea5bb0d63a82_0",
      "old_fingerprint": "e38d0a07d65b529563edbf163639cf93_59",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01220.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01220.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "01be870bad999478794c68e09bbc2e08_0",
      "old_fingerprint": "7380d96a0d21191be787ff564fba01fc_60",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01221.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01221.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "5cbd787357b0443e0fa29a3b826e8eef_0",
      "old_fingerprint": "c5e69130fa9cd0285cd4c8200253cf0e_61",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01222.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01222.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "d5741ed974960f2479c784ec1f13b8ef_0",
      "old_fingerprint": "ce84a5d9b3e5ebffa9446f95e1109257_62",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01378.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01378.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "fdc9378f467263c64825d732f2c0cbc0_0",
      "old_fingerprint": "f7099ce4486a26541a1a795229fc579b_19",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01379.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01379.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "a34245882fb02e7ef686b29ad3877921_0",
      "old_fingerprint": "3ad0b62c04842b6ca7f12b1dc89a3787_38",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01380.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01380.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "77beee367837734b863598acd44d011b_0",
      "old_fingerprint": "d84f644c9080c8f18eda9491f9eed095_37",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01381.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01381.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "c638b212dc0f0f7029e03c2f2ce802ad_0",
      "old_fingerprint": "f9d543cf32b32b3f2d81cb8a6b2639d9_36",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01382.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01382.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "14f0750733edbcb22c0ac06de78d231e_0",
      "old_fingerprint": "8b4558119eb159be8a4d4314c5cdd5fc_35",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01383.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01383.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "690c90ac9a651d35fc119a444cb08818_0",
      "old_fingerprint": "f9a08d32431a5aa1da257c1ae7a064f8_18",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01384.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01384.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 71
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 71
        },
        "content": "connection.prepareStatement(sql, new int[] {1, 2})"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(sql, new int[] {1, 2})",
      "fingerprint": "98f1c9b7817da78bab137273fdc82f97_0",
      "old_fingerprint": "21dbbebc3646d9e9279c205c71cef546_33",
      "code_extract": "                    connection.prepareStatement(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01385.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01385.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "80b4857f1f9e5e50f1f5f6170e6dfa34_0",
      "old_fingerprint": "c45d8781b0d3697ba8d69f062a3d1d4d_32",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01391.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01391.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "91e6dc7510c3c756a7247c49f83cff41_0",
      "old_fingerprint": "2d344837fc551082228f9d5f5c455de4_8",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01392.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01392.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "553fcc1a8d6858edc656cb7ade875e13_0",
      "old_fingerprint": "6a5645f4b5e0c60563533c9cc5113d1d_16",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01393.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01393.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "cd385a4c93eaa222d3fb3be52caa9759_0",
      "old_fingerprint": "95b05edf2834a599ef28314ff22f55bc_14",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01394.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01394.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "f6b187d7c4f99820c2ce7dd0147518d8_0",
      "old_fingerprint": "f055d2e03db714adf18217386cf3ad79_13",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01395.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01395.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "c2f1752f918d668dc3022cac75bd306e_0",
      "old_fingerprint": "a75707e7babef0f10ad9933bf62deb17_12",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01396.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01396.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "b5de4594f6f1dca250ec2e0689312c1f_0",
      "old_fingerprint": "94bc4b70d0c8a67364719dfb199e0bf1_11",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01459.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01459.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 67,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "74581d984d7ff01d7d6b1a8da2f353b4_0",
      "old_fingerprint": "546ff1d48873276380885c355fbe7cda_90",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01460.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01460.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 71,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 68,
        "end": 71,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "a9dcdfd98c523a9a8af1ba2ce5512ce3_0",
      "old_fingerprint": "e870fd13a852332b1acbc0b06db1f4c1_103",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01461.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01461.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 71,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 68,
        "end": 71,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "2ac258301dfbdaf244331206fa13cc1f_0",
      "old_fingerprint": "8c1d7b1e0a557459c3c1d01f0f7e5645_102",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01462.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01462.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "27fa9c19246fbec05eff1c344bf5184b_0",
      "old_fingerprint": "c7d437a1bee175b2112c65e526da81ae_101",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01463.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01463.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "3d8d49187b8ea33e541554f74bf32f01_0",
      "old_fingerprint": "fa68344109f3a607dee9511453912675_100",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01464.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01464.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 68,
        "end": 72,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "46eea657d260a9337c0284dfa5c0f268_0",
      "old_fingerprint": "0b79f034cd3573169b2db39e07249c0f_99",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01472.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01472.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 67,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "258f2c1a678396627d64cf20bc0e0aea_0",
      "old_fingerprint": "779355ce8c01c8079cbcd6edd9d1392f_89",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01473.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01473.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 67,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "12f18493932b133ca4116865df43c15c_0",
      "old_fingerprint": "f09de45c99c35bdf9ee530c58a41f17f_87",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01474.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01474.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "abe5a834c4dcf395a09d7cabe7321cd3_0",
      "old_fingerprint": "81a0d8fc88a552507f1a3284915fbcfe_91",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01475.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01475.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "5ecdcbc12e79ebb7cf03add53d85ae29_0",
      "old_fingerprint": "54168b0fe88470c3b629145b72b252ec_86",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01476.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01476.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "99375cd247bcd124cf43fe1a8a7ac509_0",
      "old_fingerprint": "99a596805d877bcf335eac1942855fac_84",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01477.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01477.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "de78786ee9c295a873d9f2cc365a5b03_0",
      "old_fingerprint": "0aeb36f658c7dba8fc85899caf1f4c73_88",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01712.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01712.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "8c04ffc8b21feff3d6f7132086588a51_0",
      "old_fingerprint": "87f79efd8170e692e686909555572e5e_145",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01713.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01713.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "0324980c919b2ebff1b5e95907a89e8e_0",
      "old_fingerprint": "a70852f793684c181c5088da57c5b6e8_150",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01714.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01714.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "81ba2f45c4db660dd6e9a63a827f6071_0",
      "old_fingerprint": "8ff7eb6007316b0717a56352677086dd_171",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01715.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01715.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "db3b5176affaa69fff02477bb0410f85_0",
      "old_fingerprint": "0663c48597c2ac3dd757b2ac0dfcf60b_172",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01716.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01716.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "b6a4526bad90996e8c5ba0ab0c05a1b7_0",
      "old_fingerprint": "3d38b60ccc329027c4bb1b8b138781ad_173",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01717.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01717.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "5ae9e0036d472317b4cd6c03a95f6ace_0",
      "old_fingerprint": "2dad2f403bae12c7ea5c4e03ebfe798f_162",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01718.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01718.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "205ae704dea48183271a01502cf4c631_0",
      "old_fingerprint": "3b080bebc4737984c164cc694056d9a3_175",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01719.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01719.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "b708f1264e9db32969d9d6e3e627bcf2_0",
      "old_fingerprint": "e1f77db71401d5886d9af37a0a518bbf_170",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01728.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01728.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "d957b27d90afb950c87de1b80d859d7a_0",
      "old_fingerprint": "379217cd32b84350ddde59d21c7e05f6_154",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01729.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01729.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "1208e6fdbe87cc5f1fcf09011e0db659_0",
      "old_fingerprint": "f2976086ad7e724d4e5197ff0a284cc9_151",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01730.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01730.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "a7a3089b69b55d22b8d8a9df442a35b8_0",
      "old_fingerprint": "4e6a6749cc0a24216cc4eed976929145_148",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01731.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01731.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "fbfd92ac3729a7d845cfbdfc8303bcf9_0",
      "old_fingerprint": "8f26ec008fa2fb81dd2e60c16b5bbe16_159",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01732.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01732.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "8b1fad7922842da445bebd34916f61df_0",
      "old_fingerprint": "b10b8e630fd76d397eb5eed0b5ee4715_153",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01733.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01733.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "df3d54a289d59b2f3b11d7c291cbc670_0",
      "old_fingerprint": "b3b2a63eec12684aafddc37c711f3942_152",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01877.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01877.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 74,
        "end": 77,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 74,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "7d62e3b541a2c01d17038c3f4216fdd8_0",
      "old_fingerprint": "2ef9886f59ab97033608d44bc99c000e_130",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01878.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01878.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "d7c327a04369fe8390ee386a61e921e7_0",
      "old_fingerprint": "3dad54eaacb1f4f269ca6cb4517c1bfe_123",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01879.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01879.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 76,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 73,
        "end": 76,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "5d3a32a29d6306890f4f9c8afc9e54f2_0",
      "old_fingerprint": "c1239d331f04ed4aeebd9f0754e0c55f_122",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01880.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01880.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 77,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 73,
        "end": 77,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 73,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "5f3e627079f818ef06e956b280b9d5bd_0",
      "old_fingerprint": "3a0fcd85880e8151fc7740218fa6c769_124",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01885.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01885.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 72,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "0c3e91abfe868e995fa9836a948127ae_0",
      "old_fingerprint": "eb5a4ba0e7f636670fd9eed2e098cf3c_116",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01886.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01886.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 72,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "45375b48d6349ef79c6d93efc989019f_0",
      "old_fingerprint": "4f3ebdaa14e885fe31e256006810ef68_113",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01887.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01887.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "20313c968dd30d3574e1acd3b4f7fe49_0",
      "old_fingerprint": "6b2791929bdd22607e99ee8ca5109736_117",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01888.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01888.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "5af6dd721c097b5e1d12f3271b25d051_0",
      "old_fingerprint": "a3a702c50a1508065541fe30959fcc5b_110",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01889.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01889.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "88ff0fc287bcf6c0600be5ff85f04f95_0",
      "old_fingerprint": "5266e6e025271b39bdd06bf63e2554b4_111",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01890.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01890.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "46db6bdbf6ddc47178d2dba970b0ed8a_0",
      "old_fingerprint": "1ce1cbdeb0753d0844e93df95889858a_112",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01891.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01891.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 72,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "e365bdba0d6757842274489b51a7ade6_0",
      "old_fingerprint": "2d4c1b52aef9fab6cc00235fecced8c5_108",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01961.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01961.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 59,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "ca11d68b4f30be50ca6369236c74c16d_0",
      "old_fingerprint": "fecdcb3d2edb1d54abbffa357b30e109_48",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01962.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01962.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 59,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "a97467bf334a5ea469b9090370e297fe_0",
      "old_fingerprint": "301c840d2e2ab2e4ed241ffcc6ab2be8_49",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01969.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01969.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "ca7ba15e33286a41e700a4a05df3968f_0",
      "old_fingerprint": "265850b4c40d21f99ce18eab6eee4dde_29",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01970.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01970.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "0b12ff258f084cf2cfdc91f3f8e483aa_0",
      "old_fingerprint": "413acbbcc934cb054587f22db8004f39_28",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01971.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01971.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "515f1046252ae128deefcb3542de2d14_0",
      "old_fingerprint": "69f2a81e19595f57ca9c41c70ee291e1_27",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01972.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01972.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 58,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "16bd83b26041d9d785f5b1ff48ca6458_0",
      "old_fingerprint": "06b0158ceaa5ae2e7a23b416f57c90b0_26",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01973.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01973.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 58,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "ae43774fe1feb07e777c38cc7caa549b_0",
      "old_fingerprint": "5d694b465f88bb80877bb5126cda696b_25",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02087.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02087.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "93036d739c13f5e0224efec2bde0a16c_0",
      "old_fingerprint": "a597b43367697abc2fc6cefe52ab7be6_71",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02088.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02088.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "0a80f3e01b6ca1cf136098ecfe77e7e3_0",
      "old_fingerprint": "1f3ad0e837dec46ca81f70d4b5149f89_70",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02089.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02089.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 61,
        "end": 64,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 61,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "a9dbb8bf2fb4bc9de7eba83bdd33f199_0",
      "old_fingerprint": "216c63aa3acda5a769ff5398835ba718_68",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02092.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02092.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.execute(sql)",
      "fingerprint": "1ad2515dbd5bf8514e135e9e42164a6b_0",
      "old_fingerprint": "d044fbba6379b8029947241a19dac794_58",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02093.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02093.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.execute(sql)",
      "fingerprint": "7b088cd400573b023e0f241d9a84ec6b_0",
      "old_fingerprint": "b9c5b7eb4304797fd05d0aa2d4efc0fe_66",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02094.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02094.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.execute(sql)",
      "fingerprint": "988720a406df6f5f08baa17f2bb78478_0",
      "old_fingerprint": "c5906aaf822548a0929b41f8f79c1cc8_65",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02095.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02095.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 60,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "23fa9d052ee930809bc256bfdf251dc7_0",
      "old_fingerprint": "30d86dfe4b1f17f3750ae162c3b85b91_64",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02096.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02096.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 60,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "b144393745bd4fdcdda0ef376d24cea5_0",
      "old_fingerprint": "66c7b2b38321fb3c7675a3090e37f199_63",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02097.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02097.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "86e5fe01cc7904d663eb87895b1adfe5_0",
      "old_fingerprint": "04a915e36f77e53d72d8a294a361253e_55",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02098.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02098.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "9e8000ed00319ec34ce265f998706c28_0",
      "old_fingerprint": "bfb127d2c8c8eb523cfbd6c717866cd1_54",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02099.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02099.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 60,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "30a2019f2015e80d2d7a8561d31b79a0_0",
      "old_fingerprint": "620b5014148c22d26642ac16650c586f_53",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02264.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02264.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 57,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "cc9c7f998ee80c119582ad9f4a928a13_0",
      "old_fingerprint": "08e18fdbfd03df3cfe27fbc820572de9_10",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02265.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02265.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 58,
        "end": 61,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "1f4c40986199679cad67ee4321491b10_0",
      "old_fingerprint": "bf109ae2c69ccda591ff052880684d14_17",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02266.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02266.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "842f089e7df9af0e3cf151a353949581_0",
      "old_fingerprint": "7179079947a33affe2fc9fd090b493cb_24",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02267.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02267.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 84
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 52,
          "end": 84
        },
        "content": "connection.prepareStatement(sql)"
      },
      "parent_line_number": 57,
      "snippet": "connection.prepareStatement(sql)",
      "fingerprint": "3d336dd6a5d75cefb6e36d0fc931b563_0",
      "old_fingerprint": "a8d5a9e91354c106b731242dad041bee_1",
      "code_extract": "            java.sql.PreparedStatement statement = connection.prepareStatement(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02268.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02268.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "363a0437d722db4c1b8df5d6cfcc54c1_0",
      "old_fingerprint": "f9cfe6cf6752b66922c1faef3228bcf1_23",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02269.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02269.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "c023198289dd5965da0b32eb82e4c52f_0",
      "old_fingerprint": "c5faa75b170e3ded87af4f80d76c718f_22",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02270.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02270.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 58,
        "end": 62,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "9dc0468fbbca3c4a33b63e823dd03b21_0",
      "old_fingerprint": "19e9f08013cb2d6d2935e6e00b8ce1a2_21",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02271.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02271.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 71
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 21,
          "end": 71
        },
        "content": "connection.prepareStatement(sql, new int[] {1, 2})"
      },
      "parent_line_number": 58,
      "snippet": "connection.prepareStatement(sql, new int[] {1, 2})",
      "fingerprint": "f7fcb03cd250e35f188bee73b6350a65_0",
      "old_fingerprint": "dbbe361a07fa373206542cb34bf1b0d8_20",
      "code_extract": "                    connection.prepareStatement(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02283.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02283.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 57,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "2fd0bc93999d547db975cd736256b80c_0",
      "old_fingerprint": "3b12acfe4cbad6dbde2f19a44ae9d8c2_2",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02284.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02284.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "d5e15fffb91b24642db31c958b997c3a_0",
      "old_fingerprint": "f855f320602ad35013b9df57221ca80b_6",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02285.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02285.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "dfbe3f6494e5a86713972e6583543550_0",
      "old_fingerprint": "6abceda8ef6d3f4b587690f9f004d3ab_9",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02286.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02286.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "357b2421095e9bbe8f14c362b310de90_0",
      "old_fingerprint": "7601f3442c54493a7a77ff75b5fb80d7_4",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02287.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02287.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "71d0450afd895a82660bb277b20805b2_0",
      "old_fingerprint": "ce2910390154d2040b5cfa7a102b83c2_3",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02288.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02288.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 25,
          "end": 92
        },
        "content": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})"
      },
      "parent_line_number": 57,
      "snippet": "statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"})",
      "fingerprint": "0f69dbf62ede0a5f41a9285d2952ecca_0",
      "old_fingerprint": "ce768bef7bf1681a0017a5a2e412fc6e_7",
      "code_extract": "            int count = statement.executeUpdate(sql, new String[] {\"USERNAME\", \"PASSWORD\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02353.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02353.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "fac2a4b00c1d1aa0d374c053acbc04f5_0",
      "old_fingerprint": "7e4d0595c286a1b81f088f6f7c3e0e59_98",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02354.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02354.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 71
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 71
        },
        "content": "connection.prepareStatement(sql, new int[] {1, 2})"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareStatement(sql, new int[] {1, 2})",
      "fingerprint": "a4f0c0982a115f4f7f03fc7ed238e597_0",
      "old_fingerprint": "a6c8d2bc1650c949f1bed675d17080e6_104",
      "code_extract": "                    connection.prepareStatement(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02355.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02355.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 68,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "35bcc21964b4c43e5d702e0d4154b6ab_0",
      "old_fingerprint": "9f71316ed269f3d84a4a6d79c7fa3ab6_105",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02364.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02364.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 35
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 35
        },
        "content": "statement.execute(sql)"
      },
      "parent_line_number": 67,
      "snippet": "statement.execute(sql)",
      "fingerprint": "1ccc70bcf1dd6fed7c8938319e9885d2_0",
      "old_fingerprint": "c9a8c988e5fa1c08062e1d4b7772667c_92",
      "code_extract": "            statement.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02365.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02365.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 67,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "909934e00ae19c1bddced2084dc04414_0",
      "old_fingerprint": "1ce0d57a48b27bffcb62e19ff1a06cd7_93",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02366.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02366.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 67,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "2cf2c30187eb4b2990ed7802fac105cc_0",
      "old_fingerprint": "5b23ef3129ac102bc520413717a35b7d_94",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02367.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02367.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 67,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "63389982d9e1dc37847fd1d83f62d6e9_0",
      "old_fingerprint": "41342f176360003d4bc5e67f966d347c_95",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02368.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02368.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "da73258575a4db664a16ec50eac85747_0",
      "old_fingerprint": "23ee69e1f636900e6567c388a4b2a302_96",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02369.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02369.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 67,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "e6ff423bcf582821c673b2b839d3bfc3_0",
      "old_fingerprint": "f405b270a7f12f202a17bfc388d04610_97",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02625.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02625.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "7f606ef3dfd9e7f2fbbf5b0217d7a9a2_0",
      "old_fingerprint": "1a0ef7acafb46e4583e3148b05c9ccc1_155",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02626.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02626.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 79
        },
        "content": "connection.prepareCall(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareCall(sql)",
      "fingerprint": "ad323bd48f309d67a20e656e880090ef_0",
      "old_fingerprint": "18e267cd871f6c9679984b629b1cd495_156",
      "code_extract": "            java.sql.CallableStatement statement = connection.prepareCall(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02627.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02627.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "2013508696aa60f2dce0e481aa779979_0",
      "old_fingerprint": "fe4ea661b1f91cee744b2a1810f206ce_169",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02628.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02628.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "92011756d51d32fc093d55796784f554_0",
      "old_fingerprint": "9695a2ab21167989bea36379b22087f7_168",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02629.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02629.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "462b6ae66d67612a32945f5483ed92cf_0",
      "old_fingerprint": "25711d378ea71d5c90d0a438dd01598a_161",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02630.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02630.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "46028576b2839cb4693d1c08d392d5e2_0",
      "old_fingerprint": "862b81efd4a1953248fdf50bf0396847_174",
      "code_extract": "                    connection.prepareCall(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02631.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02631.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 84
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 84
        },
        "content": "connection.prepareStatement(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareStatement(sql)",
      "fingerprint": "1c59dd814255738374423b7a9a07c123_0",
      "old_fingerprint": "2d1e8f72be08e04cc5a93e4ba8cfb0a1_144",
      "code_extract": "            java.sql.PreparedStatement statement = connection.prepareStatement(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02632.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02632.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 84
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 52,
          "end": 84
        },
        "content": "connection.prepareStatement(sql)"
      },
      "parent_line_number": 77,
      "snippet": "connection.prepareStatement(sql)",
      "fingerprint": "d0fe7c01ce91b5bc12c42a800b54fdba_0",
      "old_fingerprint": "67537e44da7631f9438db3844dde1671_160",
      "code_extract": "            java.sql.PreparedStatement statement = connection.prepareStatement(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02633.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02633.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 95
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 95
        },
        "content": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "9bb51fb00e94392b7ad470856da8bd17_0",
      "old_fingerprint": "188006fab9a85502ed79bd9b1075b838_163",
      "code_extract": "                    connection.prepareStatement(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02634.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02634.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        }
      },
      "sink": {
        "start": 78,
        "end": 81,
        "column": {
          "start": 21,
          "end": 65
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY)",
      "fingerprint": "592e481ae5992cada723f9c0deb83d54_0",
      "old_fingerprint": "1229f02f285bcca675e7bde25bd4facf_164",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02635.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02635.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        }
      },
      "sink": {
        "start": 78,
        "end": 82,
        "column": {
          "start": 21,
          "end": 72
        },
        "content": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT)",
      "fingerprint": "81b2430c486b74b910fc0534fad174b8_0",
      "old_fingerprint": "c5d6af11504cd08d6b2dce40dff17360_165",
      "code_extract": "                    connection.prepareStatement(\n                            sql,\n                            java.sql.ResultSet.TYPE_FORWARD_ONLY,\n                            java.sql.ResultSet.CONCUR_READ_ONLY,\n                            java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02636.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02636.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "3c257436f422ce07ea820870fe678533_0",
      "old_fingerprint": "9fb7f25975c7478b343f9893915bf9ec_166",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02637.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02637.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 21,
          "end": 90
        },
        "content": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})"
      },
      "parent_line_number": 78,
      "snippet": "connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"})",
      "fingerprint": "09cde3ed711a5be6edf2248c67b6c216_0",
      "old_fingerprint": "f871d78381d67b273c3e93e08cbdf7b4_167",
      "code_extract": "                    connection.prepareStatement(sql, new String[] {\"Column1\", \"Column2\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02647.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02647.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 36
        },
        "content": "statement.addBatch(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.addBatch(sql)",
      "fingerprint": "36f7ff1fcdc1e7aeeddee4fca0fbd8d2_0",
      "old_fingerprint": "a2444693d04f40880cef5b95d6dbc1bf_158",
      "code_extract": "            statement.addBatch(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02648.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02648.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 77
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 77
        },
        "content": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "45fad317f79fa1c50ce1cfd0ec469fa8_0",
      "old_fingerprint": "3c01c47f259ca23d08aa31db5825ea8d_157",
      "code_extract": "            statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02649.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02649.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "86e9fe696d63c5946fc824d85cc72ea0_0",
      "old_fingerprint": "6ee839ca3cf091f119336ba4d32f8f07_142",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02650.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02650.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 53
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 53
        },
        "content": "statement.execute(sql, new int[] {1, 2})"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, new int[] {1, 2})",
      "fingerprint": "067bffc0b1f01c0b78f5f90d8bfbd806_0",
      "old_fingerprint": "4cb4a7188c1637dd8abe27b0680500f4_149",
      "code_extract": "            statement.execute(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02651.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02651.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "753c950949f2eec92ad864efc6a324c3_0",
      "old_fingerprint": "3b7085efea42ecc884f3b3ac057fc046_136",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02652.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02652.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 74
        },
        "content": "statement.execute(sql, new String[] {\"username\", \"password\"})"
      },
      "parent_line_number": 77,
      "snippet": "statement.execute(sql, new String[] {\"username\", \"password\"})",
      "fingerprint": "24f5f864b0bcb9f79da0649ef971cfbb_0",
      "old_fingerprint": "78bde1718ba7b6e2981c4ded4b159524_141",
      "code_extract": "            statement.execute(sql, new String[] {\"username\", \"password\"});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02653.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02653.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 64
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 37,
          "end": 64
        },
        "content": "statement.executeQuery(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeQuery(sql)",
      "fingerprint": "f42251d4b249d0a8f8250df854e52781_0",
      "old_fingerprint": "d6a244b3be8b813902d54b8b98e54d5c_137",
      "code_extract": "            java.sql.ResultSet rs = statement.executeQuery(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02654.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02654.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "195b81f521e2d00cd86db3b9bb950128_0",
      "old_fingerprint": "c9c2775e28f2f831fdb428f6d92b1206_138",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02655.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02655.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 53
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 53
        },
        "content": "statement.executeUpdate(sql)"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql)",
      "fingerprint": "1a654763da4d8b92bf9dc0a181a3de1a_0",
      "old_fingerprint": "db8b8a9addd54e9f40799293414c943e_139",
      "code_extract": "            int count = statement.executeUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02656.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02656.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 95
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 95
        },
        "content": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)",
      "fingerprint": "0764b3ada987b196d237792b4a90fa9d_0",
      "old_fingerprint": "eed2f4485cdbf23e806e3a893ae40b1f_135",
      "code_extract": "            int count = statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_lang_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  Statement stmt = conn.createStatement();\n  ResultSet rs = stmt.executeQuery(\"select name from users where id='\"+ uri.getQueryParameter(\"user_id\") \"'\")) {\n```\n\n✅ Instead of using dynamically crafted strings for your SQL queries, use prepared statements instead\n\n```java\nmyStmt = myCon.prepareStatement(\"select * from students where age > ? and name = ?\");\nmyStmt.setInt(1, uri.getQueryParameter(\"age\"));\nmyStmt.setString(2, uri.getQueryParameter(\"name\"));\n```\n\n## Resources\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02657.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02657.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 71
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 25,
          "end": 71
        },
        "content": "statement.executeUpdate(sql, new int[] {1, 2})"
      },
      "parent_line_number": 77,
      "snippet": "statement.executeUpdate(sql, new int[] {1, 2})",
      "fingerprint": "97cf13ad3edbbe47c75287c60b4d896a_0",
      "old_fingerprint": "88ce342eb664383348c123d280f5abc3_147",
      "code_extract": "            int count = statement.executeUpdate(sql, new int[] {1, 2});",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9ddac7f2d05842998dfaad11b98ff08a_0",
      "old_fingerprint": "6ed8e9c5a29391f692aac8a72e4b651b_45",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00019.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00019.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 72,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c1b4d7b5c7a4a303f68b27ecc91622bf_0",
      "old_fingerprint": "5be4f6be2e89ce9d7c87b917bf6443a9_0",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00020.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00020.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 81,
      "snippet": "c.doFinal(input)",
      "fingerprint": "119b8760b2d8b8175e5b9a482b2fd2d1_0",
      "old_fingerprint": "48fc9ddae4d48cedb4950ad3f2e959ae_20",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00035.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00035.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9163934a23bdb461be27983fa49e0695_0",
      "old_fingerprint": "47611adbe4c6acbdd6d00c66b06db103_57",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00050.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00050.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 82,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d4ce68fa677f8c1c2b559705df37e1c7_0",
      "old_fingerprint": "fa41bdc8a9c9819651b342742331198e_23",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00053.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00053.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 108,
      "snippet": "c.doFinal(input)",
      "fingerprint": "1de8b785e7538f241422766311cd6267_0",
      "old_fingerprint": "98d3ecbee547e18f5a5d74913e1a8eeb_127",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00055.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00055.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 101,
      "snippet": "c.doFinal(input)",
      "fingerprint": "3c63d38493e32e5abd130559b8e2d9b8_0",
      "old_fingerprint": "34a607677c1d2091ed97be14d7c51e5c_108",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00056.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00056.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 111,
      "snippet": "c.doFinal(input)",
      "fingerprint": "64c2a9789eeeceb7c9629d3b02f47190_0",
      "old_fingerprint": "c08375cdac3db8b4c08a970c4c413627_129",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c4b9a174ee10ad01b77eff93b2dba00c_0",
      "old_fingerprint": "260c181f72710f8a13a858a9e2d0cfa4_116",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00119.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00119.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 109,
      "snippet": "c.doFinal(input)",
      "fingerprint": "43b8f61577acb0c6eeca4074951d9388_0",
      "old_fingerprint": "e5ca4ae95604530dfba0628460186897_128",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00120.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00120.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "7dabdbc1e1666bbb5a8a0d9117ca830c_0",
      "old_fingerprint": "ff8a7cb92c04cf2fcb07bcc60f98d772_86",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00123.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "1ab130f09d9a6f5c66d923e8519ad01a_0",
      "old_fingerprint": "1dc7deaaaf1f572e67f7061d3d4d26e6_56",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00124.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 92,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c915bff169661394a43a59711f2bfcd9_0",
      "old_fingerprint": "c7c5dca5a246d2ae3d74decaa9085bc0_81",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00125.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d0a1d024c9c8bef475858fe31cb28777_0",
      "old_fingerprint": "95663f6e3de7c8e7c282feea93c532db_55",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00208.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00208.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 102,
      "snippet": "c.doFinal(input)",
      "fingerprint": "988e411165250bf9d2a6219346b7165f_0",
      "old_fingerprint": "c5b7053b41ebbbc42a4bbf5f8da190f9_109",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 100,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00210.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 100,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f559bf9f45773438f89da7a526402928_0",
      "old_fingerprint": "886e7a3b11a1a35e8e3cd8a3bf2bc1dd_106",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00254.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00254.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 98,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d8bee2d855e2b18d08573b3cf64b061e_0",
      "old_fingerprint": "643d7c25b1b7096ae85dffadf4a2e2dd_102",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00256.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00256.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 99,
      "snippet": "c.doFinal(input)",
      "fingerprint": "02bae7ef60c21425c4158d265e0e864f_0",
      "old_fingerprint": "1a8bfaaae57bb5526952fc2d9aac7f6d_105",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00257.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00257.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 90,
      "snippet": "c.doFinal(input)",
      "fingerprint": "76b1ac9eafbea1e20bca73d069da3ff1_0",
      "old_fingerprint": "49c492911065df26fc161d7aaea3d1f5_73",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00258.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00258.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "533dbf1d5ded0cf364c84542f862ccce_0",
      "old_fingerprint": "8746b95c77e4dc3b2a35e79f159c3e9e_71",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00354.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00354.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 81,
      "snippet": "c.doFinal(input)",
      "fingerprint": "56feb9c13c50710ceb3157a673ec5d07_0",
      "old_fingerprint": "3cda586e6856e7b3c48fdd1540b0dd57_17",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00355.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00355.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 94,
      "snippet": "c.doFinal(input)",
      "fingerprint": "81b9064fe15dbfaaa17f62b3e1e811a8_0",
      "old_fingerprint": "5619925824b691e5e3b15c05cee3ee5b_90",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00356.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00356.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 79,
      "snippet": "c.doFinal(input)",
      "fingerprint": "24f02cb0946ca26fc7fb753702f27697_0",
      "old_fingerprint": "17e37bdd994b98410c61493fe83b6546_12",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00445.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4190505ea548305e5a2c1437fe303382_0",
      "old_fingerprint": "f3a48879ce4c7ebf9c0121521b05d36c_121",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00446.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "b1d8adb045f5fa04dff996aa7ba62074_0",
      "old_fingerprint": "b3911856509bb41d5eb3d864fcf3a3cf_79",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00448.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00448.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 83,
      "snippet": "c.doFinal(input)",
      "fingerprint": "2ed3da24fc112dbf3e607384f636b8a4_0",
      "old_fingerprint": "f069528bffba68a16d32a7c96961c37d_27",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00449.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00449.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 81,
      "snippet": "c.doFinal(input)",
      "fingerprint": "1182a0b0c8878563bac1e059b37f00c4_0",
      "old_fingerprint": "28de8261596e30285d9f293fe88835be_19",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00521.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00521.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 103,
      "snippet": "c.doFinal(input)",
      "fingerprint": "a855514d724b989a48ea691f041d9743_0",
      "old_fingerprint": "443c3d3a0edf5a2e93a0b2574f9b6a08_114",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00522.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00522.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 101,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c4d1d9dce38c1c09c525463b3424c514_0",
      "old_fingerprint": "57893071984aac8375d1faee2b1463cb_107",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00608.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00608.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "3c0473d8f09e608c200c9138f8eaf8d9_0",
      "old_fingerprint": "dee70c73ccd2a2ae721fa667f1f4acf8_93",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00609.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00609.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 88,
      "snippet": "c.doFinal(input)",
      "fingerprint": "3d31404b3f096b046c3ff6179aa96897_0",
      "old_fingerprint": "9a443bfdfdbf716ea683bb5844892c0c_60",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00610.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00610.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 107,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f274200512c901c15b6d6f5fe2fe87ed_0",
      "old_fingerprint": "6554835defb549ac42f7ae9edadc8874_125",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00611.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00611.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "907c75a921756f8968fdcd9e8716864c_0",
      "old_fingerprint": "1295261df7eac8a06e12d6b48feb2169_77",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00614.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 94,
      "snippet": "c.doFinal(input)",
      "fingerprint": "0dffea4042aeb25d2bfe508400771ea1_0",
      "old_fingerprint": "b207addfb413199d3419aae3f5091d72_89",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00615.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 90,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9d1a80e3d70e28d3c3f75b5d7ad34ca4_0",
      "old_fingerprint": "c4f09ba8919c3faf7b670c9274d91d78_74",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00616.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00616.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 76,
      "snippet": "c.doFinal(input)",
      "fingerprint": "0107ca7728a9e4bc6acf0dbd6920449a_0",
      "old_fingerprint": "5306cad2a7eb2ac48a0b7fd39dcb6378_7",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00617.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00617.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 77,
      "snippet": "c.doFinal(input)",
      "fingerprint": "28c35dadfadc077031c0be69b1c44d12_0",
      "old_fingerprint": "6aba44224a184822d749b6ecc2199e38_10",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00684.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00684.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "943339cb2a6977ac7059c6744685f2a4_0",
      "old_fingerprint": "09252ceccdb9a1963ecdd1eb51a6ae3a_41",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00685.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00685.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 90,
      "snippet": "c.doFinal(input)",
      "fingerprint": "5c71253b5877c14d07edf69567e0ed2e_0",
      "old_fingerprint": "5303832c3d99c9921255f7995ac73152_72",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00688.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00688.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "57dd5207bfd929b3787644a6317d2754_0",
      "old_fingerprint": "f3f6cb25633a90103add9f1e60acaa8a_80",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00691.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 94,
      "snippet": "c.doFinal(input)",
      "fingerprint": "900cf635d433106466d20c8214ec7ed1_0",
      "old_fingerprint": "dbab345030b4a7904954021a66fda0c7_88",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00692.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4ee0e1113ffbf666ac03f36c5c6594d6_0",
      "old_fingerprint": "fd370ece25527daeda7f56341669a907_31",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00693.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "aef44b890dbc6d81fd9a61b97eb5569c_0",
      "old_fingerprint": "25a9714fe71452d6200a5e8de1b2db9b_53",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00779.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00779.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "cd0d11a1989de2aa2aed717917d31b32_0",
      "old_fingerprint": "98fa1381bb201df855d4d3957adbe1e6_120",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00781.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9731dd326844bab4319644e38a3cef15_0",
      "old_fingerprint": "031864cc3e70cf4c153033924f98d5d3_124",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00853.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00853.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "db4efbc72f9b14917c7cafd8c5983921_0",
      "old_fingerprint": "d4e752789788b5f04147f3d1f07b05ed_36",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00855.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00855.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "b3c7e6ca4724755b8ff6008f2081449d_0",
      "old_fingerprint": "509569d72074a5204e5471c527cd346d_84",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00856.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 103,
      "snippet": "c.doFinal(input)",
      "fingerprint": "73d94dfa1298f0d620f30a1338e71b96_0",
      "old_fingerprint": "bdcfb0c1bb4ab1390ed5f423fd9bcdd4_112",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00857.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 102,
      "snippet": "c.doFinal(input)",
      "fingerprint": "ae3d62746255a3d91e70a6dc8d7514eb_0",
      "old_fingerprint": "feee9e92cd94144afc24c469524cc0bb_110",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00859.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00859.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 80,
      "snippet": "c.doFinal(input)",
      "fingerprint": "fa21c9cf508dd423ea98e89e9338cdfe_0",
      "old_fingerprint": "7955d9cb86e0125b6cac7f49099578af_15",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00945.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00945.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "107263250c3eab86d6eb9909127a14b5_0",
      "old_fingerprint": "2d7ddd2d47296d222c76342d12c8892b_85",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00946.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00946.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "09af7fe8756ef7cd4f895c55ee924726_0",
      "old_fingerprint": "417e98bb669265fb77b56accbff110d8_82",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01015.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01015.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "ae1e1e1e228f82d32b6e7f93165bee48_0",
      "old_fingerprint": "22556557fbb06d8ecdf3c77f12efb4e0_70",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01016.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01016.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9dc12e2dba2e1d620db01b9e8fb93e0c_0",
      "old_fingerprint": "33823a16e55335a6e29f4d17207dac81_52",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01017.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01017.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "02c860afff272d1a72e07c29ce2cfae1_0",
      "old_fingerprint": "076ef3410d998daecfc9c16ca74771b6_48",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01018.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f8136de3664da54975fc2bc1ea40ee98_0",
      "old_fingerprint": "e2d0485342bf97a34d492248f415dd48_54",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01020.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01020.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 79,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c58fac976302fdf6e619f76cd25d79ce_0",
      "old_fingerprint": "d8481076a2094545b6ae95f7466b3f59_13",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01099.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01099.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 99,
      "snippet": "c.doFinal(input)",
      "fingerprint": "ce4215274ced9807e9b8b8369947f8bb_0",
      "old_fingerprint": "9e0dd2121854d6e28063f69a083fb2c1_104",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01102.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 97,
      "snippet": "c.doFinal(input)",
      "fingerprint": "52cfa88c179e6448725e69b91ed7dff0_0",
      "old_fingerprint": "859948994fbca63ce314b82ff8c60b71_100",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01103.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 97,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d66a65e01045ab42d3582b8908adbc00_0",
      "old_fingerprint": "7b0e3cde35383d6354caf6e58b9a50b0_99",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01105.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01105.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "07594bffa2d6fafb623b840d47bcc1e7_0",
      "old_fingerprint": "defbd83f20bf81b51d265189f9bb7dcd_66",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01106.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01106.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d5c873a84ff3d12bb73783d74e94326a_0",
      "old_fingerprint": "0019b5f58404066e9dab4e0b4a5623ed_64",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01107.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01107.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "cda62c4cfb0a1fdf1d52ba01ed712fa9_0",
      "old_fingerprint": "f1303c2cb22e95b87424fccd4ae83c9c_69",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01148.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01148.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "348f2c64d469ef95989e1dafb1a5c48a_0",
      "old_fingerprint": "309d2a7ce5fe990af01ab9a1ee6411bc_63",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01149.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01149.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "a32d1070574db8931e87dbd09ade6481_0",
      "old_fingerprint": "89b66a578e131ad0980cf0bf4ad40cc6_61",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01150.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "a266a4cdad4ca48f933b4da302f7c4e6_0",
      "old_fingerprint": "ab629a10e17dafc8e5ccc2b7e5998002_65",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01228.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 82,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9c88cb5b20e8a32682724516809f4735_0",
      "old_fingerprint": "730745be1a76e67b8cb8721075a3c300_24",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01229.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 82,
      "snippet": "c.doFinal(input)",
      "fingerprint": "199efcf5e07133dc6eeaf1fda5906ca3_0",
      "old_fingerprint": "6884ac6ea21eda2858ff39ee082b7f14_21",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01230.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01230.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 74,
      "snippet": "c.doFinal(input)",
      "fingerprint": "e0a06a80c381df2ffa2c5a147c40c537_0",
      "old_fingerprint": "4a87b0822e2e86ab1730f3ab51f2d523_1",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01317.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01317.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 88,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4aa900426b1a705881858f79a8260fc6_0",
      "old_fingerprint": "2a262412e9790f3aafdc3d8b650179fc_59",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01318.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01318.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 88,
      "snippet": "c.doFinal(input)",
      "fingerprint": "462d08f0bce88576a270fc114560bbc5_0",
      "old_fingerprint": "81cba06769869ffd46a300e5f36efb69_58",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01320.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01320.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "04b49447dbe3311ccfcddff55563c7ce_0",
      "old_fingerprint": "f2b21b36b98fb6cc1a30f63a4edc4444_39",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01322.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d7d56630b699ab11a424ad4f934cfc75_0",
      "old_fingerprint": "17a34c384e11ccf23bce59fa668df840_40",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01323.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4845ca9de317d53e021d641a695b3cfa_0",
      "old_fingerprint": "cfee60c252e2d5f9195fd17378bc49d1_42",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01325.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01325.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 78,
      "snippet": "c.doFinal(input)",
      "fingerprint": "81539499e09f6130e90ea65bb478f2a1_0",
      "old_fingerprint": "74845bc930b0986300dd01ad0197fd52_11",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01398.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01398.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "6da6d9a1c0e6f4bd9c60c4e4e3904de7_0",
      "old_fingerprint": "616d1c108ef12af976deeec5562e23be_94",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01480.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01480.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4d8ce68ad1cbcf1e4f3f513013f5013c_0",
      "old_fingerprint": "2a6bf8abd8343c3cc43f01d026eb811e_46",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01483.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01483.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "b62aa75ff9c5a7261995c3d2a9022dbd_0",
      "old_fingerprint": "72cb98d07284d3e807e520fa210c0c59_32",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01484.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01484.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "0699090c75d1b152b655dafdc46d29e2_0",
      "old_fingerprint": "abf076b377bbf9887e8be0c81bc2988a_28",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01486.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f997de0b4d837fb78ff3e164b77ab9c2_0",
      "old_fingerprint": "b483c7cfe1b4f01748bd98ad1a88aed2_29",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01489.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01489.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 76,
      "snippet": "c.doFinal(input)",
      "fingerprint": "7a806ce2a94536b55ede556079ca78f3_0",
      "old_fingerprint": "79f6bd152262f4e012ab4a9ee3c530c2_8",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01565.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "89c836c09ef881c052f6db8dc6b5a56e_0",
      "old_fingerprint": "475e60937d76ff0fac833d588d4d9a60_30",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01566.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01566.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 76,
      "snippet": "c.doFinal(input)",
      "fingerprint": "3ad5eaea8e24632ccfdfec467aa0fc89_0",
      "old_fingerprint": "0a11eaad3cb8fd2e263874a405daa077_6",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01634.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01634.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 108,
      "snippet": "c.doFinal(input)",
      "fingerprint": "ed5cbadae31ab375a27976d9669aff9c_0",
      "old_fingerprint": "453f5f39e2033918a0af266c9b8cdbc4_126",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01637.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01637.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "42dd8f06d998e1e4fe5ea4b087e942e1_0",
      "old_fingerprint": "185328d5e4eccca6501eb2c773c2dff8_119",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01638.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f453f2b8e78ff769c1a1ba2c8aeb36c5_0",
      "old_fingerprint": "563c4642605502e5ad54f5f36914e03c_117",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01639.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "129c611681e7869b77480290cf3a4992_0",
      "old_fingerprint": "eb424b254f09eec6fb1b0d2832e125a4_118",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01641.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01641.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 98,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9183bb2bd0fc63282414244d52438f39_0",
      "old_fingerprint": "95cc3a5485a1cd0c21c929d80309408c_103",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01740.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01740.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 75,
      "snippet": "c.doFinal(input)",
      "fingerprint": "a5a890bf30f3429dfe342f409c613b65_0",
      "old_fingerprint": "9cea8ffe1f57756fb61b1fd4e82115ff_4",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01741.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01741.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 75,
      "snippet": "c.doFinal(input)",
      "fingerprint": "eea4e4dd2a61af255b59c5cb77abb3fd_0",
      "old_fingerprint": "4d7f3ca4784a5f00002e39a75b701fe8_2",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01742.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01742.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 75,
      "snippet": "c.doFinal(input)",
      "fingerprint": "2146e01dad3cbbf3c0d6769fd8d352fd_0",
      "old_fingerprint": "0761c68c52a284f6ab13ccec4f229da5_3",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01822.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01822.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 103,
      "snippet": "c.doFinal(input)",
      "fingerprint": "21a75771ae12f1f7fdfacb663dcd6e53_0",
      "old_fingerprint": "d3c7e805a151e1407b4b662665a06401_113",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01823.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01823.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 103,
      "snippet": "c.doFinal(input)",
      "fingerprint": "df4b9334ca75e71c12040369dcd5d5a2_0",
      "old_fingerprint": "2bc26fa0dd630a0458baae6935616011_111",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01829.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01829.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "5756e3447359b24985947732b57c8aa5_0",
      "old_fingerprint": "ac52813f204c4a782d05d426a72098fd_83",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01830.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01830.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 93,
      "snippet": "c.doFinal(input)",
      "fingerprint": "fc3cc73a9111136ba318cfda5802ea73_0",
      "old_fingerprint": "cfe4f919ef6a852dc36882eab9fe2e89_87",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01895.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01895.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9a31db82ee8168bde2a4c396c1f875d6_0",
      "old_fingerprint": "9e868cd0ff69a268b92d8b89ea552c69_51",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01897.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c54b2caf04847dbcd5da4f0a9b8f6a3e_0",
      "old_fingerprint": "817bcddf418a0469a28688b8e4ad4116_50",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01898.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 87,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c4cbbbf02b080a15b38ef57ba116b081_0",
      "old_fingerprint": "93db97ea2b67798c5fca9baa2682b62f_49",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01900.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01900.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 79,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c730cc1f3c15429173b345ecd15e7f59_0",
      "old_fingerprint": "a4c7093c8d487516526931a19f54adff_14",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01978.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 97,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4fd314c4becaa286047eb920305d271c_0",
      "old_fingerprint": "dbe29dc351d366e8d9ec61f5e000fa42_101",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01980.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01980.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "6f5cbee34283dde67d55f37618d0e805_0",
      "old_fingerprint": "cb1320e16be5858a663fb5d56b3826bb_67",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01981.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01981.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "6f040283bedd241dab739fea304ed7ed_0",
      "old_fingerprint": "760fd9cda1348cdccb2079158cbdedcc_62",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02017.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02017.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "b8f2b30b84d9e5dca0141dfc3ab589ef_0",
      "old_fingerprint": "cd9141b4fd5455b40480b7b5421128be_76",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02018.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02018.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "7812e8ddc9ad66ce665144dcd1619630_0",
      "old_fingerprint": "b48fd32936ba7bc6f408cf8fda395136_75",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02019.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02019.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 91,
      "snippet": "c.doFinal(input)",
      "fingerprint": "5dc667728809c0fce2bee5c715fe84eb_0",
      "old_fingerprint": "4767e554ecb7b2936cb96b8fe6c03606_78",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02020.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02020.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 89,
      "snippet": "c.doFinal(input)",
      "fingerprint": "3a82f7affa1093d1bf24b67bd29a2585_0",
      "old_fingerprint": "4fc943f37f66424594f7bb9f667f37f1_68",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02022.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02022.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 81,
      "snippet": "c.doFinal(input)",
      "fingerprint": "5cb272cb91df62380d8d3aeb17585836_0",
      "old_fingerprint": "f5f60500596b37a106c52bc46a494079_18",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02023.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02023.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 81,
      "snippet": "c.doFinal(input)",
      "fingerprint": "2a841b7e03d01cd942b59f0ad7f1eb43_0",
      "old_fingerprint": "dfebe669adeedaa91bfc683616513ad7_16",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02101.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02101.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 82,
      "snippet": "c.doFinal(input)",
      "fingerprint": "33dd1a8047be1eb9b9709864926786c1_0",
      "old_fingerprint": "e74db3324116a2fa93d01539c2e782f6_22",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02192.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02192.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "8bafa8d6a0b91d3aa16e701189300979_0",
      "old_fingerprint": "d1c2f2a8ebfd33e807ce8a93ce2a5015_43",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02193.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02193.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "e4e52ee22040fd6b316df814e63577f3_0",
      "old_fingerprint": "fd1c73f9aa325167fa69e62333a27cf7_44",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02194.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "256bfc65c076dae6e6aaba13d3ca3264_0",
      "old_fingerprint": "e34b9586f59962f17abcb078f189e3c1_47",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02195.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "ed4379891c352c706dee3842e3aa8bec_0",
      "old_fingerprint": "68699c5739a3ca8564a4a767c2a15e97_37",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02290.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02290.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "340b3c53fbf40d35f8951d63a46ecd10_0",
      "old_fingerprint": "c1ae49aaedf4914246a7a4ae1c26e5e9_92",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02291.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02291.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "4f60f46d0644036c46d8dbe57c217903_0",
      "old_fingerprint": "10b7824f34541d3ec96ea9ba02703c99_91",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02292.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02292.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "03fe317bd2d47fd3fac59f784e8bf6e4_0",
      "old_fingerprint": "77bfd8962f108c00992514e09f7b2f26_98",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02293.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "e730845f75cc94c9135147077efc6fff_0",
      "old_fingerprint": "cefb2b03af7c537090496f4216ed0766_97",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02294.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "8aa24bf57221bc57d60b89db93bd2af6_0",
      "old_fingerprint": "7ad38b71a9550c63707aa11d064628a9_96",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02295.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 96,
      "snippet": "c.doFinal(input)",
      "fingerprint": "54ddfacbb5007ff8e82b52a7ad7a195f_0",
      "old_fingerprint": "07315fd49d9c5755c383ced7ae972c23_95",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02373.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "fac4532db57e3cf11903ec5cc589889e_0",
      "old_fingerprint": "129f8f26b128d7ca6b85b9511cfa12c9_33",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02374.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 84,
      "snippet": "c.doFinal(input)",
      "fingerprint": "fe3a2bb3d345da156df6e42cc10ea36a_0",
      "old_fingerprint": "a6aaa47610e7314109592cb0da5e464a_34",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02375.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02375.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 76,
      "snippet": "c.doFinal(input)",
      "fingerprint": "f4a8aae00554f7b0412d059413b34855_0",
      "old_fingerprint": "95be64815df66953d8ec655428444966_9",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02458.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02458.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 86,
      "snippet": "c.doFinal(input)",
      "fingerprint": "9c6bc86616670d3fc765adcebd1365cb_0",
      "old_fingerprint": "6f0ad3fb1a596436ce635f951dbaee36_38",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02548.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02548.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "be994535d760a09eca187a9e2670cef0_0",
      "old_fingerprint": "f564a61ee982ac6a6adb2b4d52c53f8d_122",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02549.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02549.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "caae1c2259979a283aaa46a05609cb99_0",
      "old_fingerprint": "e101317938f53f04e6b6e48a5f9a7957_123",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02550.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 106,
      "snippet": "c.doFinal(input)",
      "fingerprint": "aab706ab74dd8daaacb84a2ba71a9a41_0",
      "old_fingerprint": "8514d5aa67ca77c155358288ec6ea708_115",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02658.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02658.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 85,
      "snippet": "c.doFinal(input)",
      "fingerprint": "13983e642deac3689c1ca729bab2c6c9_0",
      "old_fingerprint": "3d91f93028654f6d172e7141296df91a_35",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02660.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 83,
      "snippet": "c.doFinal(input)",
      "fingerprint": "d38ec93e5f08604feb7994d5743a828f_0",
      "old_fingerprint": "7e230eadbaa7aa40bc8f5b18d9274e4a_25",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02661.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 83,
      "snippet": "c.doFinal(input)",
      "fingerprint": "c6718820aa9e133766b34c0db3d07878_0",
      "old_fingerprint": "bc200765a90e2fac020cf38a03e865d0_26",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["326", "327"],
      "id": "java_lang_weak_encryption_des",
      "title": "Weak encryption algorithm (DES) detected.",
      "description": "## Description\n\nA weak encryption library can lead to data breaches and greater security risk.\n\n## Remediations\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), DES (Data Encryption Standard) is considered a weak encryption algorithm and therefore shouldn't be used.\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n```\n\n## Resources\n- [Java Cipher class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/javax/crypto/Cipher.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_encryption_des",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02663.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02663.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 45
        },
        "content": "c.doFinal(input)"
      },
      "parent_line_number": 75,
      "snippet": "c.doFinal(input)",
      "fingerprint": "dcb1e4b659d5ffdcf9a9d8fb430a774c_0",
      "old_fingerprint": "25899903bfc368b10dc9db8845b465e5_5",
      "code_extract": "            byte[] result = c.doFinal(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00046.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00046.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 65,
      "snippet": "md.update(input)",
      "fingerprint": "71b26346a2040e9ee2bf34ced31ea3f4_0",
      "old_fingerprint": "d720300b6313b3f09fe228f666e13371_3",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00073.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00073.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 102,
      "snippet": "md.update(input)",
      "fingerprint": "e79fd7341b5dee446a297df807448c3b_0",
      "old_fingerprint": "31418c41e4f7fb0a802939b9443ce879_27",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00272.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00272.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 90,
      "snippet": "md.update(input)",
      "fingerprint": "ec8ead97f8a4c485e7ff6da92e916bbb_0",
      "old_fingerprint": "e4ff863910bc2526768984a6739dd713_25",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00372.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00372.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 69,
      "snippet": "md.update(input)",
      "fingerprint": "4d8217749bf904a1f3688c4d863855e1_0",
      "old_fingerprint": "25b506f47ebf86ac891403ed1eaa09e0_15",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00465.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00465.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "51bb283d1fc078fb269b532da09882b6_0",
      "old_fingerprint": "c81dd7cb02c68aa89b2d7e1de569c658_16",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00536.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00536.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 83,
      "snippet": "md.update(input)",
      "fingerprint": "89ac5789ddca3feb277c22fcdc848790_0",
      "old_fingerprint": "b712a7cafd77818c8dc78b3f7a542c45_21",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00537.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00537.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 78,
      "snippet": "md.update(input)",
      "fingerprint": "609cd953c1b9bab42b59c0d791324ee3_0",
      "old_fingerprint": "904945b21287f050b99aa10791c9bae1_20",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00637.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00637.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "886e7c4380c2506085797d5ba9ef6e4b_0",
      "old_fingerprint": "bf357f85077c0432fc20abc73b705e78_17",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00708.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00708.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "0f4dd496782addc9e5b3c5b17f6779fb_0",
      "old_fingerprint": "bf18aaa0a54eb2ec53ab8c7fa647f35b_12",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00794.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00794.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 91,
      "snippet": "md.update(input)",
      "fingerprint": "1b1ad112e11a7ade283e704844dca01f_0",
      "old_fingerprint": "83ade14ab81cf88c37ffaa40add1a80f_26",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00963.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00963.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 83,
      "snippet": "md.update(input)",
      "fingerprint": "1fe33147fc8c15a87260e96ef995b027_0",
      "old_fingerprint": "603edc920f6e80b24041cb7f1c4ea8af_22",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01038.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01038.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 69,
      "snippet": "md.update(input)",
      "fingerprint": "831db082da6ed471926ecedfa39bf021_0",
      "old_fingerprint": "4a94f35b36c3bae11c635370df0b1ae6_14",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01167.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01167.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "e87e3a8c4e130e887be7cbc6a1749637_0",
      "old_fingerprint": "8ea55134390328fee8cc5431fa318162_18",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01247.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01247.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 64,
      "snippet": "md.update(input)",
      "fingerprint": "6a169359ed820893456a822f295a35f7_0",
      "old_fingerprint": "1e2133f1a43570a7e785c0a0f5ad7651_0",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01333.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01333.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "c1a24eb1a57f41beaf5d3192678de5c4_0",
      "old_fingerprint": "c51b2d8c026fa6f76a42bc1d78f51a3b_10",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01334.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01334.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "11a64f73de0de77a2a27fd13fed00eeb_0",
      "old_fingerprint": "3e654a37052649a6d45a432f12ac1e63_13",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01504.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01504.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "e9d128dbe96a33b8ff691e29770b9f64_0",
      "old_fingerprint": "9b62a0bcdd2e114a8c5ff6431722ae40_9",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01577.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01577.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "733aa2af493a460ed46c13f7a2ad0900_0",
      "old_fingerprint": "4b39de3d39bb0ea5efc32a5f0185ff14_8",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01653.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01653.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "5a083ed805e40e5701226b4b47236879_0",
      "old_fingerprint": "61863ea09c898c32ee1f5dcf30fc4dbf_23",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02217.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02217.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "282d09412e304eea24190b4b063bb37e_0",
      "old_fingerprint": "8afa42c0f04556006a2669fe2dffd389_11",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02311.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02311.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 78,
      "snippet": "md.update(input)",
      "fingerprint": "6fde3c0cbc5232396ddb6f7ccce5c63d_0",
      "old_fingerprint": "5f3ed1a7e4c7378596e8a188a366ed99_19",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02387.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02387.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "fd7d9b4c5a5eff43a317faba9777d90b_0",
      "old_fingerprint": "fa8bae4ae62fce5f470fb93fbbdbfa47_7",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02388.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02388.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "cab1ae16f93236b86b1f144d815235af_0",
      "old_fingerprint": "70a71a044e88816fed0abb9b961587af_6",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02475.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02475.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "58284529ea429718e0fedb30aacc2702_0",
      "old_fingerprint": "517930f8ebffe8086a4a44a10ee4f654_5",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02476.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02476.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "dbb810a2fa8ba9fbe6671557ff64b975_0",
      "old_fingerprint": "cdede35602c1f0d8b8d3afb6415cfccf_4",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02575.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02575.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "faa5326175dc80aeb446a4dbea46d13e_0",
      "old_fingerprint": "35643e7b29fe55275210048ee6ed0b1f_24",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02674.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02674.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 65,
      "snippet": "md.update(input)",
      "fingerprint": "404b47530918fdfc1e00517ecbf145db_0",
      "old_fingerprint": "aa604f6eefc827e2885aad118eaf2123_2",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_md5",
      "title": "Weak hashing library (MD5) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), MD5 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"MD5\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_md5",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02675.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02675.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 65,
      "snippet": "md.update(input)",
      "fingerprint": "68603115e8d689a2a72a553b606c2143_0",
      "old_fingerprint": "3f679cf3c1351759ecb3e018156c174f_1",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00070.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00070.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "f090ce24d8ec798fb13e45fbde11cd11_0",
      "old_fingerprint": "5909d4ece5a08d3725bd21b680beb6f2_50",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00071.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00071.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "bd1925bfa8c8eb615670cfbef47111ef_0",
      "old_fingerprint": "3bfcd1a4d240515d48fe55786f1ba074_44",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00141.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00141.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 82,
      "snippet": "md.update(input)",
      "fingerprint": "503fa7abc507fbd446d9bce85e16471a_0",
      "old_fingerprint": "b5c9013b0287df912d082b796621b529_36",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00223.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00223.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 92,
      "snippet": "md.update(input)",
      "fingerprint": "6e6de7f76b189ea5978da8681006a04f_0",
      "old_fingerprint": "30a2762e0a0114fe2f27e79e10c1a00a_56",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00266.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00266.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 84,
      "snippet": "md.update(input)",
      "fingerprint": "48eac44a1f9c4ad23a0bfdabbc4373fc_0",
      "old_fingerprint": "ee959b4469add5feec709664662ebe6b_39",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00267.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00267.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 80,
      "snippet": "md.update(input)",
      "fingerprint": "b311087d24a479148ea0bb839743ba0b_0",
      "old_fingerprint": "f356b3e154eb835c19fb24402838fd54_35",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00268.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00268.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 76,
      "snippet": "md.update(input)",
      "fingerprint": "74e3fbbea7f926fc702d9ba7619d9e1e_0",
      "old_fingerprint": "933359b49f3c020d240cd6e73273aaf1_28",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00269.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00269.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 76,
      "snippet": "md.update(input)",
      "fingerprint": "2624d795ea1386fc8bd9a0ce159c7c7f_0",
      "old_fingerprint": "4aaa8e4b5a1b62084e66baaacb2a02a2_27",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00346.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00346.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "81ce40bfb4a12da846cd6a2eaaae549a_0",
      "old_fingerprint": "64ebda351701c4b222224e9b473a37f7_16",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00371.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00371.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 69,
      "snippet": "md.update(input)",
      "fingerprint": "a2ef22eeea77a5c92f6ef4fdc4b346df_0",
      "old_fingerprint": "bfa8740026d1041679e6c78eb20755d9_11",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00462.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00462.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 86,
      "snippet": "md.update(input)",
      "fingerprint": "c774b882b73c82435171df41c693e45a_0",
      "old_fingerprint": "cba5a939906a032b437539b947021de7_41",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00464.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00464.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "2a2ee67ab26a00dcbec0f064e76cc645_0",
      "old_fingerprint": "687cbae2b70645b14924e35ecd6810bb_15",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00531.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00531.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 91,
      "snippet": "md.update(input)",
      "fingerprint": "87f1b84838606ee05bb6e5a45e94b87c_0",
      "old_fingerprint": "444ba0cc2725ba2217d84ebf9348b8cc_52",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00532.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00532.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 98,
      "snippet": "md.update(input)",
      "fingerprint": "f5abef999e1935cdb68ca841deac7670_0",
      "old_fingerprint": "4e1654a94190a3f98f97f701e9ec206c_60",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00533.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00533.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "2ec7e280dc3cb661b286c2c33d9ea715_0",
      "old_fingerprint": "141eeab2647389e71c6bb5d7ce29b612_42",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00534.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00534.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 97,
      "snippet": "md.update(input)",
      "fingerprint": "37a90c4882a716c93340ed6965d76dcb_0",
      "old_fingerprint": "41421006c500087a83f9097d7225c505_59",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00631.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00631.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 75,
      "snippet": "md.update(input)",
      "fingerprint": "35c07845612cac2bef1ba7b8cd0959f3_0",
      "old_fingerprint": "992377b8337a52870e5f4e7f312177ee_26",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00634.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00634.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 76,
      "snippet": "md.update(input)",
      "fingerprint": "9254647b87a7d3b9b9599c00004521e2_0",
      "old_fingerprint": "e652023ed0b9f9e3bef8bbbaeaf3fe85_29",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00635.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00635.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "56386c7d842747c50f221b2f96ed5503_0",
      "old_fingerprint": "481ed5a4ae03a17c485ed411ddcc9052_4",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00636.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00636.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "837d3e47f4fa5af6169ecb23ddd7e6c6_0",
      "old_fingerprint": "e6bc01bf9b7bbc01eafb24924282e4fb_3",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00703.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00703.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 84,
      "snippet": "md.update(input)",
      "fingerprint": "f3de10932b55724a6718213609b55532_0",
      "old_fingerprint": "a18c3436b3a5e9d64dc811d9dd025a45_38",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00704.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00704.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 77,
      "snippet": "md.update(input)",
      "fingerprint": "e2be3fbc6f7d58733bacff149a6a9d0a_0",
      "old_fingerprint": "e13a30c7360bda9d2486acd2cc8c7082_30",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00705.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00705.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 72,
      "snippet": "md.update(input)",
      "fingerprint": "3753ea62e7866af5f83c2d4605992965_0",
      "old_fingerprint": "12545bc09327adb0b2bec720bef2b008_20",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00789.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00789.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 95,
      "snippet": "md.update(input)",
      "fingerprint": "8374141bb6bf7d4932ab911ee43a6ed8_0",
      "old_fingerprint": "f4c4c3a3e20b8c10e0f06ffd6b3cf12e_58",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00790.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00790.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "f81e6253bc1c221d3a9c205f540742d5_0",
      "old_fingerprint": "46574301b7237c7025de6adfd2c10dc2_43",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00868.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00868.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 93,
      "snippet": "md.update(input)",
      "fingerprint": "966eb2d50eb51505906fda74faa79d78_0",
      "old_fingerprint": "45672dad93258554b958b5c5290a560b_57",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00869.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00869.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 92,
      "snippet": "md.update(input)",
      "fingerprint": "610360b81de035076f9891f9860539e0_0",
      "old_fingerprint": "9bbd889bcf1c3e7b48fc33633f98dd3f_55",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00870.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00870.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 65,
      "snippet": "md.update(input)",
      "fingerprint": "f0f9fac575d3b785d1dfd1baf2e0fa5b_0",
      "old_fingerprint": "0f5042916344b92bede94a0db63a6f4a_1",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00871.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00871.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 70,
      "snippet": "md.update(input)",
      "fingerprint": "99b7e59d4e67ecfbd258931c75c8abf3_0",
      "old_fingerprint": "387ec79f023b8e1457802da544ff41e0_12",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00872.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00872.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "7d05ca9b5dd0e2c2145f5f9a293c75df_0",
      "old_fingerprint": "edd314a8df9bf32bdb4d0ead8ec773a2_5",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00961.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00961.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 83,
      "snippet": "md.update(input)",
      "fingerprint": "071ffbc558374a22b9c8b19052425302_0",
      "old_fingerprint": "c574b5ddb4953e25f8d76fd567b3f8f0_37",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01123.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01123.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 79,
      "snippet": "md.update(input)",
      "fingerprint": "d08bc85b7d030be43103ba7a5963b16d_0",
      "old_fingerprint": "6e262325b881ae12b41326efb271f25e_34",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01165.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01165.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "96e3b73bb676af505d6047a174c785e5_0",
      "old_fingerprint": "0912ba424cfe0918cb99273f6a9d0871_17",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01166.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01166.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "fbf9e2ba493a5897fa85f88f4e498355_0",
      "old_fingerprint": "006f646a30022d764d06e1ba736eeaf0_13",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01244.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01244.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 72,
      "snippet": "md.update(input)",
      "fingerprint": "e5c8b60964377ed9a179e34e64f1426e_0",
      "old_fingerprint": "eb8ee83cd4e58f124208383ac7cf91c3_18",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01246.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01246.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 64,
      "snippet": "md.update(input)",
      "fingerprint": "84f5346206268c4eee1e8f52efd40cb1_0",
      "old_fingerprint": "c19713987e3b24a9b0781d6e0fe3b931_0",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01411.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01411.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 78,
      "snippet": "md.update(input)",
      "fingerprint": "9de50685244695b7fc20535f195972c1_0",
      "old_fingerprint": "1a5cc320c2b44228bdc719591c4387bd_32",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01503.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01503.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 74,
      "snippet": "md.update(input)",
      "fingerprint": "afe3277acde4b0a0758b1f9b44a1eeec_0",
      "old_fingerprint": "23b266250780560b4a9e3e27a700957e_25",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01649.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01649.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "3fe4aca1daefc895ecd35d9526419832_0",
      "old_fingerprint": "70c887effdddadd6d6a88dd7dafc3155_48",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01650.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01650.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "70b7ed0dcf84be9a03da15cf32e98931_0",
      "old_fingerprint": "cb626a456f1c0e4a5380566a462e693a_47",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01651.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01651.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "5b5ba9f4144c94aabdfebb6e8539c56e_0",
      "old_fingerprint": "fafcf08b19ec867848e3c48dc7985aea_46",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01757.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01757.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 73,
      "snippet": "md.update(input)",
      "fingerprint": "f2e5aefd5e706860725c12faa3d21aba_0",
      "old_fingerprint": "6b496244c084a0a54baf910de21fd45b_21",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01761.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01761.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 65,
      "snippet": "md.update(input)",
      "fingerprint": "81b66b57d9711dea2c38832394bea883_0",
      "old_fingerprint": "253ec7fcacecf835c0da222999e9a88a_2",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01844.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01844.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 91,
      "snippet": "md.update(input)",
      "fingerprint": "14469169b83c69f20b6f068e86d042ba_0",
      "old_fingerprint": "0de270642ecd19a33b70dc56b9029788_51",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01845.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01845.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 91,
      "snippet": "md.update(input)",
      "fingerprint": "09be40804f73a3771728ba350d93d9b8_0",
      "old_fingerprint": "de1fc19f9eaa9bc63fafdef4fd431106_54",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01846.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01846.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 91,
      "snippet": "md.update(input)",
      "fingerprint": "a658b7eb520019e0e059da85102f33ee_0",
      "old_fingerprint": "3f11e1ed5e73766a787fecfaf73f3239_53",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01911.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01911.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 77,
      "snippet": "md.update(input)",
      "fingerprint": "f842e32397c5a2372c46be1b8b15f288_0",
      "old_fingerprint": "06a2811bda80f49f86642707dbc4a049_31",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02042.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02042.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 71,
      "snippet": "md.update(input)",
      "fingerprint": "59e98b5b81057bfdfed33f1c177595e1_0",
      "old_fingerprint": "6e01b355e8b94e1f5d8f561fd3c49a21_14",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02118.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02118.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 72,
      "snippet": "md.update(input)",
      "fingerprint": "8860388537a6d5db65a4b2df00a881d6_0",
      "old_fingerprint": "3324188bc51160da612522d6ca8d4a70_19",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02211.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02211.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "8d15097222722e8fd1d5c8b7f97f1028_0",
      "old_fingerprint": "d484aa77c1631d806d13fe3b993e11ba_8",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02212.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02212.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "4519f99328252f7a8cb78af1d8a994cc_0",
      "old_fingerprint": "9cb3446325ede27eaeffd6555fe6e88e_9",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02213.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02213.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 68,
      "snippet": "md.update(input)",
      "fingerprint": "8aa893406c3c2eea99ef436e6a73e9bb_0",
      "old_fingerprint": "1d69309683f16bf4e079b1edfea62ea3_10",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02307.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02307.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 86,
      "snippet": "md.update(input)",
      "fingerprint": "5c1693cc4704a5f892313beb67018e72_0",
      "old_fingerprint": "8c17a87c4fe21a14a8e0e7b7583c11db_40",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02308.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02308.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 78,
      "snippet": "md.update(input)",
      "fingerprint": "9a3d69df10b03978c1d28ab9f069d2a4_0",
      "old_fingerprint": "d2aeaad191a375f433206a76f7926611_33",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02385.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02385.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 74,
      "snippet": "md.update(input)",
      "fingerprint": "1e784d84925f2bff3255d54c6420b5c6_0",
      "old_fingerprint": "43350b65de54acc1a024799b91203a68_24",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02386.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02386.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "1b1976a8d68994fff6c3dd67601b9b75_0",
      "old_fingerprint": "0216e213d9adb5d15b0fa30d185e9055_7",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02474.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02474.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 66,
      "snippet": "md.update(input)",
      "fingerprint": "ca9ce7284edc8ba93c450572f9300f33_0",
      "old_fingerprint": "e74eb47a3adcf7e38352efc1c4e68b3e_6",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02573.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02573.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "cafbb6c08772bc835c247b5c935247dd_0",
      "old_fingerprint": "8d187b7dc6113e02f8a43aaf25e596a1_49",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02574.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02574.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 88,
      "snippet": "md.update(input)",
      "fingerprint": "d99255dc973433c1f87f9dd0b508658b_0",
      "old_fingerprint": "8db13a6c809ca9917fbdfe1d32249480_45",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02670.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02670.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 73,
      "snippet": "md.update(input)",
      "fingerprint": "5f0c880019d7ca9904b48e3f0a392ba3_0",
      "old_fingerprint": "85d8d667ceda3946002085f0b5b7c4c3_23",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["327"],
      "id": "java_lang_weak_hash_sha1",
      "title": "Weak hashing library (SHA-1) detected",
      "description": "## Description\n\nA weak hashing library can lead to data breaches and greater security risk.\n\n## Remediations\n\nAccording to [OWASP](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption), SHA1 is considered a weak hashing algorithms and therefore shouldn't be used.\n\n❌ Avoid libraries and algorithms with known weaknesses:\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n```\n\n✅ Use stronger encryption algorithms when storing data.\n\n```java\n  MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n```\n\n## Resources\n- [Java MessageDigest class](https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/security/MessageDigest.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_weak_hash_sha1",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02671.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02671.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 13,
          "end": 29
        },
        "content": "md.update(input)"
      },
      "parent_line_number": 73,
      "snippet": "md.update(input)",
      "fingerprint": "62a12b0c019ee69bec37926d06d76fdd_0",
      "old_fingerprint": "e68b50608c6a279875693528a7cb90ec_22",
      "code_extract": "            md.update(input);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00117.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00117.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 89,
      "snippet": "xp.compile(expression)",
      "fingerprint": "808e992fb35552b11e68abc980034d9a_0",
      "old_fingerprint": "bcc3276823bf90d7013ab592c82cf962_21",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 87,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "debcc62dd49cc904ec418a10fce6dfd4_0",
      "old_fingerprint": "d3f2bb0100a5c120c013ea02586c254e_18",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00207.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 75,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "d7b431cc1e136ebe1030edac7e20cd16_0",
      "old_fingerprint": "26b4e3a09b537bd5bb54a8e8948635c7_7",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00520.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 72,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "b04b0de0225875dc5a79fd70e6bd99e9_0",
      "old_fingerprint": "4d8bce5d26f10b705a13f544d1c6b1af_4",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00607.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 79,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "2c7fd3f39495a89722fc7f1d8c271b9a_0",
      "old_fingerprint": "62fd8fd64cd26de672f313dad058aa07_8",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01013.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01013.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 84,
      "snippet": "xp.compile(expression)",
      "fingerprint": "652648ff2ac5cb861540f2ec57689631_0",
      "old_fingerprint": "ddc9993c2e9daa3d0b241b86d3c5fca4_14",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 82,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "ba66e6c7ef3c97f51bacc276223b2380_0",
      "old_fingerprint": "0ab0a19248af655c024c73fd4f725fc5_12",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01223.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01223.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 72,
      "snippet": "xp.compile(expression)",
      "fingerprint": "98571966a8cc78b006f34bb82f9cd0c3_0",
      "old_fingerprint": "1718f64a42b2bed87d9abc4dcd7b803d_6",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01224.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 70,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "35f74b3671c6f51f1228d308b3a65918_0",
      "old_fingerprint": "6fb01e716873087ff6f822cba0246bec_1",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01225.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 70,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "7cffb901bdfb11dbdaec115948a613d2_0",
      "old_fingerprint": "d83357cf131e7445b51be39aea5a7492_3",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01397.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 67,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "e69a548b2b3022ac56525720ad58ca08_0",
      "old_fingerprint": "52bfeb022358f604d49b6fa93877bffc_0",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01478.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01478.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 79,
      "snippet": "xp.compile(expression)",
      "fingerprint": "aabfbe064013350577bf2b7cf96ec4fe_0",
      "old_fingerprint": "b4fc1003d0e8f3a91e38c8fdab0fc5e9_9",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01479.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01479.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 79,
      "snippet": "xp.compile(expression)",
      "fingerprint": "373becdb8999dbca4be909e614029d8a_0",
      "old_fingerprint": "655eff3f356073ad984ab6e8c466c733_10",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01734.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01734.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 89,
      "snippet": "xp.compile(expression)",
      "fingerprint": "3b9a607836ae0ad09d2647133f89e126_0",
      "old_fingerprint": "43f150d1dd40232cc6e7d3907a818331_20",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01735.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01735.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 89,
      "snippet": "xp.compile(expression)",
      "fingerprint": "c3f1dba25b3f229bec1de3d8ec470311_0",
      "old_fingerprint": "0f8d15e54f989b227ddd664b078bb17c_19",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01736.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 87,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "91c9c10b6f2c713dd20fe7f12bffc1d2_0",
      "old_fingerprint": "98e5ea0d848e72c3c757017c1e7d02e6_17",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01892.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01892.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 84,
      "snippet": "xp.compile(expression)",
      "fingerprint": "345e40e8435ef50af3ad651ab5a14410_0",
      "old_fingerprint": "89a91b3c50a53c16ff49972dfe139715_15",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01893.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01893.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 84,
      "snippet": "xp.compile(expression)",
      "fingerprint": "eb6cb4ccac09a02fa26a7ee13698c337_0",
      "old_fingerprint": "1fe7a01de55a8aa385a6d22edb5d9e17_16",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 65
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 29,
          "end": 65
        },
        "content": "xp.evaluate(expression, xmlDocument)"
      },
      "parent_line_number": 82,
      "snippet": "xp.evaluate(expression, xmlDocument)",
      "fingerprint": "303ab31afc7f66386e10007122337205_0",
      "old_fingerprint": "8206fde6c35782fbb32cf0ea02e202fe_13",
      "code_extract": "            String result = xp.evaluate(expression, xmlDocument);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01974.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01974.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 70,
      "snippet": "xp.compile(expression)",
      "fingerprint": "43f7aa5585c17f80eecc171a055dccfb_0",
      "old_fingerprint": "c0ea59aec9222090df007d0e0cdc3695_2",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02100.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02100.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 72,
      "snippet": "xp.compile(expression)",
      "fingerprint": "74b40afd72276d22de4b22f422a77af7_0",
      "old_fingerprint": "d3311780f8a117c1fbd779e8d5d27aeb_5",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["643"],
      "id": "java_lang_xpath_injection",
      "title": "XPATH injection threat detected",
      "description": "## Description\n  Unsanitized input going into XPath evaluate detected.\n  This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized.\n  Xpath injection could lead to unauthorized access to sensitive information in XML documents.\n  Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.\n\n## Remediations\n\n✅ Sanitize XPATH queries\n\n```java\n  public class Cls extends HttpServlet\n  {\n\n      public void handleRequest(HttpServletRequest request, HttpServletResponse response)\n      {\n          String userID = request.getParameter(\"userID\");\n          String sanitizedUserID = sanitize(userID);\n\n          javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n          javax.xml.xpath.XPath xp = xpf.newXPath();\n\n          String expression = \"/Users/User[@userID='\" + sanitizedUserID + \"']\";\n          String result = xp.evaluate(expression, xmlDocument);\n      }\n  }\n```\n\n## References\n- [XPATH Injection](https://owasp.org/www-community/attacks/XPATH_Injection)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xpath_injection",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02370.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02370.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 29,
          "end": 51
        },
        "content": "xp.compile(expression)"
      },
      "parent_line_number": 79,
      "snippet": "xp.compile(expression)",
      "fingerprint": "e06269a69d95e759d96d07675b002e40_0",
      "old_fingerprint": "dddb38a2e72020c04bffde20925a185a_11",
      "code_extract": "                            xp.compile(expression)",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00013.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00013.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 69
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 69
        },
        "content": "response.getWriter().format(java.util.Locale.US, param, obj)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().format(java.util.Locale.US, param, obj)",
      "fingerprint": "a88b4ac938acdc229467c17db9620d44_0",
      "old_fingerprint": "b6ad9421a143af8b29cc79b554aa5358_68",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, param, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00014.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00014.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 48
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 48
        },
        "content": "response.getWriter().format(param, obj)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().format(param, obj)",
      "fingerprint": "b9a0c0b764bead47da5cdcbda8299a7a_0",
      "old_fingerprint": "521c3e732c8ddf8b3135f6570914b6c2_67",
      "code_extract": "        response.getWriter().format(param, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00030.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00030.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 48
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 48
        },
        "content": "response.getWriter().printf(param, obj)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().printf(param, obj)",
      "fingerprint": "0b04c82eec345ee8fc6e62a2c206aaf0_0",
      "old_fingerprint": "64c4700ef575ae8f6a12509bd909cb44_2",
      "code_extract": "        response.getWriter().printf(param, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00036.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00036.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 71
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 71
        },
        "content": "response.getWriter().write(param.toCharArray(), 0, length)"
      },
      "parent_line_number": 65,
      "snippet": "response.getWriter().write(param.toCharArray(), 0, length)",
      "fingerprint": "4beebeb107d84f02625c297eb2304679_0",
      "old_fingerprint": "c104052b09930824259c6fa03516dd9b_160",
      "code_extract": "            response.getWriter().write(param.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00047.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00047.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 48
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 48
        },
        "content": "response.getWriter().format(param, obj)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().format(param, obj)",
      "fingerprint": "6a559a67ddb5c31b0e3af07bbc131631_0",
      "old_fingerprint": "e4a36371f01a837e0561367b7d6ecaa8_183",
      "code_extract": "        response.getWriter().format(param, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00048.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00048.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().print(param.toCharArray())"
      },
      "parent_line_number": 72,
      "snippet": "response.getWriter().print(param.toCharArray())",
      "fingerprint": "e225a7511f53e04fa55732a01c5d654e_0",
      "old_fingerprint": "e2ca6d8a7ce5c624b7e2d01d5067e206_179",
      "code_extract": "        response.getWriter().print(param.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00049.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00049.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 64
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 9,
          "end": 64
        },
        "content": "response.getWriter().write(\"Parameter value: \" + param)"
      },
      "parent_line_number": 72,
      "snippet": "response.getWriter().write(\"Parameter value: \" + param)",
      "fingerprint": "5c20741843a3edeec375e348db1a436d_0",
      "old_fingerprint": "3ba21719d4eabd5117f78de0dcb72691_178",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + param);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00118.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 89,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "83b868a6e1dc8a3dfbc687c58d642e9d_0",
      "old_fingerprint": "ede5fb8d3deec98b044f03443733a77e_238",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00146.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00146.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "493890c3434e99351cf55774688c8d25_0",
      "old_fingerprint": "882fc36011dd52c40a739a7d2cb835c0_116",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00149.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00149.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "dd57ee1f5fe35e0b81e8044933378b32_0",
      "old_fingerprint": "514c6db041956969ebedfae251b6fb65_69",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00155.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00155.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "8bc67272c31840bd6e508015a63fc866_0",
      "old_fingerprint": "717f311b18eb8125aee2132a44ceec39_83",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00157.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00157.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "859f9e29bb5149c72fb34929b6be4af4_0",
      "old_fingerprint": "24d930818853c8aafd3770f0bf2f78ae_103",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00198.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 62,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "c1b8040f173fe6cb1d4fe0f051dba8bd_0",
      "old_fingerprint": "4465a2134ca779017cfa2d90c506974f_126",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00207.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00207.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 77,
        "end": 77,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 77,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "2995d072b29284879586a0ab01de9aa5_0",
      "old_fingerprint": "497eac1b78abb1a0da2e927d743fbfe0_229",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00276.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00276.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 61,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "d6555aa7bbd50f4b35e8c2ff425ee18a_0",
      "old_fingerprint": "eda1bdb7cdfac5a98ff1d28f5125ad4d_123",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00278.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00278.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "751f2e983adfa1396638d68b0f3444eb_0",
      "old_fingerprint": "eac1b08a836bacfe9f371a72969b1bac_81",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00281.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00281.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 62,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "19092cd71dbe1a2e5ca8f2a16456c41d_0",
      "old_fingerprint": "3ad35b8b8b088778b9f18d2f386bf8b1_127",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00284.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00284.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "6805ed3e099c2d3c70c799545810606e_0",
      "old_fingerprint": "8088a85a0ea20aae3b8133e3268de9d1_82",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00286.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00286.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "56d2611567cd3f4d3c04c2adda109bed_0",
      "old_fingerprint": "b829987a9e19697106579920a32ded8c_84",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00287.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00287.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "1cf922bb3b23b3779dd3f241eb9b70b3_0",
      "old_fingerprint": "4cf2b5c96dd9d518819e2274530eb708_114",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00290.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00290.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "063cab0af5c0908f5626e610c65740cb_0",
      "old_fingerprint": "84a5d0abb169577955057c50a684f957_89",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00291.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00291.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "d102c81b52429e461a1aad29e7a15a74_0",
      "old_fingerprint": "f2fab67b23bee8e7270c6e40f70adab5_113",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00292.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00292.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 55
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 55
        },
        "content": "response.getWriter().write(bar, 0, length)"
      },
      "parent_line_number": 62,
      "snippet": "response.getWriter().write(bar, 0, length)",
      "fingerprint": "69eec9802e2682242cbd2dd42cd6e159_0",
      "old_fingerprint": "c9e899b6d481c24e3fc494251afd03fc_125",
      "code_extract": "            response.getWriter().write(bar, 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00336.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 67,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "251c85c69647f5235537a1c3477cc2fd_0",
      "old_fingerprint": "dea66b24849c12a053013427d3ad3644_168",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00469.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00469.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "4cc86880ef0bb33e99f429d274bce913_0",
      "old_fingerprint": "b5fc5a9773633ef24f9b56742718fe1b_104",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00471.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00471.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "484756d3a4e5dd971b8aac3aa9d1465a_0",
      "old_fingerprint": "7f937b883e057c1c1e68dede263bff97_34",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00473.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00473.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 61,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "4a2db659da599e690f1cdd756537e9ed_0",
      "old_fingerprint": "0588ac59d034c8336cd99160547fff3b_124",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00474.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00474.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "f381e7e495cc182915410283d03cce0c_0",
      "old_fingerprint": "e2436f47c111e4d614b85bd02914f73c_0",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00476.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00476.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 58,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "2469b0f8f90ffa518cc8008887397b46_0",
      "old_fingerprint": "44512ba34d30d48e1f47309c6857dbb6_102",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00477.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00477.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "a2dd972e71be6752099453b4a7898696_0",
      "old_fingerprint": "cd2f9013a7a56d550d6006e74d40b561_23",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00478.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00478.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 60,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "f7fa384395745c8b4f9bba72b41dd2d1_0",
      "old_fingerprint": "706ac8f7936d459b802740f501c7b16d_119",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00492.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00492.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "7bbe722ba9baaec44a9170b86429a3e5_0",
      "old_fingerprint": "192a77157b9823d30d34fc4f028f6b62_59",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00520.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00520.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "bb3134a92b050f9c6514950c2a3a8325_0",
      "old_fingerprint": "f2b0a12d2f4d9acb37d02eee1d5eaef8_209",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00541.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00541.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 71,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "37d5502266c9cb0bccdcd83a5a9b2cab_0",
      "old_fingerprint": "97331bf01a6eb62afca3ef2da3240f52_175",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00547.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00547.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 65,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "d8fe393b9e5d3b0fc24086cc54c68b49_0",
      "old_fingerprint": "df1d4b7c9578f3a2576876eb2174c8ad_161",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00549.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00549.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 68,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "d81336a600a66bdcdda9ab23088479ce_0",
      "old_fingerprint": "8739f3a505aee352f3f15e963e63d2e2_170",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00551.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00551.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "5a3f4115d9c3b07465a4b106ea023191_0",
      "old_fingerprint": "f02929ac19e094e5e5057b7aedb0f718_135",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00555.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00555.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 68,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "ac1a2004d1b122a2aa98b1aeb127febf_0",
      "old_fingerprint": "73c4082b65c41697cfde1f478744f7a8_171",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00557.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00557.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 55
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 13,
          "end": 55
        },
        "content": "response.getWriter().write(bar, 0, length)"
      },
      "parent_line_number": 67,
      "snippet": "response.getWriter().write(bar, 0, length)",
      "fingerprint": "b85838406176a6a8edf5872359697b91_0",
      "old_fingerprint": "59d83666b35c28bd35530d253facdd80_169",
      "code_extract": "            response.getWriter().write(bar, 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00607.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00607.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 81,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "69dd31ed5242571e34ee037df4cd9ab3_0",
      "old_fingerprint": "e09a69281727beb24863a52d44918c6f_234",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00801.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00801.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "3b4439fa739f2d4df570780bc4c1b559_0",
      "old_fingerprint": "979b1efd278328837eec9164164b3dd8_208",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00802.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00802.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 80,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "ba7af7e13ac3716168ec7b4b381c63ed_0",
      "old_fingerprint": "55dde5e62f4c3d66f619d6aad93ab071_232",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00803.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00803.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "afa08141b83fe8bcd7e9aa14c1967809_0",
      "old_fingerprint": "70c4ab031ab60cab2c6c23313c60830f_188",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00804.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00804.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "a7ddd3831d4217c39fbf1901c12c8a9a_0",
      "old_fingerprint": "d3c4f9488851f58da7ae0c2c00856f57_210",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00807.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00807.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 75,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "3e6ff20f07b2a71a49f8ee1b8336a7d1_0",
      "old_fingerprint": "f8e5efd3a9d75956788607893bb76364_225",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00810.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00810.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "3e77804f2a5d0ab90ac5577c1e4c1fee_0",
      "old_fingerprint": "5541563accff9f9701d64882b25a4a73_218",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00812.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00812.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 78,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "c79d35f96f59e2f8c6e21dc5f9768ff3_0",
      "old_fingerprint": "e3492dd09fc1f632a707025552e7566a_230",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 81,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00813.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00813.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 13,
          "end": 55
        }
      },
      "sink": {
        "start": 81,
        "end": 81,
        "column": {
          "start": 13,
          "end": 55
        },
        "content": "response.getWriter().write(bar, 0, length)"
      },
      "parent_line_number": 81,
      "snippet": "response.getWriter().write(bar, 0, length)",
      "fingerprint": "d294186ed242755f668a92fb4fecec56_0",
      "old_fingerprint": "f7b9dff925ccdf5931dcb0f346c32d09_233",
      "code_extract": "            response.getWriter().write(bar, 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "30576b1b99b100499bdc8542fab9e33c_0",
      "old_fingerprint": "fe1ac84047eafb85fdc84dda3f391001_207",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01014.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 84,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "e90c302bcb4459f9a60e7ef8504ba2c0_0",
      "old_fingerprint": "f71d974ec2fd08b02e9a2718282f2cd3_236",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01046.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01046.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "7a77740698fe265f98be509b0a75009b_0",
      "old_fingerprint": "fd306316c7ed6ba78eb0b33d3bcb7619_87",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01047.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01047.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "efb6c24c02f738814c1bf0323d7c9cc4_0",
      "old_fingerprint": "477292c2ba29a51a2509a3226cf107c7_101",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01048.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01048.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "2959668763a9b7347fe2e5d3d9c12f81_0",
      "old_fingerprint": "d30d63f5a2343e823f44410b304451f0_50",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01049.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01049.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "88ec970ba1cde4610d34571d1b452f5a_0",
      "old_fingerprint": "256ff0d3395309e88e9c5b80c4dccb8e_51",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01050.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01050.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "cee2b9a06500f77fe8c1b87153fbff88_0",
      "old_fingerprint": "470a6a6474ad388cdcfbf02938464f39_22",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01051.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01051.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "e3751f66cc894c9499f86748f9280a4e_0",
      "old_fingerprint": "2589d6863cfce7d136b78b4c796e709e_53",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01052.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01052.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "13c0bd7de5c100f6bcff390cdd53a270_0",
      "old_fingerprint": "f60b651740e9028f880413a8d9d2e4e0_54",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01053.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01053.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "09cb7d62e3c1773ac3ddbabf1021f562_0",
      "old_fingerprint": "1d100d360e37cd9644e517958826cfe6_33",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01054.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01054.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "16a51e11f26bdaeafb15e9b0dc06c133_0",
      "old_fingerprint": "cf218c7ff7d174302052bb18c175b816_32",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01055.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01055.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "7e371bcabb856c98660d7770b4c549d4_0",
      "old_fingerprint": "560140c7c6029aac6cc30af25efeb7ee_31",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01056.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01056.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "d1bf4c3ab898d856511a326b64ab7589_0",
      "old_fingerprint": "65c2640dc42672ac9194be4fedaa8de7_90",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "30f1c5401ceae9f74a4ff2db443b53eb_0",
      "old_fingerprint": "af4b93ecc8a41877a579cce20c5308da_29",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01063.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01063.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "6c36d509ec099d0edb90f13291335767_0",
      "old_fingerprint": "c86148f723890da537b951057201418b_28",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01087.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 60,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "857b4e1435aac49adcf7776903c049c2_0",
      "old_fingerprint": "a2fd54570211eed97f1192dd2067bab3_122",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01088.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 60,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "d86f75991fa58b804d83b9545d59bc5f_0",
      "old_fingerprint": "a258c8fb18b2529e1b7ca14a3491c810_120",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01171.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01171.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "7f7a55d55d2d4204d951d1fd86a113a3_0",
      "old_fingerprint": "c1576ac7ef99ba24ae742aab4a656807_98",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01172.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01172.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "953f62479e1973c6ccd1e469d3da5b6c_0",
      "old_fingerprint": "33aff01e47f848f2d33bdf598249e0cb_96",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01173.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01173.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "808a9cb3ddf3205afc1af5e75bbee17f_0",
      "old_fingerprint": "85fb857dadaa4716f93ba1bf69cdec36_65",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01174.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01174.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "7fc69e80e46bd3b220ec4a9309540b3d_0",
      "old_fingerprint": "aa85f47849b49b1b7f3e012c814313cb_66",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01175.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01175.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "b00a03e8c2d7966c4d7307da95e4bc2f_0",
      "old_fingerprint": "c03c51a27cb9cbe4d7a899d4d1b3850f_93",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01176.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01176.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "207ffa7f3aa2c225e148999f7c671328_0",
      "old_fingerprint": "f9f88ec132a1328356a165de8786f72e_86",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01177.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01177.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "ce77018d3c88b919c5565c21594d7271_0",
      "old_fingerprint": "da50c250b693579a17ab5874fe27a459_97",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01178.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01178.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "cf91ab2acdec68092ce88094c041bad7_0",
      "old_fingerprint": "957fcc8c31894d0e547aa81e1d89262a_70",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01179.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01179.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "8c6a0d8a4f88d15ff0bf33e67cb25c9f_0",
      "old_fingerprint": "927e802a97a55567b14d877f05126367_71",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01180.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01180.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "d5930c670bd8fd67386bfa1c49b18304_0",
      "old_fingerprint": "6ddda4ed6696edb36be17881219de7b5_72",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01181.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01181.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "e61dbaeee1a921fee61ad842a2185c10_0",
      "old_fingerprint": "a68f04ab717f2aa399ba24dd933c139d_73",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01188.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01188.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "6e26638bac673370fcf9fa743a0c18b2_0",
      "old_fingerprint": "72925697814318833f289a4a4b797744_63",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01215.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 62,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "e83a4e4db9f5f4624d00401e4c92a87b_0",
      "old_fingerprint": "7063c1bd7c3a81ca99d2d4e6cfa38e57_128",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01224.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01224.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 72,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "a788f9273876a77ed06310775a47840c_0",
      "old_fingerprint": "eb8887c9ac73ed0648e6a1fbe0ac0245_176",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01225.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01225.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 72,
        "end": 72,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 72,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "400cb67958d7427260d45658010d1d3d_0",
      "old_fingerprint": "03c34d1813aa87191ebc4b9db8888f1b_177",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01335.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01335.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 56,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "8ab2111f2f23a3f68a8f234dc2921b68_0",
      "old_fingerprint": "4e47f842a09a5968ae7f7fe9f0d3e289_80",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01336.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01336.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "ecc4f9523ef0761e71e695f901c9286c_0",
      "old_fingerprint": "f12d72531e09d0a7ae757e3f4a6641cf_27",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01337.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01337.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "f272f8a7426fce6873c74167a3916dc3_0",
      "old_fingerprint": "48fb8fd4e75058eac7ab1a8455fe0bda_30",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01338.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01338.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "9401e0096887b7ca97d95d5199c71c93_0",
      "old_fingerprint": "a99abcd05c722ec513cc0918d6e18332_20",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01339.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01339.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "e76590a09cb4b681b055770d078c4f8d_0",
      "old_fingerprint": "6e8d9ee9f101dd10f634f7fd48259394_19",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01340.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01340.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "1a18c1308ad6a339c2efff30f8f1678f_0",
      "old_fingerprint": "86d802001fda989b363bc0318e47f952_18",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01341.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01341.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "418e5cd359e430b69c5fefbf75f5f03b_0",
      "old_fingerprint": "0655b5f85a5307cfe95b00b5ce762862_49",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01342.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01342.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "0201edea877d9fccf7a5454d29b78c8f_0",
      "old_fingerprint": "0087ee3ef4834e7a6a99f447d4d32e03_48",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01343.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01343.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "de86aa43ac9de59797187e190cd995d5_0",
      "old_fingerprint": "d2baad564a34b5cf2a57edb08767f3f9_44",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01344.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01344.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "1489d027e5f48538b50e24a5916e5624_0",
      "old_fingerprint": "58c6858f5603bb554e9455446d951896_43",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01345.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01345.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "6e354031e371b2b7c7fccf3e8af7c359_0",
      "old_fingerprint": "d0945c8bf2126724313a9ebe45d8eda4_17",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01346.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01346.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "01415a5c5cb79f06e758102f74d29be0_0",
      "old_fingerprint": "77fc3222211835275c8dfc0d92488936_16",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01347.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01347.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "299b8fcec2141dc6dd5331a9125509a0_0",
      "old_fingerprint": "b6d17dcae8038a1b4dc84008dce50424_15",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01348.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01348.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "15c11f103001e85f478391eb151463ef_0",
      "old_fingerprint": "d68707b68097ef8fa8f871003bea6b77_14",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01349.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01349.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "9ccca9904639dc64f02eddd8ef1d7433_0",
      "old_fingerprint": "9ebc7dd3ea717123e6efd5f16a000d40_13",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01350.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01350.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "9938fc6ce69b1368545cb512d398a376_0",
      "old_fingerprint": "a8a27ff805905f3f32f8220625b6e731_77",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01351.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01351.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "404c8be79e783ef107934d08f60db709_0",
      "old_fingerprint": "52867b2c7c7f3a406ae3504e99c8cc58_64",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01352.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01352.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "336301ccc307970af820e5b265cfd943_0",
      "old_fingerprint": "e3fc803c693838bf5efa55b920f1cd8e_12",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01386.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "ad75934d0fdef0654af2de2fc284525b_0",
      "old_fingerprint": "e244492c72b643248b00ad2c52c4caac_111",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01387.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "6bdb49bf4504356eb9e5043f8861795b_0",
      "old_fingerprint": "f9f5f72425b0e7df197b5218a85c8838_109",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01388.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "44afb14a15da81cfaa70528f7d4f7027_0",
      "old_fingerprint": "00599e4d0aef6e2f5852ab6b35d9f54f_108",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01390.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "ca598df72ac376a17519857b699e8544_0",
      "old_fingerprint": "978bc2dcfb4a511827ade3a04dd90d17_106",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01397.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01397.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 69,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "eea889ab6124fc8676ccf5668862522b_0",
      "old_fingerprint": "2903748b553e2a00f977b47f38c545e0_174",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01417.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01417.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 66,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "9a6e885e8e83b926829f9f49a761938f_0",
      "old_fingerprint": "f28ae5a4fd9c7f589cda477cf1faeea1_164",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01418.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01418.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "14237bef5689043c5436b2aef5e5f13f_0",
      "old_fingerprint": "31f7c4889b6cc90c022a1cbeb61292bd_152",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01419.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01419.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "94361e1809e3278d1c37d4968a3c3659_0",
      "old_fingerprint": "b55cea1a05cf617c28d83099beedc860_159",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01420.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01420.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "70102bad3abaa0a6928dae0b9a107d76_0",
      "old_fingerprint": "385093f536284943c94ebebb8460ce35_129",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01421.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01421.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "209aa73e3a8cc7551ee01b7f1b7c98e9_0",
      "old_fingerprint": "f8898317cab21c372362670490a32a1f_157",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01422.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01422.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "5139321f0805e1b0d8e27e203744c46f_0",
      "old_fingerprint": "f529ff2c424d2384225d3fd20dfda54e_156",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01423.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01423.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "786787367637bfc267ecfd3deeb41e3f_0",
      "old_fingerprint": "589e1b528d5b10795fb80498f161de89_155",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01424.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01424.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "80e7af61fb842c9a43072373e5ea041f_0",
      "old_fingerprint": "f625a56eb5749f267da3133ec364c0fe_154",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01425.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01425.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "d341e9e3e5a4029d2c094b472e87c8bf_0",
      "old_fingerprint": "9be32071792b33adbd59dc3d5807bf95_130",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01426.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01426.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "0a2ddff29af8f07068a7650b159e94a6_0",
      "old_fingerprint": "d06cf4535161e521ced3db373fb98cb3_137",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01427.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01427.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "d29cf9e7b46c6e3841a414a2c755c179_0",
      "old_fingerprint": "bf5a55a99340e38b7cce4da7a67acd2e_138",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01428.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01428.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "01a77f0b66905b79a06cc3209163b6b2_0",
      "old_fingerprint": "3288ef111bbd4abc30a2fd9757b1f417_139",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01429.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01429.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "dcd2a3bbfb4cfafe85eae6c80e2bb35e_0",
      "old_fingerprint": "e2bc025c416f084bab6c36904f4b29a7_142",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01437.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01437.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "693b347c8eb82cddae06033701bc051a_0",
      "old_fingerprint": "76206fee0f332176f171df80336dbc2d_143",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01438.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01438.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "36aeaba97d9799e782bf3347f4488249_0",
      "old_fingerprint": "3c52fbddcd97ceb309ebbe390ee97f88_144",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01439.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01439.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "16d472c69bb9d202520e240dadedaafe_0",
      "old_fingerprint": "3af8da4760ded32c5276970972a8408a_136",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01657.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01657.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 76,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "70c28ab5173f4b022a075ab1a669b5cc_0",
      "old_fingerprint": "53c7b9d3a8c35e072516b1f2ffeafd34_226",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01658.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01658.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "21e071d64c6d36ccc1256926d2b34f79_0",
      "old_fingerprint": "c4da38945814c46197c47e8555de8366_217",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01659.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01659.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "517150af190217aa0770d6a37781ba82_0",
      "old_fingerprint": "ce61cef4a70e2a2d735ba4dd3ae682a3_194",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01660.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01660.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "577a4a0431a99a52c5e2c1d6899688f0_0",
      "old_fingerprint": "ffd96743dab60d63c9eaf671042b067c_195",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01661.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01661.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "bd3b1b19977cc3d0b1a4fc5bcf55fbd3_0",
      "old_fingerprint": "58b89ba59ee00bf822fca83e10e83e4c_205",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01662.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01662.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "c87ec54564225d4e20f12ee7aa8f7b7d_0",
      "old_fingerprint": "f3e29e47487157883171a5eb6a72a726_220",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01663.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01663.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "5300bc4da303e8c28b933157d0e80a0c_0",
      "old_fingerprint": "2fffa8d462a354e9341209717c888de3_219",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01664.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01664.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "9e2258a428b87c8f12c8c060305ca54b_0",
      "old_fingerprint": "2a8f0949138dd05616e4335e0f9a04e0_199",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01665.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01665.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "b067a226f2eac70ee6a54a4762d42c5a_0",
      "old_fingerprint": "b4cf4472acaf00d61aa1ed7d7d831d68_180",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01666.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01666.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "9228621760c38a202149a5066a09844b_0",
      "old_fingerprint": "39e3756cd10703556fe6f3ae53d373c6_184",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01667.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01667.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "57d729ba3b10efefe5776efd34657a6f_0",
      "old_fingerprint": "ad78b2aadf6a55e0dd93b2cb4c857b17_185",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01668.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01668.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "793cea6be3773c1d542c1a49a9120425_0",
      "old_fingerprint": "1e84391e5a6a50fadfe6ee6e2ca2bed1_202",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01669.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01669.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "3791f0072376c3184adc51752590c27f_0",
      "old_fingerprint": "bdc0783988affdf7390ece2b3119bdec_189",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01670.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01670.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "36aad9dcba1c671fa9d57f1b762d641a_0",
      "old_fingerprint": "a469f8befed45984a09d8ae23d6a3671_203",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01671.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01671.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "c0e01077ec6790dc9d19e6bc3ae3f4f4_0",
      "old_fingerprint": "c584e9be179948bbad243e1e7f302ad9_204",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 79,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01723.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 79,
        "end": 79,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 79,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "fc9a7ef4cd9547f03c029c0180dbd9fd_0",
      "old_fingerprint": "0c5b340a43efc58ed5f33059a43bf047_231",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01736.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01736.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 89,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "15acc6fd3ad773c9859e054e8d6d0ae0_0",
      "old_fingerprint": "03e894241ecd0098ce65ff955ea39dad_237",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01894.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 88
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 88
        },
        "content": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")"
      },
      "parent_line_number": 84,
      "snippet": "response.getWriter().println(\"Your query results are: \" + result + \"<br/>\")",
      "fingerprint": "29b8151df2c4dcb1ce2742ce2675ce67_0",
      "old_fingerprint": "72ada1d0a136313ccead633e18c5cb26_235",
      "code_extract": "            response.getWriter().println(\"Your query results are: \" + result + \"<br/>\");",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01914.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01914.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "58443ac466da9e4b3f325a91698a3e33_0",
      "old_fingerprint": "5fbfea6ba8cb140f2398528496349104_91",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01915.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01915.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "16300e34a93f5be83c65254445872343_0",
      "old_fingerprint": "6a568eee049d1592a3edc16fa216edd7_62",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01916.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01916.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "5727f151b7aef120357256f930489f7a_0",
      "old_fingerprint": "c7917f6e3316fb500d2d0d33973f23c0_25",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01917.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01917.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "54015ff20797d998f58de7dff29af270_0",
      "old_fingerprint": "06f27da88cb21906b07c4f92e45ddf58_26",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01918.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01918.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "5a5696c60ac105b4a645b78d76dac788_0",
      "old_fingerprint": "7c21a4e802b0d07ba9a8bce65cb29dd5_61",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01919.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01919.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "d8ef1b7a2c78c9740e4a5aa2f837da33_0",
      "old_fingerprint": "f282891f6930def7f4f64f22e5b7df63_60",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01920.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01920.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "734bdc504b119d484cf15c2a08d47fc3_0",
      "old_fingerprint": "bb86d3beccefcf84efe31c00d2cabae3_58",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01921.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01921.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "b878605cf6fa1998d833181f3165e125_0",
      "old_fingerprint": "630d450225b278f7110d0c0b98da6ad1_57",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01922.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01922.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "4281475ac4adcd0f36677658ce1ae3a9_0",
      "old_fingerprint": "22f914ba778da2a579e3f349f2eaceb2_56",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01923.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01923.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "96d4c8d257819c394d2542e4cda262a3_0",
      "old_fingerprint": "57b3342cf62babcbaa72ad35ca2ac9c4_55",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01924.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01924.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 55,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "e8e9bd8132c4e1edbad76ae28d126a7e_0",
      "old_fingerprint": "92c7de2c801af28c1fcc8fa96f5db6c5_52",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01925.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01925.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "eb2aac65a23aa6248759a10fe6054c19_0",
      "old_fingerprint": "13f8b040cc36f8a2f5b224abed96b391_35",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01926.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01926.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "38a916d68edda9c506f2a0ccddcd7de4_0",
      "old_fingerprint": "7442ac4486ed15bddc538e5dafa7f791_37",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01927.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01927.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "78893987f9900bb9e8864aa5f032e343_0",
      "old_fingerprint": "b3906e9c9f7375c2e2b3c184606ae17a_42",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01965.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 60,
        "end": 60,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 60,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "9ddf255e658a9b1e6c98ea9c7ad4b569_0",
      "old_fingerprint": "8ef749bb674802253b85c1dd95e36c5b_121",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02045.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02045.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 59,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "918bfded93ed8f993a6d7816a0f4d801_0",
      "old_fingerprint": "84d119a9d78427d33fc99a708267aed9_112",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02046.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02046.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "9c3e48ebee2805153b20f8526d95250f_0",
      "old_fingerprint": "c63e5d73d79719253df51c66b098c604_74",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02047.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02047.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "b120dbe814113ff89eb18124ac34eb0c_0",
      "old_fingerprint": "3d461ba0bf74098dc9c985961ab96b08_75",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02048.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02048.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "e21011af07bf57eab1d3065b5e071489_0",
      "old_fingerprint": "5a51046a6331bfae4dc6d902314c0839_99",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02049.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02049.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "0d062b44f529c6550973eaea7f262f4d_0",
      "old_fingerprint": "e50e32ff71577a6a02a458665d01e25b_100",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02050.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02050.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "3a3866e1aae66cd6d827f563965c42f8_0",
      "old_fingerprint": "5f97cb16dee0e539ac8b7afa14e559de_85",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02051.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02051.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "198dc496af87cf0c5f877d123cfd5305_0",
      "old_fingerprint": "6c1bc65fb808743c14d68c8a80a32d39_88",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02052.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02052.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "2aaa027fcc51690df138bb6c3bdf95e8_0",
      "old_fingerprint": "66162ebd09e5792510df77b986d73c7d_95",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02053.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02053.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "118a40f26ffc30e836d3643b3010482d_0",
      "old_fingerprint": "54029c5519853b703d3658d9ed029776_92",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02054.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02054.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 57,
        "end": 57,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 57,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "67ec199b13811e001929af9448ed1335_0",
      "old_fingerprint": "6ec136384a0b17b90195de2e1ce67e9d_94",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02055.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02055.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "a5e019dc9dae53276e7769ca9a212d73_0",
      "old_fingerprint": "7b881abc92618edf25d9f93d476b00a1_76",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02056.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02056.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 56,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "4ce29b34b79eb2d6d3043b031108ee65_0",
      "old_fingerprint": "380dffae460a8bc4036ffad150f62142_78",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02057.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02057.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 55
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 55
        },
        "content": "response.getWriter().write(bar, 0, length)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().write(bar, 0, length)",
      "fingerprint": "061f00a682af47f0a60d58a915c37f81_0",
      "old_fingerprint": "515d71343bb898706b224daf499a292e_105",
      "code_extract": "            response.getWriter().write(bar, 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02221.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02221.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 56,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "e64e15d8fe2beb8f4452e76a7e356ab8_0",
      "old_fingerprint": "c4c2fdaea1fd98f8a5bdb104d399968d_79",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02222.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02222.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "b77fe09d71afc7f7b55ddeee54931fe3_0",
      "old_fingerprint": "639efd22ab502b0ff5594d741a2da4a9_24",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02223.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02223.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "70fe215bc3b938e45ca24150714b55e9_0",
      "old_fingerprint": "4e87f840462515187438ede4f8d7aeb9_47",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02224.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02224.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "94eec6d2966f61f45aa590874e2418d2_0",
      "old_fingerprint": "da042bfeadf22aa6f8c94dda80fd6886_46",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02225.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02225.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "e41872fbddab87856fa5895bc9529ac1_0",
      "old_fingerprint": "da461a9ccdef1032f899d43b8802fb62_45",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02226.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02226.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "494205b0e337b3e44224659c131f435f_0",
      "old_fingerprint": "163607b16425a76e1930ee31cfc1ba91_11",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02227.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02227.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "422bd9d736e3b2f13f3ee5852e102b1d_0",
      "old_fingerprint": "03c5adbd8505cd1190b859f8d9671170_10",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02228.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02228.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "3a0af93088acb4ad7c1461899eee317f_0",
      "old_fingerprint": "2ddaa1d0bc34de1227b131022d1b25c5_9",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02229.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02229.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "bfe618992f52b9c3ef7854db7c2ec73d_0",
      "old_fingerprint": "b376f7b581a4e7b3a1b1de950418cec5_41",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02230.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02230.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "3241890b8759a8312e267f3213aa251f_0",
      "old_fingerprint": "897f8356c794040689024fdca0cac4a3_40",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02231.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02231.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "e43b47e5e4e92c7c9e27505483f7ab1a_0",
      "old_fingerprint": "2cdaacb9a2ec06a32b424b27a6ac1733_39",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02232.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02232.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "8a4fe813cd779245dc10792cd4e9f11f_0",
      "old_fingerprint": "e02e4680da0b76a6ed9525091747afef_38",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02233.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02233.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "3aa8e6ed6816d233808e7d9b5a5ff7fa_0",
      "old_fingerprint": "f77314afffb6b59faaad05572a96576e_21",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02234.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02234.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 54,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "0a4eb52f403152472aaacfe7dd2da700_0",
      "old_fingerprint": "3281d4c62c25f22d9d317c5bbf856906_36",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02235.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02235.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "1ff8425a29b8b3c48a219d6357fe9f6a_0",
      "old_fingerprint": "08bc89f415061f89965cd3a91d5922e3_8",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02236.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02236.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "17636e44f6f1e53e2480351eb0c71069_0",
      "old_fingerprint": "4e4d5451715d4e859c4a29ed23449779_7",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02237.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02237.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "1fb3b9ce7e83e4ab9f026c3bb7ac2dd4_0",
      "old_fingerprint": "f275c53dd5d998019575583be9762cf5_6",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02238.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02238.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "53b0395af8c1ec30dd277058b3203bd0_0",
      "old_fingerprint": "94f0d1117e51b34aca64dfc8928742aa_5",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02239.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02239.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "83d36a67451befa576b331f50acbbc2a_0",
      "old_fingerprint": "2fda4847ef2ce132ab6fc1f3e15501a6_4",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02240.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02240.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "c52c5dcdc0dde379e9dffe7b556f3d19_0",
      "old_fingerprint": "50519ad15cde756b83d68083688ca8a1_3",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02241.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02241.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 53,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "9e650d7f423d8af0f841d1ce95ffdfe2_0",
      "old_fingerprint": "d0b6ac837d604939e3cf0eea1724975d_1",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02275.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "a76b23f074bca075c6e34e1d7d4a7f54_0",
      "old_fingerprint": "fefe345323f9cf804f7d2dfa55f1d2c5_118",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02276.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "response.getWriter().println(\"Your results are: \" + results)"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + results)",
      "fingerprint": "c77c279be60026a990e0fb1ea2820e6f_0",
      "old_fingerprint": "9ca3eab4814de0531715dd0d3f163262_110",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + results);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02278.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "5ffac9167629fd6b693e5c23516c9bd1_0",
      "old_fingerprint": "a422f18bae23a56149158be0692098a2_117",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02279.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "8948d5faa384a65977e0bb651b4ae886_0",
      "old_fingerprint": "bc4a93fe17d1aedc34e031b1a9d430bb_115",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 59,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02280.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 59,
        "end": 59,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 59,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "0d06fcfef7abe04a4a0b3b9806442b8f_0",
      "old_fingerprint": "296841a82979998811661f847d76d54d_107",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02313.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02313.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 79
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 79
        },
        "content": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 66,
      "snippet": "out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "d5391405cd3a0c1117acb7c795ed3622_0",
      "old_fingerprint": "41e2bd2e0961e32b40d20c4f558919a1_163",
      "code_extract": "        out.format(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02314.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02314.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "c292702d752a912e2cb8830433bdc557_0",
      "old_fingerprint": "79dc6737cae8fba564380a964bdff2e9_146",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02315.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02315.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "fdff9dcfe832e2d25288813885f06f76_0",
      "old_fingerprint": "d19764b00591efcf6958c0d8c953cbd5_147",
      "code_extract": "        response.getWriter().format(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02316.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02316.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "b916c5c5033d7b0713623ebf1e70a8cf_0",
      "old_fingerprint": "5c87afd1dc7f7c8c5ca4708f0199998e_148",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02317.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02317.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "fb6bf4a82b5690abc36ee0649de2a649_0",
      "old_fingerprint": "a2aefbe9e81aa372fea18c4922f11905_149",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02318.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02318.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "cf8e9abac412d042b9ddb682e5e9cdc4_0",
      "old_fingerprint": "47f9aeab109aad9d5dd81b3862b37160_141",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02319.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02319.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "2d0499e8f206ed997fad5182086c74d2_0",
      "old_fingerprint": "4962072f1dd955d6ead91c023eee43df_140",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02320.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02320.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "47175cff4a49ddc45764b595dc9e2fa0_0",
      "old_fingerprint": "c17a05d7961e467217381362e0e73dfe_150",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02321.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02321.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "ff5c6c820027d014873f1917d53c5a42_0",
      "old_fingerprint": "ddc096e32cefe70251e3114aba84edec_151",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02322.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02322.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "2ef47598f4ef786b7aaeb98ef1d3ae32_0",
      "old_fingerprint": "0c7d80fe74bd02f155b6e0c7a8588bb3_145",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02323.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02323.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "328a337d595464c0074f373a6a306ae1_0",
      "old_fingerprint": "b41ce0be6e5cab090688809a2a07c346_153",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02324.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02324.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 64,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "a80b608027cea1e05c9447a7eb8efcc7_0",
      "old_fingerprint": "dd8a9d6f202a9efdea79d9858048d2af_158",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02325.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02325.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "cc4c9b3abbdae767842926f745ca1374_0",
      "old_fingerprint": "bd9cee291b788c0e37e38dd8c878a91b_134",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02326.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02326.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "539922a71fe24129b63345e8ee37ff53_0",
      "old_fingerprint": "ce59f3740b23a5b4d4fb230d7b3cb22e_133",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02327.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02327.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 66,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "8c44176945d2b73f8264fbe38030e172_0",
      "old_fingerprint": "3f259e7238b908a21600fe6022be2ee4_165",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02328.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02328.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 66,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "ecb9583d70acfe91876231259aa087e2_0",
      "old_fingerprint": "c6375810940af2ad3aaffe0ed75715f4_166",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02329.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02329.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 66,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "098060cb04c8fef38dfc388c02fd68c3_0",
      "old_fingerprint": "26cca752d05b21ffe1ebaae803cdd2f4_162",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02330.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02330.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 66,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "fd0f18558c4ef9966bac2b653271ff16_0",
      "old_fingerprint": "0321235a6a7f8cec2d39575ea1a98850_167",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02331.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02331.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "a57512656634476efa291a0f0b67c537_0",
      "old_fingerprint": "f74a7aa0653e74c336ebc01985589852_132",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02332.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02332.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().write(bar)"
      },
      "parent_line_number": 63,
      "snippet": "response.getWriter().write(bar)",
      "fingerprint": "c66cf5baf60d42f50a532a1a4a3b97ac_0",
      "old_fingerprint": "da36a7f902d8534daf22070adee3bb08_131",
      "code_extract": "        response.getWriter().write(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02359.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 69,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "14eeb7b8362209affbab675c66c82e2d_0",
      "old_fingerprint": "ba15be83b7edce9a8d148838816c07fb_172",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02360.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 89
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 13,
          "end": 89
        },
        "content": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))"
      },
      "parent_line_number": 69,
      "snippet": "response.getWriter().println(\"Your results are: \" + String.valueOf(results))",
      "fingerprint": "15aa4e8af778e02af654e15876d56237_0",
      "old_fingerprint": "c89d1903a267074ccf514e3e846cd33a_173",
      "code_extract": "            response.getWriter().println(\"Your results are: \" + String.valueOf(results));",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02578.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02578.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().format(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(java.util.Locale.US, bar, obj)",
      "fingerprint": "9e8f81069428be54248f0327019f6a6c_0",
      "old_fingerprint": "f26acc3d20dc1f15fa8fe3a556af21e9_213",
      "code_extract": "        response.getWriter().format(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02579.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02579.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "1c42c4785d2e0ab1239e48bf9de26985_0",
      "old_fingerprint": "f99b6d489de9c369fcd75707c204904b_223",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02580.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02580.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "e010b1de5bcc9509f27751145efc6119_0",
      "old_fingerprint": "75eaf9e5013f74336efc8891123243d0_215",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02581.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02581.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().format(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().format(bar, obj)",
      "fingerprint": "d1e98c4fa74818726e2fb21ad561f3da_0",
      "old_fingerprint": "5d66f70ec0d8158100c15c7d8fbff817_216",
      "code_extract": "        response.getWriter().format(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02582.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02582.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().print(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar.toCharArray())",
      "fingerprint": "01ab51eef8c33d633cc273d726d846e5_0",
      "old_fingerprint": "34ea462ce99dbc145d46138abbff3425_201",
      "code_extract": "        response.getWriter().print(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02583.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02583.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "fae24719b0aecbe2ad0e32e9a743ea45_0",
      "old_fingerprint": "37a5cc3e7f2386f92d784598e5f2e60d_200",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02584.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02584.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "530339dcd16f759ce8b04492331cd836_0",
      "old_fingerprint": "e93e47fc8384131a38c1401ddaaf4c71_198",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02585.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02585.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "9b3ba9f121d50a395994749ae592fc8f_0",
      "old_fingerprint": "c7a005bf57f54b008e7a189bd57862d9_197",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02586.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02586.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 40
        },
        "content": "response.getWriter().print(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().print(bar)",
      "fingerprint": "6fd107f09aee3b977e4fb98e3370678c_0",
      "old_fingerprint": "82c35c0f9627004e13df9314f95b0bd3_196",
      "code_extract": "        response.getWriter().print(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02587.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02587.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 96
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 96
        },
        "content": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "533a7b005c5edbc4cf51490282f96e91_0",
      "old_fingerprint": "d96a5f51d4c68d9fa49f1c807f2a72eb_212",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, \"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02588.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02588.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "c64524a2f2e7a6dc1ee70fbd737db05f_0",
      "old_fingerprint": "4abcdb650b90c4f7ea5f5e34385e9751_214",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02589.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02589.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "f8bdba35f99a1d5a9f86ccd43fd9f083_0",
      "old_fingerprint": "cdc177f65f23f87055c4b8e892a400e5_224",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02590.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02590.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 67
        },
        "content": "response.getWriter().printf(java.util.Locale.US, bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(java.util.Locale.US, bar, obj)",
      "fingerprint": "146da6eac82a288dae1cb75d4bf7001a_0",
      "old_fingerprint": "e31a95c657cc268f98a4de118ba29bf9_211",
      "code_extract": "        response.getWriter().printf(java.util.Locale.US, bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02591.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02591.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "b1c06ff3c2f16ebd794ab4659a5c6ac7_0",
      "old_fingerprint": "ecdcca5cd0004e18caf85fddee0788e3_221",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02592.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02592.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 75
        },
        "content": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj)",
      "fingerprint": "cbc9957cb8103cf55c502f4e619ceb24_0",
      "old_fingerprint": "95f875e26dc529abe0aa8080abdd870c_222",
      "code_extract": "        response.getWriter().printf(\"Formatted like: %1$s and %2$s.\", obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02593.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02593.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 46
        },
        "content": "response.getWriter().printf(bar, obj)"
      },
      "parent_line_number": 74,
      "snippet": "response.getWriter().printf(bar, obj)",
      "fingerprint": "4af22cc5f405f0f9e01dba89bd64e456_0",
      "old_fingerprint": "f67e810a10705400ab3bd3f14dbddcbf_206",
      "code_extract": "        response.getWriter().printf(bar, obj);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02594.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02594.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "9495240ac594363ac62ff0fd4c95f979_0",
      "old_fingerprint": "93ff8fa3e922f75c10e590ce8a084301_193",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02595.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02595.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "response.getWriter().println(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar.toCharArray())",
      "fingerprint": "58a082006b1641c8fc7924954c9dfde2_0",
      "old_fingerprint": "528e3714a2ad9adfafb4df8669daddd9_192",
      "code_extract": "        response.getWriter().println(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02596.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02596.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "0c8e8d5abab0782277728f2620ae807b_0",
      "old_fingerprint": "0536dd67cfaa801dfec772c020ea752c_191",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02597.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02597.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "03b33c05cdcc2063ebaf1ce04f89b9f8_0",
      "old_fingerprint": "3f51d7263852e0055bc6fdb3d55f92fe_190",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02598.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02598.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 42
        },
        "content": "response.getWriter().println(bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().println(bar)",
      "fingerprint": "bf347a6ce4007c22dc4b63528a12ce66_0",
      "old_fingerprint": "39df5de732ad9a8ac726e97680292034_181",
      "code_extract": "        response.getWriter().println(bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02599.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02599.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 54
        },
        "content": "response.getWriter().write(bar.toCharArray())"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().write(bar.toCharArray())",
      "fingerprint": "164f5b63717fe5a9b417a90ec2ce7075_0",
      "old_fingerprint": "103f64a6bb70e807d023483a8711a672_187",
      "code_extract": "        response.getWriter().write(bar.toCharArray());",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02600.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02600.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 76,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "140594b8326e3d87954b8ee953139e3f_0",
      "old_fingerprint": "511d3e982dbdc5297c67e6146b84a3fe_227",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02601.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02601.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 69
        }
      },
      "sink": {
        "start": 76,
        "end": 76,
        "column": {
          "start": 13,
          "end": 69
        },
        "content": "response.getWriter().write(bar.toCharArray(), 0, length)"
      },
      "parent_line_number": 76,
      "snippet": "response.getWriter().write(bar.toCharArray(), 0, length)",
      "fingerprint": "c3b0b3a8a98a1fd9aad45d3a90721c42_0",
      "old_fingerprint": "de4c6ced0c62eedf787704b5dc90f4b6_228",
      "code_extract": "            response.getWriter().write(bar.toCharArray(), 0, length);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02608.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02608.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "6c6b059e27ac29dcf22c417431b10ca5_0",
      "old_fingerprint": "3e4d9b8ceb47419cfe81688761589660_186",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["79"],
      "id": "java_lang_xss_response_writer",
      "title": "Possible cross site scripting threat detected.",
      "description": "## Description\n\nMake sure to encode and sanitize any user input before passing it down to `response.getWriter()` to avoid cross-site scripting (XSS) attacks.\n\n✅ Use an encoder to minimize XSS risk\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String encodedUserInput = Encode.forHtml(userInput)\n  response.getWriter().write(encodedUserInput)\n```\n\n✅ Even better, sanitize user input\n\n```java\n  String userInput = req.getQueryString(\"user\");\n  String sanitizedUserInput = sanitize(userInput);\n  response.getWriter().write(sanitizedUserInput);\n```\n\n## Resources\n\n- [OWASP XSS Prevention Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [OWASP Java Encoder](https://owasp.org/www-project-java-encoder/)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_xss_response_writer",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02609.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02609.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 62
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 62
        },
        "content": "response.getWriter().write(\"Parameter value: \" + bar)"
      },
      "parent_line_number": 73,
      "snippet": "response.getWriter().write(\"Parameter value: \" + bar)",
      "fingerprint": "c941c6ee33043df6a4030db1f431cc45_0",
      "old_fingerprint": "6ebf3bf7b20c6d64cd5f228b8e7f5c7b_182",
      "code_extract": "        response.getWriter().write(\"Parameter value: \" + bar);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00032.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00032.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 54,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "aaa9f1170590493b0b7825abb5258408_0",
      "old_fingerprint": "b52bdf8bf32a28d8ba94250fe3e8104f_0",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00033.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00033.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 54,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "3b12103ff2d108164ebc68b39e39c1d3_0",
      "old_fingerprint": "3c13643b6403eb14b126f089c8820338_1",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00038.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00038.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 79,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 64,
        "end": 79,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 64,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "d29ba0d0ae2c92f060a39a60fe47385f_0",
      "old_fingerprint": "0793802a1afb13652140f090b9b44d47_38",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00039.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00039.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "29d2374c2bfbea1593f8219d84da52a7_0",
      "old_fingerprint": "6ae910b475a8247e7cbbefb47fc42fe6_41",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00102.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00102.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 73,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "5121c63865acf9d3c1ab39c5840a3c1e_0",
      "old_fingerprint": "9fae1c1a02b7f51f3c8421ba8f9a108e_67",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00103.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00103.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 77,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 76,
        "end": 77,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 76,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "90b309a363499bc2fccbe3ed9b063d62_0",
      "old_fingerprint": "c5d95be7008deeb477c0dbbca913383a_86",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00104.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00104.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "86228f0ef5ee7cf893107d5c673a1e3a_0",
      "old_fingerprint": "6bf7f6b729bb0cf87ec13478e7eaed68_79",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00194.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00194.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 63,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "b132e598e6f68d62245af65f9ba49c18_0",
      "old_fingerprint": "33324c66093cafc5ed6a7e9095aff078_36",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00195.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00195.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 61,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "d332e8c0538b70e0b6e0f6889271dd65_0",
      "old_fingerprint": "e6cc8c90eea4b0949b453aaee5822751_34",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00198.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00198.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 60,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "12858fb131dc1b4d9e5a1f62d74e1879_0",
      "old_fingerprint": "e8dcc2dd891ba04e18d6940e63ced32d_33",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00336.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00336.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 66,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 65,
        "end": 66,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "3ff27f1ba420c5c40cd123d25a3b00cb_0",
      "old_fingerprint": "b9ab84f445b4d5365e26183c2cf306a7_51",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00338.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00338.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 65,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 64,
        "end": 65,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 64,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "8e6c3fbf290b93a51ec825ada832e2fa_0",
      "old_fingerprint": "67b1d9c9499625e1131fc26d2966e19a_37",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00339.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00339.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 63,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "23ceafd1b74b998e7df892178f970d13_0",
      "old_fingerprint": "01a911d96494600ec25a387427145d61_35",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00597.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00597.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 67,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "fa9717f8aa990f42e4bd268882806fd4_0",
      "old_fingerprint": "e5c9cfaf695ab7748173d5823b89ea53_54",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00598.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00598.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 73,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "4fca9bdc583b2cc21ad837d6b9663c26_0",
      "old_fingerprint": "16752f2a531cb92bb56bd1fd375959fa_68",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00840.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00840.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 80,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "baaab3b2e19023adff604ae6f1933370_0",
      "old_fingerprint": "a611ea6f8ac5eeb1e1938aa73dc18252_89",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00845.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00845.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 80,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "a07b736dcb7e8c6305374e1d667bc720_0",
      "old_fingerprint": "0d3feaa6ec6c928929e0f3b98458af6a_90",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00846.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00846.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "b7eb78a65d1533dbec4f019888a166bc_0",
      "old_fingerprint": "0bb353780d0720f3b691c473c74fa946_75",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01005.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01005.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "f228f80be1fca02c0731aa3f4dd436ab_0",
      "old_fingerprint": "f949921980e8f101b34e921e8672451f_63",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 72,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01006.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 72,
        "end": 73,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 72,
        "end": 73,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 72,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "f06a1109a7e179928d3a38e6b5feea77_0",
      "old_fingerprint": "613b40245b05fc6b371f4b7d529286c2_66",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 71,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01007.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01007.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 71,
        "end": 71,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 71,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "87402aa0122027518039f183e3459fb0_0",
      "old_fingerprint": "9f0115d69cc4c60032e087c3108a3f8d_65",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01008.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01008.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "5efa73e694fc2aaf3cc17188c1700e3c_0",
      "old_fingerprint": "5eef99f7303cdb400888fae61ad355f5_64",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01009.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01009.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "c2328f2007742062d59c9ad1fa81d112_0",
      "old_fingerprint": "d440ec41ccf67c4ceef7ce6b7515a436_57",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01010.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01010.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "c49aefa238bec74280960ee1f9187254_0",
      "old_fingerprint": "1e6d0ba83db7765a0ebba411f3a303e5_58",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01085.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01085.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "1f4b726af38555c97cd5f448b7c945f3_0",
      "old_fingerprint": "5fcabd12206e12ccc75a0ac92d6dbc32_10",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01086.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01086.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "df667096fa60160ca51fb9612262e249_0",
      "old_fingerprint": "a703013dd186ecd63cff4608141e1f55_11",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01087.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01087.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "72ddcbb8bfe768a9c25ba6b03485b37b_0",
      "old_fingerprint": "017c2eee3fd89922f52a202ac564988b_28",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01088.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01088.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "ce47541f162eecf4e7ee2a2b4236c42c_0",
      "old_fingerprint": "5330de682cb1b9d8ba37ac4413333aee_26",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01089.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01089.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "82dd400fc9ea50fe99af4e567ac129f2_0",
      "old_fingerprint": "4c90f9f094902a03b44a3c7b889d6c68_17",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01214.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01214.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "158b358e0ccdb51ba848007ab7c61650_0",
      "old_fingerprint": "c169a9783085efdc6e416e69d60789b5_29",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 60,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01215.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01215.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 60,
        "end": 61,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 60,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "c1a971c330e7832b78cd9ccac54aea56_0",
      "old_fingerprint": "da8ddea863f6bf4d1af589b0014303be_32",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01386.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01386.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "832a46548449a5afe9df52e40baca699_0",
      "old_fingerprint": "733d7b4135b0d224bedb0e96af2b27cb_15",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01387.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01387.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "4609a30a616da8f94320def9836d06c8_0",
      "old_fingerprint": "c49ffaee43f51a1cd2757997d4e74544_16",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01388.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01388.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "8cb8eedf39d6cd94f03991e7bfce3fa4_0",
      "old_fingerprint": "24068684d7fab8a407731956f63a5c26_14",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01389.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01389.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "f9b7e024628768a1fabe53a61bf91503_0",
      "old_fingerprint": "6995123d0ec9260f760c2b254ee1e781_5",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01390.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01390.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "7ea7ac60890998d0220113f6a2edb6bd_0",
      "old_fingerprint": "988f0664099317b9be11d735aa9277df_19",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01465.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01465.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "8e88b4258a367a11e52054d75d4b6f3e_0",
      "old_fingerprint": "1edee9b8b645dc3c2622eb33286de185_45",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01466.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01466.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 80,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 65,
        "end": 80,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "d77fee08ed7c989d82bd10e28fbd2b26_0",
      "old_fingerprint": "8ef2f72318c11af6874903661a58bf4b_44",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01467.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01467.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "feacf7e00c821a5f3352368a12733075_0",
      "old_fingerprint": "448a301526369a98169d97ff549292be_43",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01468.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01468.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "10388fe8676ad40695fcd1cd5adb914c_0",
      "old_fingerprint": "f70d5872ebfda061b20c4257d903e3fe_42",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01469.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01469.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "e2f0f56a6a2736e76cc9a450410712e2_0",
      "old_fingerprint": "4c2b4bfe33c8f1238c49b99107bb8f03_48",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01470.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01470.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 66,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "a48f1a9da15c6cf6e02a555876f745a2_0",
      "old_fingerprint": "eb08abbf94c5b913d2d403527377e18d_53",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01471.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01471.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "6d031d916ae9aef161fe67907a90382d_0",
      "old_fingerprint": "646db0cfcbf0146d640093cfa75947f4_39",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01720.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01720.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "7f93f1e98abc8377b2d891e834b52466_0",
      "old_fingerprint": "01e1585318b14377996a345cb4827d56_85",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01721.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01721.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "0f59244d5ddbc167b3ae68bdd2f2ec29_0",
      "old_fingerprint": "e077a926e5a585bb8795215d8438d551_71",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01722.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01722.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "44728b2b4169635d80725c2e74d362c8_0",
      "old_fingerprint": "dc209ac5c4e0ce09accaef99cd280b56_72",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 77,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01723.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01723.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 77,
        "end": 78,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 77,
        "end": 78,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 77,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "64610c0d58247ed6cd184df275f988e1_0",
      "old_fingerprint": "bc194143b3871aa1a5aecc0fa9846a6c_88",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01724.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01724.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "e490b1e012f6999a6130365a68fc8eb3_0",
      "old_fingerprint": "34bf0d9f36bd4c31acd4fb5fc42f83d6_74",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 76,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01725.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01725.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 76,
        "end": 77,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 76,
        "end": 77,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 76,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "0b7decf7bd761d11c049607d3684e191_0",
      "old_fingerprint": "c5e06146ee37e3fe59b93352370f5a3e_87",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01726.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01726.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "0d683ebce13e24a32d1de54a0e03fe6e_0",
      "old_fingerprint": "e047c0865208b9b289a039fa61829ef8_81",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01727.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01727.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "9232da6f67912ee4325c6144ae91bc81_0",
      "old_fingerprint": "e4f59d00d00ed54af16ef9ef2e07e9cf_82",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01881.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01881.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "97ccd63e4d35cb53f18b9f6fbfc49ea6_0",
      "old_fingerprint": "8cf2bae9f1b6510561d38aa8c41e256c_61",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01882.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01882.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 85,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 70,
        "end": 85,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "82402c918ea762c8162dd4ec84e14452_0",
      "old_fingerprint": "8e8d5ebbcefe24b7cdedbe5847154a79_60",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01883.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01883.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "eaf97a4bb4951bdaecf054223a8b3f29_0",
      "old_fingerprint": "45e3db7a34b2f20f8774e6fe2e233ca0_59",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01884.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01884.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 70,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "84a5edfe2e71716e6cc5a0c70eeed706_0",
      "old_fingerprint": "f550bd3c5d643345c18f72ef2f69afdd_62",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01963.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01963.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "7010c38be202215e3b7f4c7aa2fac81d_0",
      "old_fingerprint": "e03a6364272b1a34eac301f328f2f4a3_9",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01964.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01964.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 71,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 56,
        "end": 71,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "433adb8bf9a7bc8b1607f72a0c2e7351_0",
      "old_fingerprint": "a12c4edd1654d7b814d1f86e9ac50da9_8",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01965.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01965.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 58,
        "end": 59,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "c4c2ac7fe86dd860aae492f1f3e0801e_0",
      "old_fingerprint": "d0145350f5d79d817d51fb595c48010a_27",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01966.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01966.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "d434c31f9e517abb1d5a5ce28fcc0a4d_0",
      "old_fingerprint": "e96e868abbd45bb0cf9eca9710598360_24",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01967.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01967.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "c8ea0e3eef89b3822899365fdd79f8dd_0",
      "old_fingerprint": "c583e171a11615c31119ad44a0440e9b_22",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01968.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01968.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "c6662bf3aec692cf379708495aa79bf9_0",
      "old_fingerprint": "a7a045314ff22eb44ebd62a4da758b31_13",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02090.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02090.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "a7d07bf658a053f86f3b2a444773b656_0",
      "old_fingerprint": "cb4b3347b67b2ea36cd0daf44db74d8d_31",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02091.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02091.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 73,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 58,
        "end": 73,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 58,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "93acf081db4150bf28de593519bb1cb7_0",
      "old_fingerprint": "3b9e236a555af1825ab65fa80488b2a5_30",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02272.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02272.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "b7fcc621cf16309baf5395987e9fae84_0",
      "old_fingerprint": "f2e5f4d5a7963eb19a7b26568ea5362c_4",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02273.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02273.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "7c34b19e5744477fbb7270923260df11_0",
      "old_fingerprint": "7a4556632d6c6c33b84428b2b4ceba96_7",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02274.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02274.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 70,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 55,
        "end": 70,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "5aa9d113c894c03f8b7315c04683dc88_0",
      "old_fingerprint": "abd9389c3b9af2c33b626413d38b9558_6",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02275.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02275.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "801fae9e5bcb5255b917657c1e87b2f0_0",
      "old_fingerprint": "2bb9269c931353c80a8eefb4698157a1_18",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02276.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02276.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 48
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class)",
      "fingerprint": "ea331de2ab2a9d5eabbb91163c977028_0",
      "old_fingerprint": "c13b5b31ffdb9994a37128262e4b0fb7_20",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Integer.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02277.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02277.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "d05bae36c321eaffe8cc5050d90a7b91_0",
      "old_fingerprint": "d5a7b9cf08579726172e97a8d200fc8a_3",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02278.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02278.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "f9d6da8873eea38d409facc01e874843_0",
      "old_fingerprint": "e6609e875f414fd6ac6d0a4565796f8c_25",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02279.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02279.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "7c098cfd9b002e972b1d987f717f1a98_0",
      "old_fingerprint": "9d46c92d0f12be93d90315e8662c39df_23",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 57,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02280.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02280.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 57,
        "end": 58,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 57,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "f9a4cf678cea7615677638c5c9fcfc7c_0",
      "old_fingerprint": "c7c6aee4f3f816c26321a433d71e59d9_21",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02281.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02281.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 21,
          "end": 93
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 21,
          "end": 93
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"
      },
      "parent_line_number": 56,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)",
      "fingerprint": "4be723e933ce8b813c30c8113c46e619_0",
      "old_fingerprint": "2ee362a540694b68813229225bf63039_12",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02282.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02282.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 55,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "2bce9dfd258904c56e88d77c7f765c28_0",
      "old_fingerprint": "c800b65f66b6bd9e06341cd22b633c21_2",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02356.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02356.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "9487dcef333997dc46460b6ec2b8a42f_0",
      "old_fingerprint": "95f76f88d6d581f246bfacddc36f3713_46",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02357.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02357.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 80,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 65,
        "end": 80,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "fa68c7f55d0ab226af2befa7671028a1_0",
      "old_fingerprint": "d69c1717151a4112dacafd3c2802ea4f_47",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02358.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02358.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "c5909d65e9aba1a38fee2e6eac5dc82f_0",
      "old_fingerprint": "01678fb619acba469b0796b20ea13ddb_40",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02359.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02359.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 68,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 67,
        "end": 68,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 67,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "f91c457ae9662de90190f66041d77842_0",
      "old_fingerprint": "0d626f5bed0fe1af29dcc36ee3cd8c12_56",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02360.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02360.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 68,
        "column": {
          "start": 21,
          "end": 45
        }
      },
      "sink": {
        "start": 67,
        "end": 68,
        "column": {
          "start": 21,
          "end": 45
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)"
      },
      "parent_line_number": 67,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class)",
      "fingerprint": "667cd7a69f744e8574b246933dd125c3_0",
      "old_fingerprint": "e1457a8bfa5d8bb58fa04b6095e8823f_55",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, Long.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02361.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02361.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 67,
        "column": {
          "start": 21,
          "end": 64
        }
      },
      "sink": {
        "start": 66,
        "end": 67,
        "column": {
          "start": 21,
          "end": 64
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)"
      },
      "parent_line_number": 66,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class)",
      "fingerprint": "34b72527295f75adb24ffffb884e3520_0",
      "old_fingerprint": "41399ba86d22e824fb932afc7773bb84_52",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForObject(\n                            sql, new Object[] {}, String.class);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02362.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02362.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "396e15cac7243a3654228f0a60323081_0",
      "old_fingerprint": "5802abe56c3f2e4da86858a9ecfa22f9_50",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02363.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02363.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 65,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "aaea725f6cd8026de4a6544818fec733_0",
      "old_fingerprint": "b4921491c5aab290a0c81d58280c1a33_49",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02638.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02638.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "82d2e0701b67ae17e8a650f6de701d74_0",
      "old_fingerprint": "b6d9d28ccac296b3e3f5e865d03db68c_69",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02639.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02639.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "a6213e739ec761366e3fa7a10ffb9729_0",
      "old_fingerprint": "992749388c368f81cfd218f24322a16c_83",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02640.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02640.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 81
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)",
      "fingerprint": "ee1891fb5a94e40e74e273127bfd5342_0",
      "old_fingerprint": "ceb565b00fdf11449331e6217d012ddb_84",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02641.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02641.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        }
      },
      "sink": {
        "start": 75,
        "end": 90,
        "column": {
          "start": 21,
          "end": 31
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                @Override\n                                public String mapRow(java.sql.ResultSet rs, int rowNum)\n                                        throws java.sql.SQLException {\n                                    try {\n                                        return rs.getString(\"USERNAME\");\n                                    } catch (java.sql.SQLException e) {\n                                        if (org.owasp.benchmark.helpers.DatabaseHelper\n                                                .hideSQLErrors) {\n                                            return \"Error processing query.\";\n                                        } else throw e;\n                                    }\n                                }\n                            })",
      "fingerprint": "1bfa13e045cbd9cf6c11993a60b37c54_0",
      "old_fingerprint": "aaa95f389b796d7ea265e33c65b68b9e_70",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(\n                            sql,\n                            new org.springframework.jdbc.core.RowMapper<String>() {\n                                ...omitted (buffer value 3)\n                                    }\n                                }\n                            });",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02642.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02642.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "8fbb4ed6dcebe14505276350c3f4a347_0",
      "old_fingerprint": "5d19f1ff7117220b1b1b2a528e011e83_80",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02643.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02643.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 94
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)",
      "fingerprint": "1c3e9bb6a9a9b19a96792dc8f2ce3618_0",
      "old_fingerprint": "690c6a8455bd8a92f5d13edd13e0e679_78",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02644.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02644.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "28150bb918e14ea93d7682ef58300903_0",
      "old_fingerprint": "54f0c03db7e32c91f28ad38223ffa624_77",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02645.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02645.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 21,
          "end": 96
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)",
      "fingerprint": "57c54a71d181defaad0ce344bfc76099_0",
      "old_fingerprint": "b5f850e2b21f031980112e5f78ae148d_76",
      "code_extract": "                    org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["89"],
      "id": "java_spring_sqli",
      "title": "Unsanitized user input in SQL query detected.",
      "description": "## Description\n\nIncluding unsanitized data, such as user input or request data, in raw SQL\nqueries makes your application vulnerable to SQL injection attacks.\n\n## Remediations\n\n❌ Avoid raw queries, especially those that contain unsanitized user input:\n\n```java\n  String query = \"update user set name='\"+uri.getQueryParameter(\"name\")+\"' where id='\"+uri.getQueryParameter(\"userId\")+\"'\";\n  return jdbcTemplate.update(query);\n```\n\n✅ Use `PreparedStatement` creators and setters to construct SQL queries\n\n```java\nnew PreparedStatementCreator() {\n  public PreparedStatement createPreparedStatement(Connection conn) throws SQLException {\n    String updateString = \"update user set name = ? where id = ?\";\n    return conn.prepareStatement(updateString);\n  }\n}\n\nnew PreparedStatementSetter() {\n  public void setValues(PreparedStatement preparedStatement) throws SQLException {\n    preparedStatement.setString(1, uri.getQueryParameter(\"name\"))\n    preparedStatement.setInt(2, uri.getQueryParameter(\"userId\"))\n  }\n}\n```\n\n## Resources\n- [JDBC Template class](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html)\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_spring_sqli",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02646.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02646.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 13,
          "end": 85
        },
        "content": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"
      },
      "parent_line_number": 75,
      "snippet": "org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)",
      "fingerprint": "32ca99a0439544b990a682bd8581d723_0",
      "old_fingerprint": "c4e05952e8a430e0ce918ca377c0e4ef_73",
      "code_extract": "            org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql);",
      "severity": "medium"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 70,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/DataBaseServer.java",
      "filename": "java/org/owasp/benchmark/helpers/DataBaseServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 70,
        "end": 70,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 70,
      "snippet": "e.printStackTrace()",
      "fingerprint": "829dea4788cbad5e5bb3e79be3fd8d93_0",
      "old_fingerprint": "3e299be8edbfdd51d01a34e69cc195b8_2",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 165,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/DatabaseHelper.java",
      "filename": "java/org/owasp/benchmark/helpers/DatabaseHelper.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 165,
        "end": 165,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 165,
        "end": 165,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 165,
      "snippet": "e.printStackTrace()",
      "fingerprint": "e75099ff7411e1d47fca6cea85d22efb_0",
      "old_fingerprint": "38b99d441c8057d4d309484d3b6c37b2_12",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 125,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPManager.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPManager.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 125,
        "end": 125,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 125,
        "end": 125,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 125,
      "snippet": "e.printStackTrace()",
      "fingerprint": "c1902ad2c8e683d3bf8b5dfdc2115a6c_0",
      "old_fingerprint": "637fad8378b84fb104e23f838389ea7a_5",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 120,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 120,
        "end": 120,
        "column": {
          "start": 13,
          "end": 33
        }
      },
      "sink": {
        "start": 120,
        "end": 120,
        "column": {
          "start": 13,
          "end": 33
        },
        "content": "e1.printStackTrace()"
      },
      "parent_line_number": 120,
      "snippet": "e1.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_0",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_4",
      "code_extract": "            e1.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 134,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 134,
        "end": 134,
        "column": {
          "start": 13,
          "end": 33
        }
      },
      "sink": {
        "start": 134,
        "end": 134,
        "column": {
          "start": 13,
          "end": 33
        },
        "content": "e1.printStackTrace()"
      },
      "parent_line_number": 134,
      "snippet": "e1.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_1",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_7",
      "code_extract": "            e1.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 149,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 149,
        "end": 149,
        "column": {
          "start": 13,
          "end": 33
        }
      },
      "sink": {
        "start": 149,
        "end": 149,
        "column": {
          "start": 13,
          "end": 33
        },
        "content": "e1.printStackTrace()"
      },
      "parent_line_number": 149,
      "snippet": "e1.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_2",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_9",
      "code_extract": "            e1.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 157,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 157,
        "end": 157,
        "column": {
          "start": 13,
          "end": 33
        }
      },
      "sink": {
        "start": 157,
        "end": 157,
        "column": {
          "start": 13,
          "end": 33
        },
        "content": "e1.printStackTrace()"
      },
      "parent_line_number": 157,
      "snippet": "e1.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_3",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_10",
      "code_extract": "            e1.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 165,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 165,
        "end": 165,
        "column": {
          "start": 13,
          "end": 33
        }
      },
      "sink": {
        "start": 165,
        "end": 165,
        "column": {
          "start": 13,
          "end": 33
        },
        "content": "e1.printStackTrace()"
      },
      "parent_line_number": 165,
      "snippet": "e1.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_4",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_11",
      "code_extract": "            e1.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 175,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 175,
        "end": 175,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 175,
        "end": 175,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 175,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_5",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_13",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 190,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 190,
        "end": 190,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 190,
        "end": 190,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 190,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_6",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_14",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 206,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 206,
        "end": 206,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 206,
        "end": 206,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 206,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_7",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_15",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 221,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 221,
        "end": 221,
        "column": {
          "start": 21,
          "end": 40
        }
      },
      "sink": {
        "start": 221,
        "end": 221,
        "column": {
          "start": 21,
          "end": 40
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 221,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_8",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_16",
      "code_extract": "                    e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 226,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 226,
        "end": 226,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 226,
        "end": 226,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 226,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_9",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_17",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 252,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 252,
        "end": 252,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 252,
        "end": 252,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 252,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_10",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_18",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 274,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/LDAPServer.java",
      "filename": "java/org/owasp/benchmark/helpers/LDAPServer.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 274,
        "end": 274,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 274,
        "end": 274,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 274,
      "snippet": "e.printStackTrace()",
      "fingerprint": "587619a43545cb323b56ff13705b1868_11",
      "old_fingerprint": "8926abd36db8cb17872488544b029087_19",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 44,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Startup.java",
      "filename": "java/org/owasp/benchmark/helpers/Startup.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 44,
        "end": 44,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 44,
        "end": 44,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 44,
      "snippet": "e.printStackTrace()",
      "fingerprint": "7b0d3c6f66ded1370f3d6aaf66fe12af_0",
      "old_fingerprint": "d052a09467843fa0728b573c71c4f1c1_0",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 48,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/ThingFactory.java",
      "filename": "java/org/owasp/benchmark/helpers/ThingFactory.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 48,
        "end": 48,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 48,
      "snippet": "e.printStackTrace()",
      "fingerprint": "43ddeeda193020e5458c8a260ed6a0bd_0",
      "old_fingerprint": "a9232a91c335ac0fb27915dbdc037f0d_1",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 119,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Utils.java",
      "filename": "java/org/owasp/benchmark/helpers/Utils.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 119,
        "end": 119,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 119,
        "end": 119,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 119,
      "snippet": "e.printStackTrace()",
      "fingerprint": "550dfa136211faf302c7f45bae740597_0",
      "old_fingerprint": "bb80eb988b2cf7f866598bffe6003b19_3",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 127,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Utils.java",
      "filename": "java/org/owasp/benchmark/helpers/Utils.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 127,
        "end": 127,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 127,
        "end": 127,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 127,
      "snippet": "e.printStackTrace()",
      "fingerprint": "550dfa136211faf302c7f45bae740597_1",
      "old_fingerprint": "bb80eb988b2cf7f866598bffe6003b19_6",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 135,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Utils.java",
      "filename": "java/org/owasp/benchmark/helpers/Utils.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 135,
        "end": 135,
        "column": {
          "start": 17,
          "end": 36
        }
      },
      "sink": {
        "start": 135,
        "end": 135,
        "column": {
          "start": 17,
          "end": 36
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 135,
      "snippet": "e.printStackTrace()",
      "fingerprint": "550dfa136211faf302c7f45bae740597_2",
      "old_fingerprint": "bb80eb988b2cf7f866598bffe6003b19_8",
      "code_extract": "                e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["209"],
      "id": "java_lang_information_leakage",
      "title": "Possible information leakage detected.",
      "description": "## Description\n\nPrinting a stack trace to the default output is risky because it may contain sensitive information such as the technical details of your application or environment (which in turn could expose your application to path traversal attacks, for example), or worse, user-specific data.\n\n## Remediations\n\n❌ Avoid printing the full stack trace\n\n✅ Less is more! Only log the minimum required details in error messages\n\n## Resources\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_information_leakage",
      "line_number": 333,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/Utils.java",
      "filename": "java/org/owasp/benchmark/helpers/Utils.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 333,
        "end": 333,
        "column": {
          "start": 13,
          "end": 32
        }
      },
      "sink": {
        "start": 333,
        "end": 333,
        "column": {
          "start": 13,
          "end": 32
        },
        "content": "e.printStackTrace()"
      },
      "parent_line_number": 333,
      "snippet": "e.printStackTrace()",
      "fingerprint": "550dfa136211faf302c7f45bae740597_3",
      "old_fingerprint": "bb80eb988b2cf7f866598bffe6003b19_20",
      "code_extract": "            e.printStackTrace();",
      "severity": "warning"
    },
    {
      "cwe_ids": ["306"],
      "id": "java_lang_missing_database_authentication",
      "title": "Missing authentication for database detected",
      "description": "## Description\n\nA database server with inadequate authentication is extremely vulnerable to security attacks.\nEnsure that your database server has the recommended authentication configuration (password, username), and consider using a key management system for any passwords.\n\n## Resources\n\n- [OWASP Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html)\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_missing_database_authentication",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/helpers/HibernateUtil.java",
      "filename": "java/org/owasp/benchmark/helpers/HibernateUtil.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 20,
          "end": 62
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 20,
          "end": 62
        },
        "content": "DriverManager.getConnection(url, \"sa\", \"\")"
      },
      "parent_line_number": 74,
      "snippet": "DriverManager.getConnection(url, \"sa\", \"\")",
      "fingerprint": "ceeec265423d4109ed3b527a7eef90aa_0",
      "old_fingerprint": "b6cb7e92177324e1f4bcad6357d08b18_0",
      "code_extract": "            conn = DriverManager.getConnection(url, \"sa\", \"\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 67,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 58
        }
      },
      "sink": {
        "start": 67,
        "end": 67,
        "column": {
          "start": 9,
          "end": 58
        },
        "content": "request.getSession().setAttribute(param, \"10340\")"
      },
      "parent_line_number": 67,
      "snippet": "request.getSession().setAttribute(param, \"10340\")",
      "fingerprint": "979f8ac61e2fd10cde9f0699bd083942_0",
      "old_fingerprint": "1066ddf52a4221e531b07287fa45a309_89",
      "code_extract": "        request.getSession().setAttribute(param, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00010.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00010.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dd54b51c62fe32fd7304f29faf0952b6_0",
      "old_fingerprint": "3cb93b46e6a12969ab0c47db3d78dd96_430",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00023.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00023.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c9c47a281ad6de5bdc651463b682824b_0",
      "old_fingerprint": "feb6e19e1b32338b3d0d177f263a3e29_117",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 52,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00031.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00031.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 9,
          "end": 55
        }
      },
      "sink": {
        "start": 52,
        "end": 52,
        "column": {
          "start": 9,
          "end": 55
        },
        "content": "request.getSession().putValue(\"userid\", param)"
      },
      "parent_line_number": 52,
      "snippet": "request.getSession().putValue(\"userid\", param)",
      "fingerprint": "abf00d81ec425b2e3d0dbc2c04ae9096_0",
      "old_fingerprint": "b30e7d2c7b0df10c18ad4253d34d7305_35",
      "code_extract": "        request.getSession().putValue(\"userid\", param);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00042.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00042.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "01a36ec9704c353fab4121c1e7f1df77_0",
      "old_fingerprint": "e2e9dcbb22824a7185605fbb4709b5b3_168",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00066.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00066.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4b32c0f079d1cb8b38deeffd674e0bcc_0",
      "old_fingerprint": "d31068300407572d027ec9df77f67b8f_547",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 124,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00067.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00067.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 124,
        "end": 124,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 124,
        "end": 124,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 124,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eba10389c05b043f1ed6fce82b3578ce_0",
      "old_fingerprint": "06e63f641ecd1105531f2a67d1ea588c_606",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00068.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00068.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1fd83c3498e075efcb3810e224f21db6_0",
      "old_fingerprint": "3ca76b5f8b14a22db5258059dfc4d5eb_545",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00078.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00078.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "90fb147d342e3d8b94111356df2e862c_0",
      "old_fingerprint": "b1bdf099b6997b75b054c815cc526eb9_565",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00079.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00079.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d382c31bf33027934254ec08d95cf6ee_0",
      "old_fingerprint": "eaf779daf0749be218f7e85121a91e28_536",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00080.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00080.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "962480e232ad1cff9d1fcff5100e0787_0",
      "old_fingerprint": "fff15dfc523fc3d18a73600024f93ef0_479",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00081.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00081.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "04fd0144067685cc365a9c12b417bd01_0",
      "old_fingerprint": "6852a041130c08ee276c6ebfea646bea_461",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00082.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00082.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9881c5730b706f9df90f3ef1fde4015d_0",
      "old_fingerprint": "0958520d33c63fd84ce12c34e7f389b1_467",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00083.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00083.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7f35024107e7498ced4010236b69085c_0",
      "old_fingerprint": "638a55287969cddc887b6f3fc5a12f36_520",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00084.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00084.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ff8a23896531a5b1ea1f8c0684f25ca6_0",
      "old_fingerprint": "d1a8d862079f3602467d02639c8e8213_497",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00085.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00085.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1f1768475129ad6567f97304048b4776_0",
      "old_fingerprint": "f3af316621c38da7e1a533e077692514_544",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00086.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00086.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eb1e9c166e0ab48652ea2275354a2101_0",
      "old_fingerprint": "88d07383c068ca98b6aab97dbbf745a7_540",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 112,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00094.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00094.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 112,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c9a78e7c126ab330aaffef8ed5f529c8_0",
      "old_fingerprint": "3dee134df5653ca94cae790877e74045_591",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00095.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00095.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ca3f09668840faa8b0b4bdb7b6b714e3_0",
      "old_fingerprint": "9c66e84a29be8022bcf1e966924a78af_566",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00096.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00096.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "524984d00a575a0ad435c313de2612d4_0",
      "old_fingerprint": "4e2a4b65e6c8f90ac62410e30963d78f_558",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00098.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00098.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "0f472a413da091a0964f3faddd077cf2_0",
      "old_fingerprint": "94168ecdd26e390f2dce9494d23da715_90",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 78,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00099.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00099.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 78,
        "end": 78,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 78,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "68fdb78c4c11f2243567180d23522c96_0",
      "old_fingerprint": "00ae868a21d6d1cc6e07a550bf779346_114",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00140.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00140.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d895be3f3fa4e2a4220a3ec9bf4f19b0_0",
      "old_fingerprint": "842adeca0737b0b97ed9815357f835d3_444",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00160.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00160.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "61cf1cb223439fef10d55e141cf1acba_0",
      "old_fingerprint": "4071b83fbf5a04984988b626b1736cdf_397",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00161.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00161.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "12db15c59b291714014e0d8579a9a71f_0",
      "old_fingerprint": "52da53910846428eab2da51004282753_358",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00162.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00162.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b387b37c5fb9c53454917c777ca54dc0_0",
      "old_fingerprint": "1355cfa3dc348ae4f38d57cf92694fc2_230",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00163.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00163.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0ab2f0c6d99646c749a2ec669cfd1517_0",
      "old_fingerprint": "6cff85c0aa5f0e88a0d5862e60b78256_245",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00164.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00164.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f1c3efdaa5d3a8d59cc31c638744fbc4_0",
      "old_fingerprint": "da2d234f9e819a967d0cca4b36992482_331",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00165.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00165.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fab4b42132ce525ac431a957f56f61c7_0",
      "old_fingerprint": "3f8d5039ded4a7439848a24fd9992653_299",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00166.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00166.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8d545d7f805224f607d2683e2007cdf3_0",
      "old_fingerprint": "6e6b61db44441c9e04d601ae4db0813d_244",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00167.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00167.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "42bde405e30e954678d1481c48bb0fda_0",
      "old_fingerprint": "85c79b6f62051e3e05347ffc7df3175c_381",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00168.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00168.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b012e5eee381c3220b4d0590100d0691_0",
      "old_fingerprint": "6cf7c01f41b86cfbedfca858bac773d6_353",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00178.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00178.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "53a2d1a729a671c95fe7afe79a928d0e_0",
      "old_fingerprint": "8b60526283ef5a2a7b30209ca4870bbe_382",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00179.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00179.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dca67ac3a8b3fc0669e2578e813645f7_0",
      "old_fingerprint": "29ebc5e958a55de79e6cededa7ea3df7_333",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00180.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00180.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "41a7e1483afa29f02febba8ea2e83209_0",
      "old_fingerprint": "6ccce4e2b58564994e48047c8121b9f4_415",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00181.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00181.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1f860837a8553639d3d8c4e12b774ee6_0",
      "old_fingerprint": "674956c658d2fb1fb38fbb114fa27030_339",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00182.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00182.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f88b092348474caf1e7e931680c3ac8d_0",
      "old_fingerprint": "e4e27482b781987a04fa73a735c07044_583",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00183.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00183.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cf78ab47273e8cc3160e004f7ba63de8_0",
      "old_fingerprint": "b622916374e1122240d764259973538a_564",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00184.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00184.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9e5ebc56308f8b05ebc2b3543c9d41e1_0",
      "old_fingerprint": "cc7c7d15e15d8e8b44d35a99a2484681_365",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00185.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00185.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4f69b4f91f244b4318838e14182674d9_0",
      "old_fingerprint": "832e75d05993286367aa5bd3c3313562_372",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00186.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00186.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8891f5750724a21404cbf2d27795d7f4_0",
      "old_fingerprint": "9aae542759a1e14e3e3d11591e7d1aeb_571",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00187.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00187.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b10408715f9bbefd883bc35f8221a27b_0",
      "old_fingerprint": "6ece79fb57e894aa79500ad37e348cc1_443",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00188.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00188.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "683c4c6b609a743a48370e469126bbf7_0",
      "old_fingerprint": "e50de3b865ba3f0054ba9087815bb627_371",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 75,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00189.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00189.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 75,
        "end": 75,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 75,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "e1bcabff5bcd3abab64adc7b3b06da90_0",
      "old_fingerprint": "11ef26f25f9f462e84d09b73f76d365b_113",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00230.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00230.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "edc655536d45f8e213dea47f4767d469_0",
      "old_fingerprint": "a81af1bf02c26dab4aa256c179090b12_486",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00231.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00231.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "36a0d7526100d219f325eebedb2dd068_0",
      "old_fingerprint": "a4ba67d26dc197034fc98d43e6f6dc9a_487",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00232.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00232.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fa185a53ea31255620e62e7ed72ed2f6_0",
      "old_fingerprint": "9521ef20f2f751aa9e22ae7a70f68394_494",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00233.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00233.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0dba4a32d3b9a6ae568234156da2d03e_0",
      "old_fingerprint": "6adbe2399a5ce019ca5a9071ec26d889_449",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00234.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00234.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "94af6ed7232deebcf8f4a970bc55a5a9_0",
      "old_fingerprint": "f2ccc05672e9437379e3efb63e6aef1e_495",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00235.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00235.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e4aee2bb00e1caf69bb8272c90988805_0",
      "old_fingerprint": "760840d6621323dd7bb1b1519382a57b_450",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00236.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00236.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "176c5382c2555031a7687d494adf4b85_0",
      "old_fingerprint": "b5f323158e8eff75ad22f030dbd9d526_489",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 116,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00237.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00237.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 116,
        "end": 116,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 116,
        "end": 116,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 116,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cd10ea6e64127d126a76bd55c9cb33df_0",
      "old_fingerprint": "6a323a8fa3cb30ceeca78bc66eeb7e1e_601",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00238.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00238.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4937f0fda06aec55c6693684bc9e91c8_0",
      "old_fingerprint": "a3f0d08cafa91490bff62bfa0b28f31c_515",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 118,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00239.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00239.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 118,
        "end": 118,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 118,
        "end": 118,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 118,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1570d5900dfcc4c7793148d187b3a5a6_0",
      "old_fingerprint": "19a187b3e78366670b8d363795437ad6_604",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 100,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00240.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00240.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 100,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fb8241c1a37bd3d638883cfa000acd9a_0",
      "old_fingerprint": "1c4a1706b6992ffd38f24082768ea8e9_455",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00243.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00243.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4160b7cb8a924ea61d59efa7343a6e30_0",
      "old_fingerprint": "823d2c3f0b5b61d26fdde06776c734cc_574",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00244.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00244.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c4cf62c08f055fa5c35de9e8a262d2a6_0",
      "old_fingerprint": "34e61302be8bbe83e2059ac77418d138_575",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 123,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00245.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00245.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 123,
        "end": 123,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 123,
        "end": 123,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 123,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "789b72b8b90105f58735f085029a2b7e_0",
      "old_fingerprint": "4b5fc1545b6d6d2b1001f83d5e72a80d_605",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00246.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00246.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "af8bf451b0c0bd4aad306b5f8ada0f7b_0",
      "old_fingerprint": "054204d9ff82f2f79ba22c3af39a2dc4_587",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00247.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00247.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e5d7cc4e7f1a7fc46f0a03b16f4bea53_0",
      "old_fingerprint": "4dbb6f513cede388897df15dab2ca264_524",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00248.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00248.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f3b846e168fc68608b60696381fc8d91_0",
      "old_fingerprint": "96d886c3814db0eede7abc8f53048c41_454",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00249.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00249.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "81051410fba9ffbf5197c08ca2a0f419_0",
      "old_fingerprint": "a1dc1729f5d3fabc6361ddcd1e8827b7_451",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 65,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00251.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00251.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 65,
        "end": 65,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 65,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "d136482720d9afeb74592be346333adf_0",
      "old_fingerprint": "1b2bbde20d6ee6c4e47291d79239dfb4_87",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00252.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00252.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 74,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "c31c2b2bb6f013c1483d6eef2472d569_0",
      "old_fingerprint": "2d1a5036a5cc59542f820945784597af_112",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00296.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00296.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "269ab01473ed2b92779b4cd16c6008f8_0",
      "old_fingerprint": "1f437dde0863b4cb99bfcd27bc5956ba_359",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00297.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00297.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "782025b19aeea0f7f804ad6454cc0c7d_0",
      "old_fingerprint": "56e5e8362e175260d78170804fd17c15_312",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00298.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00298.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a7ec0099bdafbce60c531f245035439f_0",
      "old_fingerprint": "a972ae3152634a8fc751222eb83f5d76_355",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00299.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00299.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c4e5a7d84ede87f9bbb3347ef790ad35_0",
      "old_fingerprint": "83eba61e884096fe57d806f72fa952d5_377",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00312.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00312.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "aaebd55721cb7545e1bdcfea84979cde_0",
      "old_fingerprint": "ece174ec2a6958232eb28bf76788b274_386",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00313.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00313.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "616023da5f8abe5237d0a4a8ffd0e6d1_0",
      "old_fingerprint": "5c7d45fbbaf665a0282202075c4d9328_404",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00314.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00314.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3e9faf1103ff78b30850abe76d038bfa_0",
      "old_fingerprint": "1d7051f3b0deaedd6785d83f71a8b452_409",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00315.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00315.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dd9db8ed7db4c02d4f11a12e78fdbd59_0",
      "old_fingerprint": "160830e9bab1de10efd4f95bc77b0b3a_504",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 114,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00316.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00316.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 114,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8d3e65f6a686954cd501a89ff3123c67_0",
      "old_fingerprint": "98efd8aca6ab9cb3934094f4c2093e7e_598",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00317.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00317.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d4c6c8fdb8e2d02077fb893ec5bf5cf3_0",
      "old_fingerprint": "d6731952e9a878c9e17fb75c862b8119_390",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 113,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00318.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00318.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 113,
        "end": 113,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 113,
        "end": 113,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 113,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0b64dad81cbec16155226ddf32edf39d_0",
      "old_fingerprint": "4d627d9eb48a939e2189207998d4ff2d_594",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00319.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00319.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4e2f93338af146e4ca72c269ee38ec8a_0",
      "old_fingerprint": "7d78aa6f2dddeb7804bcbb20890c7ae4_570",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00320.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00320.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "000a9bc7e99905a5a264267efb7dd20e_0",
      "old_fingerprint": "adceaf1d0ed2e34a16915c13262da227_391",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00321.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00321.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "295b10f745cefd19d3d9d07eac367b7e_0",
      "old_fingerprint": "94a88af1d9d412e03ae64e4ccc3c76d2_69",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 62,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00322.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00322.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 62,
        "end": 62,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 62,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "349336b86bf0ed99d0553c5c34db38fc_0",
      "old_fingerprint": "09a2489bd85e7835ffe07ed28e85c98a_73",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00323.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00323.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 61,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "91f9d1b22922bd147fc9328ae4bea9d7_0",
      "old_fingerprint": "ba919df81fb76aedf2a249ebf5cc91ad_72",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00324.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00324.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "49ea494dde0257e0341b927d6d06018a_0",
      "old_fingerprint": "6dedc6dc385f73966adee38e11086ef4_68",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00325.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00325.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "3d33d59c0416cf7bbf8048a415987e3b_0",
      "old_fingerprint": "be2933db2b399eafd555fb0d7b36c59a_67",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 58,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00327.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00327.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 58,
        "end": 58,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 58,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "993d340244a4dac4f96cfd57df19f9af_0",
      "old_fingerprint": "aec6588250c20effc698e01ea90b5916_70",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00347.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00347.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5eb3b3b6520ae3dc8732828e274ab390_0",
      "old_fingerprint": "820521dfeef57cd9c4dbddf8eff365d8_118",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00349.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00349.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "43be8f586fac56a8ea66df81099a7660_0",
      "old_fingerprint": "0c6b7a1b8fcfa013f217abd66cae3338_208",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00368.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00368.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7100ecb51457401b7d3918a762f15ef8_0",
      "old_fingerprint": "2d14972a3504d1c3f882ad14a49ec788_150",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00369.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00369.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5867484bfe212e60c9c83e2d651f66f7_0",
      "old_fingerprint": "b64aec3b564b7d9ef980c2ab81e30e16_233",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00397.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00397.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6765c1348451484afd0d022bc558ff39_0",
      "old_fingerprint": "c085a6a76113caf1a1db54b94e7322c8_189",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00398.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00398.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e4f795dead2b10ef911c56dd61c32aa9_0",
      "old_fingerprint": "87e14bdb448bf317dd9f77ff6684d481_279",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00399.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00399.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3a6d22b33608121925097d83122a7b8e_0",
      "old_fingerprint": "dca40d26ce65a3f3573a89fed9cb8e8a_505",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00400.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00400.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3e33239d403c33044698379abd838ec9_0",
      "old_fingerprint": "034a398cadd826b924444ab81550bfae_478",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00401.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00401.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e7202ccc53ee77a7dc2f9c0f01d52229_0",
      "old_fingerprint": "2e6662091f40d079d62fa07e312daa8b_281",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00402.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00402.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "086ce39be9236efe5eb7277667b995b7_0",
      "old_fingerprint": "ce546452b3807a88a57ba8486c4646b4_196",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00413.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00413.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eb729553dbd0f08c9b31b4827fc3b6fa_0",
      "old_fingerprint": "250fc8698f0911b0a8e0f9049f2eb067_399",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00414.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00414.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "071aacb77a5a0dae178e0776d35bea1f_0",
      "old_fingerprint": "634fd1fba0778bebf06fe87ecb123362_563",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00415.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00415.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2f3ca924bb369bb968e68a6274ee9e26_0",
      "old_fingerprint": "ce77e107efd12e687bf3d80c37e72b91_420",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00416.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00416.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f95ade7665fd803c667d447fd7e43964_0",
      "old_fingerprint": "be8d6432b30ff0b91e4bf03c22a91c0b_405",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00417.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00417.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fdee8bb7e757329c9b80b1175bd51fa1_0",
      "old_fingerprint": "556f75c27ba77c37cc0180f30b39d06b_403",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00418.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00418.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "33ed9692231b8563aefaf47654cec0ea_0",
      "old_fingerprint": "ea3c3bc36b1400609767628acf7f3c4a_324",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00419.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00419.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "720ff0e7271d56e2c8bb42aaac77ed3e_0",
      "old_fingerprint": "3a6ad79a90ad6984a825400a095d0d2f_374",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00420.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00420.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6b912a4daf3aaaccd253a2444face76b_0",
      "old_fingerprint": "9f8d5d4479657d7b0415d4c87fefc9f1_292",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00421.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00421.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "95e27ba0fba6e4e773a4eeee8b294262_0",
      "old_fingerprint": "14b8f87ce0c57bb481ffbc0a0692c06f_151",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00422.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00422.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6c23518bd04868ab687e958084b1d285_0",
      "old_fingerprint": "9888a40d8a82b59ca11f6dba2ddf0537_284",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00423.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00423.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f67036655c0221ea6aff5a720d253b72_0",
      "old_fingerprint": "4924ca7072931c16d6392670a0e391bc_210",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00424.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00424.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "543784b94aa6cc77c01dac61836d8474_0",
      "old_fingerprint": "950ad2c464fe84acede859dc16b0f832_55",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00425.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00425.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "74eaa0afc8d00606b585d6ade5a14bf1_0",
      "old_fingerprint": "a2dac175f297ff1f3f6716286688b4d9_11",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00427.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00427.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 69,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "d7a961bfe6d7e2d393e71e1a4264598e_0",
      "old_fingerprint": "8f9cba7332a51704e7740f19d0a21ff3_102",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00461.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00461.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3f5c9e5dec1575824cf3f89c0df7c492_0",
      "old_fingerprint": "be76e3b71ef8ae819d7d5ba32549891b_249",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00482.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00482.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "62f733aeec093f2ac7f35da99386e3d6_0",
      "old_fingerprint": "39186bec00d2ee78f65224a30ab31d7f_240",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00483.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00483.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "413c5bed57e723cfc69e150336631a9d_0",
      "old_fingerprint": "2d8420749a7a143801222e03eda48020_343",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00484.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00484.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "39277a9d50319d1f3977f29979f59832_0",
      "old_fingerprint": "7773df4e4a6dbf667d9db37e25bb9dd9_337",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00485.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00485.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7419ed69054ee6502e41f07c648c1d11_0",
      "old_fingerprint": "1ad364ff5c21d15d6b71b8384d668fb8_247",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00486.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00486.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "26d664551af71736b3ed53c70b76df73_0",
      "old_fingerprint": "6064796de0384ca3269bbbd590f8ff19_195",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00487.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00487.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d9d9129141d37e4f1a76e4ff247b6b80_0",
      "old_fingerprint": "b5f863462030e649a776fb0947c04851_311",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00488.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00488.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "72527dcf6a1486c763eeba7c5122e05c_0",
      "old_fingerprint": "3e42f03a3590c66f64d2a95e0cc707a4_407",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00489.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00489.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9bbe3fad27b960598658fed91eaffb88_0",
      "old_fingerprint": "d4652938af8aa1972fbe96d3c8a21061_340",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00490.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00490.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ab6f720e1e653dbb45f188121aff2cce_0",
      "old_fingerprint": "07c3a947774413c7d9ec1f896b11ff24_411",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00501.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00501.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f88f5170e6b5e29a09989e6418f324b2_0",
      "old_fingerprint": "25b7a980d74d31d7b62d2d44b36bbe0f_517",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00502.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00502.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4c09715ed786ed7154005670df3495dc_0",
      "old_fingerprint": "74a1f04cc3b5257dd46a4dbe68934f07_388",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00503.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00503.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ea2cf0e49ce7560d5facc67f84d559fa_0",
      "old_fingerprint": "d10cee33da90797e7d97960740fabc42_465",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00504.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00504.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8cb88ba912d2a4ec25c6c064c54203a2_0",
      "old_fingerprint": "922b783de6752eb2d59a931e0d52b290_274",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00505.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00505.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "21868c5de6a45ddc347f5025479c0fb5_0",
      "old_fingerprint": "65843aeb9deeb3a0f3bf18faeabfb5d6_344",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00506.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00506.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a7085d5ca4e4d0109e196047e3b5156d_0",
      "old_fingerprint": "e4d6c43c29310797bf65ce41ba17525c_568",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00507.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00507.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5910ad28cc5181b550fdb40191dde95d_0",
      "old_fingerprint": "6c9709f42c2b238e1a34a375b6c0595d_273",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00508.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00508.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "b67de9d3c2c1b5ca9187c07e39199902_0",
      "old_fingerprint": "14d57683fdc8999b8f2c33d28515ccd6_49",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00560.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00560.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "98f4276db9f4c1f5f05528b0a2003c9a_0",
      "old_fingerprint": "e11ba65fa1af56aeb54cbe55a58bc884_488",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00561.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00561.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0fec8e30b7d1d09c5952a07ea03d1823_0",
      "old_fingerprint": "a0c8e528213f84bddfc99823acb4b17a_539",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 116,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00562.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00562.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 116,
        "end": 116,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 116,
        "end": 116,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 116,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f637d406c7535c69a7d169fe7230bc83_0",
      "old_fingerprint": "7a229bb92b890298ed3cfd88f8f79949_602",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00563.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00563.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ef6bc2ef48645c04ceafe2edca904f21_0",
      "old_fingerprint": "28a1c5448bb99172954967be0d6f0e07_395",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00564.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00564.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "30c8b7daa4c6a236fba041bbcec8a637_0",
      "old_fingerprint": "d2396924b34048de596c8d1632f288b1_428",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00577.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00577.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "17bb8a9dd288f2623013df60e8d67f8c_0",
      "old_fingerprint": "90951178e33554d1c9b5bd6118bf62e5_573",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00578.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00578.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8f83f55f80c12919549c004a8caf97ac_0",
      "old_fingerprint": "0f0739688d4846377bab3bf471560180_525",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00579.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00579.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b1ca18a92bbcbc10b548c040b9990c74_0",
      "old_fingerprint": "9828ee53bc34ae8ce44a784912d4b84d_562",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00580.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00580.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "35770b72056c0efd9e0ca584fbb233b1_0",
      "old_fingerprint": "fd29ac508d81f462ff7089555c863426_560",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00581.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00581.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a9589db6e9208a3211f680da0fafceb9_0",
      "old_fingerprint": "aeaa2f66dc1d42f880afbcee3094bf01_466",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00582.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00582.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "30bc405592e51e7ebff8190ef6288163_0",
      "old_fingerprint": "370d66af424212e2090e9d7228fb7af2_531",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00583.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00583.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fc1457b99f463049562e8e465125613d_0",
      "old_fingerprint": "f7224af851f60128ee6d0d2004bc6443_518",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00584.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00584.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ccb885bffa629dfb53824e93dababebe_0",
      "old_fingerprint": "059e2cfccad9396c37299a56f673251c_535",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00585.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00585.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7e803c816f39ba47df28db057c039e56_0",
      "old_fingerprint": "2bca2a012bbed93e164dc29d110451cd_452",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 69,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00586.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00586.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 69,
        "end": 69,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 69,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "cc0dba31dac2d4ae9f53be8a0248761e_0",
      "old_fingerprint": "391df3c7854aed1f57317d8b104d93e1_103",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00587.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00587.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "ce3beb4181ad0eb0931ea0f8af5a46a5_0",
      "old_fingerprint": "e18ee75622452d6f38aa17e38270f103_91",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 66,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00588.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00588.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 66,
        "end": 66,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 66,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "ece539a2ae41045956ccc5c98c73ad26_0",
      "old_fingerprint": "6ed953a325a822bbc8be095232a5d1ad_88",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00652.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00652.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0e92b1313eacaea5bb7af8cd306d3f34_0",
      "old_fingerprint": "6178e2fd5a99dd3affc64af7ce7c6e4c_258",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00653.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00653.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "28d19ba9cbe412e9db23b6397f662dcd_0",
      "old_fingerprint": "b3bd1fee7fb6f1aa49036b8de01afd8f_261",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00654.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00654.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7dcac2f58d310d6d8d9e77a5f88f0092_0",
      "old_fingerprint": "3fc107cb1c1bc9bedbb8029f6f9f17ec_376",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00660.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00660.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "62dc48148f2f48d9facc6808e6c7a432_0",
      "old_fingerprint": "d54d8ef3aac4b3b6e63b3206a6f30c9b_260",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00661.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00661.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3e4dcfd15fc25c47fffc99a7e350d421_0",
      "old_fingerprint": "c124b900b1dfef9cb4f1b9b50819bec3_349",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00662.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00662.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6f965e4cef8b7ec826fda8b97c5fff80_0",
      "old_fingerprint": "13f268931e06f430e2b96ebce6b5422a_402",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00663.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00663.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c16568ea7dfd03f2054b40ae9818c941_0",
      "old_fingerprint": "57491b230a289654ac77e2eec2adb601_364",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00664.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00664.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "20e870f1b08b35e4253e425debb130fe_0",
      "old_fingerprint": "b14d68b741d9f46a7739a0182ab0ef7d_556",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00665.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00665.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b2a44922a216fc81e64ebbe7030dd3ac_0",
      "old_fingerprint": "7e210f6f1308024a4d2d0b9bad51302a_330",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00666.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00666.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c1caf1bd3e3d6ccee58fd2399a7d11d1_0",
      "old_fingerprint": "1e8d91ca3ad6bab1ed0aab1badba891f_313",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00667.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00667.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0c49f04bc3585df1bbbf374bcf09bff5_0",
      "old_fingerprint": "c8d2791989398ccb1886925e62011cd5_303",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00668.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00668.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "46bb9ddd807de42d2afe3c60d02e0f94_0",
      "old_fingerprint": "5d6b830c6f3ebc7d871201e71df1178f_19",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00669.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00669.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "6751aace248152f3ccbe9e71d85131a8_0",
      "old_fingerprint": "df5313946b45b7534461ee1e7033e96d_60",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 55,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00670.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00670.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 55,
        "end": 55,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 55,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "63d99c38a4a0e11693eaee63a7826732_0",
      "old_fingerprint": "36cb1ea5c97b255688ea7278ec5d901e_54",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00702.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00702.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "96a77fed97d3a33c310d789a5568ccc5_0",
      "old_fingerprint": "d5b9535877e3c894468a3b1769c07322_345",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00733.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00733.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "967021199b2c2ffaf8cfc85de0234520_0",
      "old_fingerprint": "a05e526f1d8b43b7a1dcfbee1f69d8ec_204",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00734.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00734.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dc13ff31bb3eb30ded64884446d083ee_0",
      "old_fingerprint": "6e21075ee15a2aec47da2087d17a5a88_498",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00735.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00735.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "59b20bf68bce15502e96821c00de5967_0",
      "old_fingerprint": "cf928876bd29c7821a26bfe4eb8ea77f_379",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00744.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00744.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "27640273bd4b2cb696f85389cfeb75c7_0",
      "old_fingerprint": "e2faa3ac1a00b59bcf6603c26a9e3c69_491",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00745.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00745.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7ba7dd9d1f5b4f12977712c5c80c48c8_0",
      "old_fingerprint": "ebc76e7e596d2ac14de7055458f4a162_351",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 112,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00746.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00746.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 112,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c36c07b164042136348c1395cf66dd43_0",
      "old_fingerprint": "5768df1b67caa17f7761e30efc9ff79e_592",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00747.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00747.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4e0207ee01872222a15d7496cc6b9f63_0",
      "old_fingerprint": "6bd893949da637b54df8f26de9e54c18_327",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 113,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00748.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00748.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 113,
        "end": 113,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 113,
        "end": 113,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 113,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0a333f10981467661d0f35732f8f294a_0",
      "old_fingerprint": "8e08bb3670a9a47c548deb310f20d376_593",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00749.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00749.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8713854a47a70a9a016c9967754a4372_0",
      "old_fingerprint": "01d53606fe08c065f947d569af84d37a_287",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00750.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00750.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3aa2e124e5c423e691597a389f604c21_0",
      "old_fingerprint": "cd4364b76d049f8a0548eaf3b964dac9_348",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00751.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00751.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "255e34eafdec2b2a8921b408e5206f94_0",
      "old_fingerprint": "e689b1eb59aee58455b7018a3442268f_362",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00752.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00752.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "70dff3d5c55230d7c730064ade1825f3_0",
      "old_fingerprint": "e8cf881031414a10c397243b92cec4d6_511",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00753.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00753.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c56ef7fad2754bee4cea0df456ffdf01_0",
      "old_fingerprint": "a9a07b9890e49bf0c138bdfc600cf0c8_241",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00754.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00754.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "f3960bf6854c1064e4390e3a87e942c5_0",
      "old_fingerprint": "b6a19f0643c6aaef391a86313a4b21c8_56",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00755.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00755.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "a4ef37b83764467500193de7c104795f_0",
      "old_fingerprint": "671a43dd3a7ff3ee88c4ff04e9596d09_61",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00756.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00756.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "1fb97c8485fa6c29af8f76b248748d48_0",
      "old_fingerprint": "288e6f705829e5c262dec5cf0200f454_22",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 61,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00758.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00758.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 61,
        "end": 61,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 61,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "c66c1d76aa30c783ae37ae0dac35da62_0",
      "old_fingerprint": "5973b93280229d34dc0006b3d148e9a0_71",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00759.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00759.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "a15b07ac8c450e80f57848e148f20dce_0",
      "old_fingerprint": "fa9f8e9103e8ce051da393eb1267fbd5_45",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 127,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00817.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00817.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 127,
        "end": 127,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 127,
        "end": 127,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 127,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "556917032f01abad0c26f103a232b7cc_0",
      "old_fingerprint": "c863539d0b11ada3ad472f6d6efde4c0_607",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00818.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00818.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2c9bd147616b3c0864e7928e697fe2fb_0",
      "old_fingerprint": "fd6a1f1ce2db2541be053a2b7564fafa_569",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 112,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00819.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00819.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 112,
        "end": 112,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 112,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9b2cb0c399f96ecdfef030dffb9c32e4_0",
      "old_fingerprint": "e8141b5a28ac3a37ff8ea5147a383cda_590",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 117,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00828.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00828.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 117,
        "end": 117,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 117,
        "end": 117,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 117,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "28664adef760a1e16a98ddc63f35c77c_0",
      "old_fingerprint": "5d968e5d63b1842b2d20204d9b2bf50d_603",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 134,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00829.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00829.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 134,
        "end": 134,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 134,
        "end": 134,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 134,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a2beaffd75905a308a4e8984c319a30f_0",
      "old_fingerprint": "d804f25e90f29e926ac26b14a6c056d1_609",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 114,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00830.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00830.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 114,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "da202bf016ac9e828b60b32a1dd8a264_0",
      "old_fingerprint": "67336bd3b0b0135a1d60287ee37cdce9_596",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 129,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00831.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00831.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 129,
        "end": 129,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 129,
        "end": 129,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 129,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b094df04dff27d36c9f28936775f33c5_0",
      "old_fingerprint": "262cd253351a7104ea39fe8f5dcfe66b_608",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00832.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00832.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "21a53e3f1b89004e6bf28b1da83cf0c7_0",
      "old_fingerprint": "7dbdb57679429d6e2232454b05c50ecf_553",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 80,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00834.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00834.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 80,
        "end": 80,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 80,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "eef4db3fbc9749526aa73f9b5eea89a8_0",
      "old_fingerprint": "5f47c07a0eb0eadffa63446c68b5f7ab_115",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00835.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00835.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "067fbb8d7b9e5171fa456ecb3057dd8f_0",
      "old_fingerprint": "4091537653e6250a8f371d99d14fe68a_139",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 74,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00836.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00836.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 74,
        "end": 74,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 74,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "ae0797e3ed69382b5d0394ce92906424_0",
      "old_fingerprint": "7fee9f052a55325cab9a224158c0960d_111",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00898.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00898.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b8caf4e48617581d216733043bb7e0b1_0",
      "old_fingerprint": "a4499534f2b480fe237100ee3fe146d2_338",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00899.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00899.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a0a49a501ffc6f16679ed1179e4d0c53_0",
      "old_fingerprint": "bb797e807be1a2fb942f455ba379efc1_503",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00900.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00900.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "88002a5dd7fc33f5ec3da861dd31ddf7_0",
      "old_fingerprint": "9c538bc972e3a2d04c9dc8b8ece05d05_482",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00901.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00901.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "433fb4ca4c0019c5e5624ad2c2316abe_0",
      "old_fingerprint": "ad422fe624b83e6da4d580c4e9238957_468",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00902.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00902.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "474f6934b5930d7c904df63a92e95aa9_0",
      "old_fingerprint": "a3b2b747612573aef7535b0ec28b24d0_238",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00911.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00911.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c45c0052331297661f9b1820396e0a74_0",
      "old_fingerprint": "79f49a612c84e46a68b9dbcd99430f13_363",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00912.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00912.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ceb24e52bd25dd0086003555b4a3673b_0",
      "old_fingerprint": "6e91d54cdd4ba5c1a13e234d5806d3ed_417",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00913.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00913.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5df56f0315115b76aaa94a2dd5bea649_0",
      "old_fingerprint": "661a90ffa58e2d9c5f1e7e5bd87da0fc_578",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00914.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00914.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "97be82e3827295ced427da7b8c96cc42_0",
      "old_fingerprint": "10d94b98759b894909ebaf7a1ccd7331_319",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00915.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00915.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "154767ed6e44391c1e100457c81642be_0",
      "old_fingerprint": "26ec5d7fc4e8d98027a82fe4abb598f1_282",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00916.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00916.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "75076e59740e139dbbb94ed626b9c853_0",
      "old_fingerprint": "e13facaf8ffad0363615e4ca4295b847_314",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00917.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00917.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "595fcd73a29e4d1e60aab94ed7e5d601_0",
      "old_fingerprint": "f9eb092f66df2d518cb1dd8fecd85569_433",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00918.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00918.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a63c775ba70aecf4caa6f131d956dab5_0",
      "old_fingerprint": "92df2e58de78c00a02255f006ece7012_413",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00919.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00919.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4e5b8ae71cc2a11918ce7e4582a695bf_0",
      "old_fingerprint": "5a24ac33244c65dc1c18289d412faa74_194",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00920.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00920.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a6be60178976ab23a17a335bd9654483_0",
      "old_fingerprint": "6e157fb6b1ce051ae009695cb60025ce_200",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00921.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00921.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1b1e79d8f980dac844aa050acfa5c536_0",
      "old_fingerprint": "07df887845495f807bc5e90b5c3f0ccc_286",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00923.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00923.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "cdb598f1a671eea40a4a2a5ef9233f52_0",
      "old_fingerprint": "3634a36c5f5cfa26a90f5e61460f913c_10",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00960.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00960.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "88c589b8d429038f4d4513e4557369dd_0",
      "old_fingerprint": "fc876c822f240ea98e00e00a28422e82_490",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00971.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00971.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5574fbffd56b70c25e2c2086fb0d0f52_0",
      "old_fingerprint": "92aaeb66ef8494aaac94b877a893c8c9_485",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00972.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00972.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a86162892fba8a762aeb9f8c105def4a_0",
      "old_fingerprint": "075f95168bbc2a12beef80fa1bc8f554_484",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00973.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00973.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "203918432d0d310d4c8b8a9eb9053090_0",
      "old_fingerprint": "586e812e9ad8fc96584cf976e7b4985e_464",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00974.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00974.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e8ad1ba6d200b4afa9a05d840b4ffda3_0",
      "old_fingerprint": "8f5cd1fd60721961c1c17a8d6227f0bb_463",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00975.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00975.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "36d272dfd29b0938de3d78a4435412bf_0",
      "old_fingerprint": "51645873681feb2f6202ddd27c95dc1c_462",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00976.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00976.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0f0d0bf7059b580e48f0e0779e83323c_0",
      "old_fingerprint": "495d8ea06f675f0c4bb736c6d7d34ec5_477",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00984.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00984.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a11057eb1107aa89f743ae72e47ab2d4_0",
      "old_fingerprint": "172b0314fc2fbea09ecf77c773775575_530",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00985.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00985.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cea55291fa43a77927f4f17d39b8a6e6_0",
      "old_fingerprint": "133d04af97dab913961a34d77e4475fa_532",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00986.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00986.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d52def3eddf9ebb61f5245a28776c4c3_0",
      "old_fingerprint": "61bf23d54a5dc5214bb0bb6b4fd750ae_529",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00987.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00987.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3d034e7eb9ea2a5893a01fe390ce8d47_0",
      "old_fingerprint": "f69add6bce6ceedfc578ce7b146c308b_509",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00988.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00988.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c987d22e1ea2e2542bc2cc0431509804_0",
      "old_fingerprint": "21d6c22c00b52002ba57c078ae79c927_510",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00989.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00989.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "97a68f5c6d3827502816d3b0ee4d92c3_0",
      "old_fingerprint": "75acfba1a2a48311c878f283d1835aef_499",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00990.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00990.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7628707d5962976529310f64fb79af2b_0",
      "old_fingerprint": "760daed89a21bc629a407971a48479a6_500",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00991.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00991.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "be43ad06d5eed38106fd3a5d73a5968f_0",
      "old_fingerprint": "4d79ae3123438132c6aaa5aacf025545_95",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00992.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00992.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "9d39b7f37b9cc162e4eafade913e76d1_0",
      "old_fingerprint": "7063985f8ed7339ff9dce522ba1955e2_92",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00993.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00993.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "06089fb52145b2afc4dbc7319df8c1a8_0",
      "old_fingerprint": "72adbde0bb7700403954ba1e660913b9_101",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00994.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00994.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "ae6feef3e0479345991d44de095d3230_0",
      "old_fingerprint": "bfd447c835ff14c5bc2d3f16cfe3f656_97",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00995.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest00995.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "9e9fca67cc8e24f61e6ca2bebeb86cb5_0",
      "old_fingerprint": "d3bff579a1f50e40d8e95573c62f2fcf_96",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01058.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01058.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0fe4fb224936c6378e20441af4119255_0",
      "old_fingerprint": "ab1d53ad98dd5f76a31fb11bf7e838e7_275",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01059.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01059.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "456a29c53b00952afa85895e2da32692_0",
      "old_fingerprint": "8eece18ca4d22dd71c18f8c7d57e650f_252",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "de94bc9366b32562569ef8c067fef29a_0",
      "old_fingerprint": "7baeeeea1f9671bc03e6397162a04a9b_251",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01069.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01069.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5c94ff1b1ed3be8599aea5c3f5921878_0",
      "old_fingerprint": "1f03d562bdba230e577a485a80d7556c_389",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01070.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01070.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9ed00fe419ccb4290f8c6e060cba97a7_0",
      "old_fingerprint": "253004b96b7fae8c01b96f027ac482b2_373",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01071.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01071.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f0677222f3f5ed858cd8665389c39382_0",
      "old_fingerprint": "06832b7ad3aacf814d0c95f6f0d9871f_375",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01072.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01072.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "daecacdccb5404e5b458710c45f0023f_0",
      "old_fingerprint": "2ce31c58576846944ad814050c9a8fed_329",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01073.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01073.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3fd1e8770754c8d5ad63030915af7cae_0",
      "old_fingerprint": "a94ecbb99e50bc5f3a36004f7d032c66_387",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01074.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01074.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "308ebb2989a539dfcc36e5ee42a1b02a_0",
      "old_fingerprint": "e5030b9902ac543f2047d105f2bc494d_293",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01075.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01075.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "920503647bd7d66aa3668585759aca92_0",
      "old_fingerprint": "de7a4dc72208c21998d874b9f6396046_294",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01076.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01076.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b675d3c78af84d5a8dac0c9f10df0532_0",
      "old_fingerprint": "07c5b2bf14390e38a9756b52839849d5_298",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01077.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01077.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f1e145d077f4d517263fea6778153f5f_0",
      "old_fingerprint": "8e2a72829ca534b9c4e78317bce603a4_270",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01078.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01078.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e530fe72945a7666d1991956c3944403_0",
      "old_fingerprint": "3ab6036453e3e3ea53dbeb7034f5e92e_269",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01079.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01079.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "43803aaf7434e1a9fb2fd68e9ddb9330_0",
      "old_fingerprint": "6f1b268e4d92459e1e24ee2e6b5587f1_268",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01080.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01080.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "db73bdf4758930db6b28f0308c77e0f1_0",
      "old_fingerprint": "bc10faed54fb409caa189c6173fc500d_46",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01081.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01081.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "062d311a4807f36a7ff33075a3e5f8ad_0",
      "old_fingerprint": "18414e680b76854ee80cfaec1a7c451b_47",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01082.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01082.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "81cd885ac7cd1b183fe3ea24c67f156b_0",
      "old_fingerprint": "8c6c6341453a3f0a54c621738db6dc06_48",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01119.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01119.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c5db29ddf2716ddfc4ff5f494a3a1e73_0",
      "old_fingerprint": "f94687412f3827ebcee61324d0e4b51c_439",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01127.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01127.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "63320e6ae27fcc567a012da65a9092f2_0",
      "old_fingerprint": "e652de81fe757da8534177fa8ab18082_425",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01128.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01128.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8184d2231b65e3032e5a4b58e674c26f_0",
      "old_fingerprint": "20d6ab6a11cceb1514725fd11f5e258f_419",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01129.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01129.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1f33857ac6a6b034b159439cc9614980_0",
      "old_fingerprint": "92e44d170aea12b47ab2a1c818bc4468_418",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01130.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01130.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "979c761837b682997ccf10bfa6b1609a_0",
      "old_fingerprint": "0a2e669c6eb79e875f7ab004272f5153_416",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01131.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01131.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5b12ff0c847e08f6be920742d1787b2d_0",
      "old_fingerprint": "d64d1e90e2862fe97dcca84f915f9979_414",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01132.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01132.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "87507d891a2d4587f233390db62caee8_0",
      "old_fingerprint": "16754ba5a23da13320b120fd6be1256f_412",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01133.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01133.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1cc4929d8ac6ea31e46598ccb8bd0ad1_0",
      "old_fingerprint": "d62ffa885ad134caaf10a5a72a71e8db_436",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01135.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01135.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "308850626a9d4bb823c3bc4e162e5459_0",
      "old_fingerprint": "c58d72d1030e7697df5952515ed89080_514",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01136.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01136.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9cf1a4bb4133cf046e102b858caff50d_0",
      "old_fingerprint": "66c6db03a09112980501a75f538cff09_523",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01137.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01137.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "71108a3237d55fd38e5e40341f587965_0",
      "old_fingerprint": "f70a87667c7dd2bc14070af6be118c8f_481",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 100,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01138.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01138.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 100,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0b35bbb0a28d64e8717b2bda12695a27_0",
      "old_fingerprint": "c7b266e4f04f8db26b18469e604b61af_457",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 100,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01139.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01139.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 100,
        "end": 100,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 100,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9ba889ecc295efd01b4e1d1dd06a9e1c_0",
      "old_fingerprint": "4d77f3594ef39f3297a6c94d1dd163d0_456",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01140.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01140.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b352fa116e6129c83badae851000f62c_0",
      "old_fingerprint": "1958bd3e0a1b49fd2b3c31289124f493_442",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01141.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01141.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "05e7e6708c03ac5978db1e4b99659590_0",
      "old_fingerprint": "0dd02e24f22f70e1182a380c08987b42_453",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01142.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01142.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "feebcd4cc18340c7a483ea284031058d_0",
      "old_fingerprint": "087b7ff1082fa9f512b6f1f2e38eb4ae_86",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01143.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01143.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "46618db21eb06589d6b278bfeee3ab60_0",
      "old_fingerprint": "7e757926471412e080b17cc157562b86_82",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01144.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01144.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "82f769f381c58ad091ed42c68458aa25_0",
      "old_fingerprint": "420d705822b8350efa10cba4b677be15_83",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01145.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01145.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "e1d286238d638c2a4ab5fee4d4eaad28_0",
      "old_fingerprint": "ea5c47515d504d17316ff2ed1403f5ac_84",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01146.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01146.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "abfedeca8622ac188f9b0c9ee784497e_0",
      "old_fingerprint": "7ce6322eb16f525f4f09ea995b0359f2_85",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01162.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01162.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6cec31b0ccce0ddbf7c0c5150a2c0e7f_0",
      "old_fingerprint": "33cf421be1dbddf90c64639492c94c99_318",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01163.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01163.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1b0a1d028522376c8dfc2493d097d0c2_0",
      "old_fingerprint": "15194e1fd2db0aaf16be41db2d898b50_302",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01183.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01183.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4ab4bb9fbce59b40ede06dd4ab7dae6d_0",
      "old_fingerprint": "6ab500478a788c485f9ed6756ad0f73f_300",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01184.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01184.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "709e812fa044695651cb3505ab338241_0",
      "old_fingerprint": "e8d2762ad5b630e7a74a79a9170838dc_262",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01195.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01195.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "71fd09671d38321ef87f16c39f1cb6a3_0",
      "old_fingerprint": "db8c6811dfe80eaa814e4b9866714bca_361",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01196.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01196.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "88b087255d62bc91903b926067a4a374_0",
      "old_fingerprint": "c886c633470e05501d8c8a4a78e20b9f_356",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01197.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01197.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "551e514a85d172c385b3f35975595a32_0",
      "old_fingerprint": "cea0f62a1c46f90b7661203c40aca9fc_426",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01198.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01198.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fd0c6b1c1434d6c99cc8ae19171f95cb_0",
      "old_fingerprint": "738e7c7a90156dc3639654868e62d512_366",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01199.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01199.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8a4e0ae39957cbd8a5373c9553bd84b8_0",
      "old_fingerprint": "3783705f1b5a8ea41089beaf8ee9b869_341",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01200.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01200.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c19386112649f0be08947e3dea99278c_0",
      "old_fingerprint": "9ed20cf8a1615bd6918a202618a172f8_336",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01201.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01201.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1dd0ef524c704613e28839573474f8f7_0",
      "old_fingerprint": "bb37eb063720788e47942913a5936b57_335",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01202.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01202.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8ca12553fa67513966883fb5a66bb143_0",
      "old_fingerprint": "4193c105ca768a785e194a9ff3bf2f72_334",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01203.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01203.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "13e386c61e37f1083b22c64b45ea2c2a_0",
      "old_fingerprint": "9dae0b7d4d400100c32d1fe6f6343408_66",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01204.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01204.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "32eb05094e47f8de4f922dbb9388e968_0",
      "old_fingerprint": "517ed7d115f442a516e7bdb636ca66ce_65",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01205.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01205.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "4e4745ddb8ba42632565776dd149a062_0",
      "old_fingerprint": "9c7953d24e4ba4a7fc925bf00b2a08a1_64",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01206.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01206.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "acb17176b7fac1147dc1b606f052aa05_0",
      "old_fingerprint": "2ee64aef82b48f9666da024edd7a1968_63",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01207.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01207.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "18e55c77a895cd4cce8251e29b2ad1a6_0",
      "old_fingerprint": "676d651e82a2682cfcf1cd32023ecb9a_62",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01271.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01271.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cb6d944ccf7dc1f17c4c5f06bc0ca927_0",
      "old_fingerprint": "025cba8368b1de86ee444d9c6d8e38e1_135",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01272.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01272.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dbe500eb2dae4feccf1c5d91c22cbc36_0",
      "old_fingerprint": "bc210278930121a64ff1adc1bc75534d_119",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01273.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01273.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "82f1e34a5ed95b451c854600f1a5a6bc_0",
      "old_fingerprint": "c47bd3a814444ca8e4f0531a14e421eb_116",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01274.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01274.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3bffa706f209018e329bc4b13af3d233_0",
      "old_fingerprint": "896505a4cf13f25f08d745dd204e0ed6_122",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01275.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01275.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7ddfef5d0e42587f73d13829ece56fb7_0",
      "old_fingerprint": "9d40b0d01cfe9e92b7a6372fefecb1f7_123",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01276.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01276.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "993fa4a980ef251f9b69bf4ba315c354_0",
      "old_fingerprint": "c6d531909cfe5d0d1c4592a09ef9addc_121",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01277.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01277.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5b3765bf9190ef67a45441a62eac7dba_0",
      "old_fingerprint": "5f848ad1d1cdbb7d6f5d80399459f74d_126",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01278.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01278.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b763f1bc0779ad9947dbf453c1e89570_0",
      "old_fingerprint": "114275199a433c53e61c0254dcd2b8c7_127",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01279.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01279.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c4bdbaee5b754f528def21c7353c6c65_0",
      "old_fingerprint": "c2551b698af89d5b875a6230f0507ff5_132",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01291.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01291.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5d4c947465920e63e2e4be1d03c5e0ab_0",
      "old_fingerprint": "be76948e2495e1e223142c28f823ba57_307",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01292.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01292.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ad1dda7a337065c9bc6c3a1867c3cc1b_0",
      "old_fingerprint": "f01cd3f10a960fb61479d920605ce777_291",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01293.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01293.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c4dc33eb65c3877a3ab5c3054f653ff3_0",
      "old_fingerprint": "ccbbec5acc26cdfebc5ce74ebddb1373_306",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01294.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01294.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a9e664b3e8878818baac72aa2ee34c87_0",
      "old_fingerprint": "fa9581ffd9700cadb05d33f609d36051_174",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01295.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01295.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7cda6bd84ba08c204ac5863fbe7c1d5e_0",
      "old_fingerprint": "fb5da5662a0cb9c3bf597622d9738b23_175",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01296.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01296.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "bebed4d265b5a1dfbd0df65ff76c9284_0",
      "old_fingerprint": "08e7de82c0c771647b5a0744065626f8_177",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01297.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01297.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "007c45f69063dd4a06f18846c34da6b9_0",
      "old_fingerprint": "f940cf73c3b4216a515185e3b48a27f8_160",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01298.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01298.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "904fcf1ad4c5e6a3ee0a31c66a8f86f0_0",
      "old_fingerprint": "eed8a56d697c8712193a4d2c3c7fd405_159",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01299.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01299.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "65b039cc6b0aec624bacde14aa6359c3_0",
      "old_fingerprint": "634cd56d8417019d58f2fe14f5e12a7b_1",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01300.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01300.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "094160e04c15beb0c7cdacb79c97587a_0",
      "old_fingerprint": "896cb9747ce550c76b29077f2e04c555_4",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01354.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01354.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a1dfd419f3f73b96ea36bcff2a22143e_0",
      "old_fingerprint": "3d6b5c656d50199a03f9304f7bfea870_223",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01355.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01355.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b812cfa509bd11e29be72f418a5c45c5_0",
      "old_fingerprint": "67fd3da954a23273abee334cdf19a2f2_222",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01356.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01356.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d65f33a1077c887a77574b28ce659b0a_0",
      "old_fingerprint": "8b7f42af7a1277798385291ea91c4153_221",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01357.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01357.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1e61d774db1f17c5cab67fc2435f7c28_0",
      "old_fingerprint": "d0ba48ec0fd33bb6dab747737a17f7ac_203",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01358.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01358.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4a4c282aadcb6cf8a3a80e29e4d8d30a_0",
      "old_fingerprint": "7f5e30faa67b7e899804295512ad6f39_202",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01366.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01366.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e4ae76cfee842156968f4f804422c495_0",
      "old_fingerprint": "d7b6c7509a7f2f569b0f413328d319d1_380",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01367.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01367.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "137d900c75fb5bb18a2844268cc34345_0",
      "old_fingerprint": "0c447c82a2d04bde7784f46af9102ede_383",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 95,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01368.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01368.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 95,
        "end": 95,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 95,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "da715281745981ec4b39c1ae2dff6da8_0",
      "old_fingerprint": "d8cf6aa0ae993c240f8d73b10a190157_378",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01369.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01369.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "49a2f3cd2b5103a72029793f61bf4149_0",
      "old_fingerprint": "ccc3b7ab591a14543c5f48f68d792d2a_357",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01370.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01370.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f8f79eb2660c1e6ec007b4c2298b71f5_0",
      "old_fingerprint": "02dbd9fe5d39ef04ceac852b6f47e8b9_301",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01371.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01371.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "de75118247beb142fc0162f2924d4535_0",
      "old_fingerprint": "f34ef1ef462f9946199b2ab489f7960c_257",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01372.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01372.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "35d55947e06f3f293e72eeac475ca51d_0",
      "old_fingerprint": "e08c297e9923e052fb057b3a068fe09f_250",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01373.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01373.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "917f7bf728669774c7fa085d44b214bc_0",
      "old_fingerprint": "4bfaac6cbb3628739a15832aa38714e0_246",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01374.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01374.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "d46f1884316ab403c238cddc037fe474_0",
      "old_fingerprint": "354c6c049d6c035b90f643f1e568b5d3_38",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01375.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01375.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "88e5b5f6f39e08c752cdfe258e55e6d9_0",
      "old_fingerprint": "0028694eca150faa97b786f49b6ed1db_37",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01376.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01376.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "9e46a4079aaebca81e89772ecd238e48_0",
      "old_fingerprint": "8a524c9e1291d049b52d22f93076658a_36",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01377.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01377.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "77d110a9ec55d2c49e6f56483d416750_0",
      "old_fingerprint": "449eca96f54af4095cc87d86be5d2db8_40",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01431.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01431.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b51913c8f5752232c0b4c27b08cafafa_0",
      "old_fingerprint": "af66625bea7cb4ecf45a1ff21074ae00_398",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01432.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01432.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f9171a93f3037d62a0c3e82af6992080_0",
      "old_fingerprint": "89b2107624c74f127489b86a9980e209_400",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01433.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01433.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9ed613532d8ac1a0bad355d475f5410d_0",
      "old_fingerprint": "d9d18ab28b744f7278234c1dad267a60_401",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01434.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01434.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "27a0c57fa0da353dcdac4cca7d989fad_0",
      "old_fingerprint": "e26f2476f6bd23d70d964889d81582a5_384",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01435.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01435.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "42132829bbba5ff794cf07a4626db4f9_0",
      "old_fingerprint": "e0d82cd1b3387a09cff6b2d294bfa0b7_385",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01447.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01447.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0b5ffb6964698e7a690f80cab128d780_0",
      "old_fingerprint": "87bf44dfc0d480c03a78ce0c3a5d9473_507",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01448.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01448.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "69ec30127f332a676017c86885a86ad9_0",
      "old_fingerprint": "bcb3acc828238bda45752723d3543b92_460",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01449.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01449.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "91abacb09b0568f5137e29c0beedb844_0",
      "old_fingerprint": "7c8282cade2af03ddd51692e1fc0a3ea_458",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01450.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01450.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "27f1e65443dd770157478d93b676cd72_0",
      "old_fingerprint": "f01966b0380dc846339da2f139e34fa6_516",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01451.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01451.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9863d68d64bb03ecba7d5bc8c9032d31_0",
      "old_fingerprint": "ffcdb859f8a59becc11b4764fa3cc2c7_445",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01452.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01452.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6c42477628b8d1b0b874366ab3e11abc_0",
      "old_fingerprint": "a568a7fae26d4da3228a1a41bef24643_440",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01453.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01453.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "47c518db864ac4bdd4b322f36e079d01_0",
      "old_fingerprint": "88907d2d740195b395f862283af06585_424",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01454.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01454.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "ebe7d331caa509411b3f9832e3fb57e7_0",
      "old_fingerprint": "0f36fac7f0dc0a4998f807086d9cc02f_76",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01455.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01455.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "1a3a70c2d49e00f7ae4e67efeda4c5af_0",
      "old_fingerprint": "8553c4838351656301889551e175eefb_75",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01456.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01456.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "31f839a9220a7d171963f04050a22674_0",
      "old_fingerprint": "7a7a408c17d53e7532650d81e1e2fed9_77",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01457.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01457.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "1ef13701f23c7195cac674c3192ef348_0",
      "old_fingerprint": "64317d7a7110880ac3b5b8a13908448b_74",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01458.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01458.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "4bce2492688ddc19e43590e1f787f24e_0",
      "old_fingerprint": "01bc9a2f3f65e0a2339d3fb3064132b2_79",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01502.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01502.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dc68ac3af8957b2d2e264df7e947c25f_0",
      "old_fingerprint": "6dceab6c71739b55c61ea0f5a3b4c6f9_199",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01518.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01518.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d27ffcd9078b14e8ddccfd04f5537f02_0",
      "old_fingerprint": "cfa6860069aebe04d0718745cab383a5_190",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01519.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01519.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e8bc96319587b35675f8e44bdc0ce301_0",
      "old_fingerprint": "3eac6a74ed2646bf4b3d787b0194cacc_188",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01520.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01520.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3c9ca2b9e9a7a691dffe008c6324eb46_0",
      "old_fingerprint": "8bdb250e7aafd77503eab1154281a7c9_183",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01534.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01534.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "096afe97745bcc9ddd85dc11de9eb5cb_0",
      "old_fingerprint": "240a969fb8fbc66ee4f4857b4bdf9d76_342",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01535.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01535.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f34eff263572a36774c6b06b734e67fa_0",
      "old_fingerprint": "03430b1c6ca03af579950bd31764de30_280",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01536.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01536.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2bba0887ab6e119f3b7d430fc161b92f_0",
      "old_fingerprint": "3847ce185174269ceff6f45f0d0aa767_263",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01537.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01537.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6e7905368735f7a15024374a8c666f54_0",
      "old_fingerprint": "ea2973f0db1a2d7e12b91ab432c3222f_264",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01538.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01538.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5d34d428c097706eb60bbb46c9579af5_0",
      "old_fingerprint": "736469973a6bfa4c138f390fa8e32d4c_354",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01539.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01539.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ed6ee91b2375d8c1e5f4583c6cf931da_0",
      "old_fingerprint": "c7cce22ff5969547be08e214c0939059_352",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01540.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01540.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0ada82b783ffe1528a35dc46952f24be_0",
      "old_fingerprint": "d17743eb4d0cfae69bff5f5087d62a0d_350",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01541.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01541.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "77827e343b45b27ea1c6b58001516f81_0",
      "old_fingerprint": "0053615d58bdd9236b8e50f1e6a3fcf8_267",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01542.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01542.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f8d1c98a16833f74c7de65f7f105beb0_0",
      "old_fingerprint": "b78d4fd3e8fd9b1133aa6c276cf9537f_227",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01543.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01543.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "842a487a9c3e7e29e3b1b2bc96218836_0",
      "old_fingerprint": "0c542222fdd5a0a8aeb7518d777b5281_231",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01544.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01544.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "819909e21b285b55d92563185a0d8f69_0",
      "old_fingerprint": "05be9b071ab92ff1461f13280c8bf591_219",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01545.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01545.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "53581d9385e32e28fb026daa71cfda91_0",
      "old_fingerprint": "e7361ac1f0122c02ea2d37bdfc152903_234",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01546.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01546.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "63fc03203b141c9f0af4bd92405c13d1_0",
      "old_fingerprint": "2576d1ac9ba2b301cc24b5a688151fae_24",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01547.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01547.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "ddfa2b969847c211486ceda8b1b72d3a_0",
      "old_fingerprint": "cafed7cf87c0d40e7fbda43936a520cb_31",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01548.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01548.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "66b92afeab771f870e88f241a72ddfdf_0",
      "old_fingerprint": "e34f365d001a1f18fec787b8f9c81c56_16",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01549.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01549.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "67a7bfb798d7be4ce179176201ec756b_0",
      "old_fingerprint": "6073f0460b5b7c8d57ec6cba30c154f3_25",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01550.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01550.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "5aee2a4f769e84b94f98d7c0f02db58a_0",
      "old_fingerprint": "344ad57c88180a93d54186e51eb48026_14",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01551.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01551.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "17c48cc9057f9c50d495ee5e9995b163_0",
      "old_fingerprint": "939034bf2644dc5325381699bf7a8240_20",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01575.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01575.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "338d51739b06d98632432b577733e738_0",
      "old_fingerprint": "0afd256977b14968f8ed980e9788021e_218",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01602.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01602.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3f8ec145f66370a52aa5337c1c4fc1a5_0",
      "old_fingerprint": "33aa8f120a893b0517390c465cdd2bdf_180",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01603.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01603.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d4660e949c411485f0c812ba1fceeccc_0",
      "old_fingerprint": "d48eee8103966ecc78be6354bb1d4155_169",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01611.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01611.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4d9ed63d9a177bd66f408b9c41aae1b8_0",
      "old_fingerprint": "e17634c8b29759bada3aa7d940b402eb_347",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01612.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01612.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ca1455ab458385cbeb223fcc4055e793_0",
      "old_fingerprint": "9f124ac9d59e91ad2aebffce59dbd9d7_235",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01613.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01613.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e3041bf82d16bc4568f392880834acb3_0",
      "old_fingerprint": "ea7f7212f2daafff7c17567d055e56b0_215",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01614.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01614.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2437dc4a84ad52d30b00d575471d92c0_0",
      "old_fingerprint": "5ec28e6e102df52dcf8967a120115e7f_214",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01615.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01615.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "cbb18542d1bf61103cc10594f331f1b2_0",
      "old_fingerprint": "38f5f575a0d8a2414cea9534283eb63c_23",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01616.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01616.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "da545e776a92287237a0cecd1565ded4_0",
      "old_fingerprint": "164d0f6356c8aa052c7f073a93d21055_26",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01617.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01617.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "3b46326dbda6566864aa54edda968ea9_0",
      "old_fingerprint": "3f37fcec53d5878de59b9555fb7abd99_27",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01618.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01618.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "bbadbfde1e04766bb9287600e5d22521_0",
      "old_fingerprint": "0e4587b2eeb48bdeab3144a506aeabd9_33",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01619.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01619.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "d245199157943da2f4bff4c259b3f304_0",
      "old_fingerprint": "2b30a6a08647b5f7c57f8dded2c2bbb4_32",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01648.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01648.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a551cdd0b3e9daeb1cc6a3210710f647_0",
      "old_fingerprint": "2a9613fab5c3f0f3dbe272108785c57f_551",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01675.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01675.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2600c34844c6923814ee9ccd1e05607b_0",
      "old_fingerprint": "6e55b5768d342659e1962d983e511464_548",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01676.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01676.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5d010dd8cec6d63cd6531c5811b6f47f_0",
      "old_fingerprint": "65f075ce216bf5d33b450351c6dbc4ca_541",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01677.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01677.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "50866ce9e5f9bdfe6324fa5751dc3fe2_0",
      "old_fingerprint": "04dbb4ecbc901919eb59a4692a469885_542",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01678.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01678.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "421705bb56b11352679b2059d27984a9_0",
      "old_fingerprint": "aee3b514e9c1eec6a6dc8892eda52459_543",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01679.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01679.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e336d2a074be95bca4e073c48f5618e8_0",
      "old_fingerprint": "d61a96ed7be3cddd2ac49f7ea9a41163_534",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01680.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01680.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4b14419264873e0d6969502a432a2758_0",
      "old_fingerprint": "6d29426375d054285a4c0430ce92cd17_527",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01681.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01681.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3a6e7041f13fefa79107c47236ef95e8_0",
      "old_fingerprint": "3604e3fb450db7bdad8e4b19f9d916da_528",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 115,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01694.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01694.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 115,
        "end": 115,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 115,
        "end": 115,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 115,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dfe3123cd0eabcae9e56384218fe6ba8_0",
      "old_fingerprint": "622c5708bc1ef79bb45a0a6702a0d5dc_600",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 114,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01695.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01695.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 114,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8da9ccbea04b680b02e2aea227aa37ca_0",
      "old_fingerprint": "e6d3f3cd5556b8e5263008c062e24124_595",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01696.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01696.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "128a8049cf877b0dd499cbcd067ada1a_0",
      "old_fingerprint": "0a7c369fbc1e89440ef47ee23f1c5e3d_581",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01697.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01697.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fc3a19be9e4b73a9bce311db8d381313_0",
      "old_fingerprint": "5c2af750634fe7681507fc6c10623a37_584",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01698.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01698.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eb88f75d695552f6749ff7b3b90f4b23_0",
      "old_fingerprint": "4a28d77080af96ead115fb5b62a5f5fa_585",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01699.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01699.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7a2227b88d43768cf4f615b1046f1420_0",
      "old_fingerprint": "76f84dd3321e7d95ccd38f020c766d23_586",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01700.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01700.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "27178bc23edea08058739427bd23e754_0",
      "old_fingerprint": "04ae43ced46bef9cb8a1e82a040676f7_588",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01701.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01701.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6da33387ea35f40b536834cf760077aa_0",
      "old_fingerprint": "bf7e7418f37f1c6cf79b620521f3964f_577",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01702.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01702.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cb47bb7ea8e9d8c5000b991584391c05_0",
      "old_fingerprint": "c1e34221555ae2b83a6dae3f227bb7ee_589",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01703.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01703.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f4d761a01b9524070f42edafb1c5d1c5_0",
      "old_fingerprint": "603ffa803c144ab2f67fd9bfee5e1ca6_561",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01704.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01704.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d8257803b31851e7a2b06670e2c5d4eb_0",
      "old_fingerprint": "3242c48249d57b9e7fa9cc0029187730_557",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01705.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01705.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "32681c78a677bfbe96e8e64575c38a9d_0",
      "old_fingerprint": "d99ec412e4fb31c08001e465e28d8c63_555",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01706.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01706.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1e7bd4a899df6e81b5962df8e9ee4cdf_0",
      "old_fingerprint": "bdd99a87bd2b9f89ca754ff295d38939_550",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01707.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01707.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d74ecbe47bab0a4d447d5bd9e4ddfe16_0",
      "old_fingerprint": "af5c74b7d95555eab2485e95e3475bba_549",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01708.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01708.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "bf36d6c4b7ed1719ddc54992ffc6f65d_0",
      "old_fingerprint": "a74e5b79940c599298cc0db82590b9ac_108",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01709.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01709.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "64bcd23f5ae95c024ffc465cf91fb4a5_0",
      "old_fingerprint": "b4e83179edf248dfb0c0b7081eb5f4a8_109",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01710.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01710.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "f92670431ae35354382444cbf2388f1b_0",
      "old_fingerprint": "e4dc7e94cb03dc1b2604001d060d4a89_110",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01711.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01711.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "08e159af4175362bd767b39048ad741e_0",
      "old_fingerprint": "9f6798e03c9f5370e81c53a27d245b6d_104",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01781.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01781.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cb1de7edd93f08450a95015d6acba0f4_0",
      "old_fingerprint": "288a81937ca7b97794245e80be09faa1_147",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01782.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01782.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c0de1512ffc7860d7273ca19ddfeb5eb_0",
      "old_fingerprint": "cf1a564a2d85c3982b56f91d9db08c97_128",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01783.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01783.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "161fb4ef8e707f7fca599f390d2649ed_0",
      "old_fingerprint": "954935b572c49026b2f57c09358a338f_136",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01784.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01784.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "007aa5259bcfd74f75801a2d0335f1ef_0",
      "old_fingerprint": "e90d4c0d7ef361a45289f7c203cc0e7b_130",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01785.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01785.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e50dbfeb09c02b2675f738ebdab70ea9_0",
      "old_fingerprint": "773ec6c33a8ae7784eecdecc92c80cb7_134",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01786.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01786.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5e2bbf3c7c7a03a050fa3a488b166c01_0",
      "old_fingerprint": "dd961e75c0ff1ff3a7f4df31d64fc8a0_137",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01787.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01787.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6c7b3264c22b300b18dae9f87f4f7eaf_0",
      "old_fingerprint": "de3f65105af89af12ff34c65954d5a35_138",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01788.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01788.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "95eafcbb2204dbb1cf8df288b778cf70_0",
      "old_fingerprint": "15299898e4bb55b48dfbf18effe1c48c_146",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01797.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01797.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4d83d375b7f8770bf4927b9c34aac178_0",
      "old_fingerprint": "821fdda88ada1b5ad975911b35e2166a_256",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01798.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01798.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2f0722b46abbed892be11abccb45d86b_0",
      "old_fingerprint": "dbfe6a1f7d4f742485d6a722d4b3c05c_205",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01799.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01799.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8eb46aae931b50d7b492d0d05d033a38_0",
      "old_fingerprint": "7c721e9773e85495a3c1896d94d21aac_207",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01800.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01800.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "af8be1e5c67f6a7d17701d77bf4e73fd_0",
      "old_fingerprint": "17a248dc706e0afa431fdd7f2c87a9dd_187",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01801.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01801.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c64f3367c605aae774aef9587947f188_0",
      "old_fingerprint": "f56589a48e52976afeb55f0ffd2e0ba5_186",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01802.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01802.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "e35c101f742872754d549bb1b52b092b_0",
      "old_fingerprint": "a726d8a6953d65bd4955bdcb8a9356b8_6",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01842.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01842.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "078d3f1fac971f1a44c2230e0f456e71_0",
      "old_fingerprint": "f25f6a58229830f4cd3caa0c076b5153_496",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01843.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01843.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "744719a26d48478f02b533c38547333d_0",
      "old_fingerprint": "42d4d63d3f3ed912ee5dc55dfb728d0a_493",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01853.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01853.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "11df54c0af4739f896e8578e15336d05_0",
      "old_fingerprint": "c803960abb4fe5995cbe39f6ff57c876_492",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01854.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01854.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f2f440cde1b154a167e26bbcfbce975a_0",
      "old_fingerprint": "071f4f730e16dbbb90352b02aa8a8171_476",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01855.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01855.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "364a9e17a6e369bcd71c22772a90593d_0",
      "old_fingerprint": "8c069ebec63e6f118f971df44926b730_475",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01856.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01856.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6ba9c94bbbc5875e5f998fa95caf98c3_0",
      "old_fingerprint": "aa520d405d55ffe35d2c33406bc25bae_474",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01857.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01857.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "bf83229b022ba13aa0a0311753029746_0",
      "old_fingerprint": "42ed838105008b859416d8079b41cd5b_473",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01858.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01858.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "749d96f9230f0c60a6f0040e21174e33_0",
      "old_fingerprint": "815e1d897fff4b93bc8ab28b35efa924_472",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01859.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01859.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "39d847ae01272b3a57bef3b8a46eb2e1_0",
      "old_fingerprint": "4616d5f17457bbccd0c22754ec92ff1e_471",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01860.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01860.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9705c1d5bf7427a6c364557f229a7c39_0",
      "old_fingerprint": "395ad1b8390ea1554e6ba3987e8d8e28_470",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01866.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01866.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f5e7ae2f05fa8a8d25e0a285aa0c9840_0",
      "old_fingerprint": "01128f8d8119b7597be6866a43ab1bd7_522",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01867.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01867.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7598c83173c87146841e56a0be7b4547_0",
      "old_fingerprint": "9b8d5bbccab800395c9a874628ade4ea_526",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01868.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01868.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4b2f057b1e63df68eccc3c6fe1c6b827_0",
      "old_fingerprint": "31dec90b19f30ca7fc021ca36d2345e0_572",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 110,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01869.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01869.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 110,
        "end": 110,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 110,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6353fef17118151643f867982a184d58_0",
      "old_fingerprint": "b29c600024615fa024a4eca9885750ee_576",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01870.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01870.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "87acbb386bd31fd7ea0972899da43423_0",
      "old_fingerprint": "bf61d6adb10f4d0d93f02ef27846fb13_501",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 103,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01871.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01871.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 103,
        "end": 103,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 103,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8b916e035d4f6f2d2239bd246757e84f_0",
      "old_fingerprint": "ff87f0bdbe6086507d6e83f1842cd316_502",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01872.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01872.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "9be69d0507e9c1d61fe8e32458778b8d_0",
      "old_fingerprint": "e479e2f89c2402f08709bd9012a0b32c_98",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01873.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01873.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "10c81c92aad34f0f057a7718e4ea3ef6_0",
      "old_fingerprint": "48d9d6244291fba6f1ad155bf0d5ff61_100",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01874.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01874.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "83cd0db62ab968513e404b089c22d006_0",
      "old_fingerprint": "a10cf10d8a1f49963f911aaa8d4365a6_99",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01875.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01875.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "75754e25553e49a695d1fd79da5df519_0",
      "old_fingerprint": "d2a96a83d63fce6a7afc4c356c6f1914_94",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 68,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01876.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01876.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 68,
        "end": 68,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 68,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "936c726b9ae78030896d5c339de0ab83_0",
      "old_fingerprint": "5fbbd2bb4a6b544593c7ebedfa0f1fb3_93",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01910.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01910.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "67a4ee6e7cb274c070ed68a293522102_0",
      "old_fingerprint": "cdab43e8d688f0a6d513b604e569a031_285",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01930.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01930.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f66564c13fb931f224b7ac801dbd1cad_0",
      "old_fingerprint": "534ac36c87ad58e109aa4041b3c1eddf_254",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01931.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01931.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "36575c077169660be8716a0ce03c6326_0",
      "old_fingerprint": "eecb798576209ab3dacc812074fa1553_242",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01932.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01932.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cac63c16ac17a350508214fc5e893f8a_0",
      "old_fingerprint": "58e2b3b45726091ff2156bb1604e83ad_232",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01933.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01933.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ed681448dcbc123da01394d347ce8609_0",
      "old_fingerprint": "4092df9298287289bc964ab00933c1c0_243",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01934.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01934.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8211d2e09ff8c45f3822daad4ec57834_0",
      "old_fingerprint": "81976965b3997ea312bc983b3032299e_239",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01945.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01945.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ad475ef06e226748d09a346357867ce9_0",
      "old_fingerprint": "b2dc6456bf0f2e333fc4977658f5f109_396",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01946.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01946.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "39f71b3dff24dd9265eeb30c776eacff_0",
      "old_fingerprint": "422007bf991241534a25df190d253f15_394",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01947.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01947.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "fbf3a486c7a5141204b42b1efa9eb694_0",
      "old_fingerprint": "534ac98279a8d06b1fd97130aba40a2c_393",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 96,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01948.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01948.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 96,
        "end": 96,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 96,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "783bf0b9617f4a1ab3616abd1e4fd59c_0",
      "old_fingerprint": "ddb769a6a1e438b1558c42f7bf93f1b3_392",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01949.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01949.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "360873bd27c375f6faef5c3176661d47_0",
      "old_fingerprint": "a3a27023ea06e4a033c7da2d3988b342_323",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01950.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01950.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f749077eb49f3cdad7c24b98d3d89cfa_0",
      "old_fingerprint": "3a36b74905db3ab6364e8feed5a05ab5_288",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01951.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01951.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2e267ddcf36d98c9be52550542031b76_0",
      "old_fingerprint": "d74fef2faa892fe57e5fcabf9146900f_289",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01952.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01952.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "75305977125c0d61bafd8f898d9d2eb8_0",
      "old_fingerprint": "1fd98d9ab9f2deec1924e7e12c86b9b4_290",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01953.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01953.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "89e1e5cdea3d68d5104c68dfa792ef91_0",
      "old_fingerprint": "781e29220c9f27ae324e54d59db0d514_272",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01954.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01954.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5cedc4cb7d7f0afc7b41c38f8c10c41b_0",
      "old_fingerprint": "2117687cfe5e78f66f5ba60d176d654a_283",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01955.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01955.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "c69bdec5d00c78f5602a6040836618ef_0",
      "old_fingerprint": "7709c223146eca16f46706033eba7b95_44",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01956.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01956.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "574406bf25067b5ed1c26c76671744cb_0",
      "old_fingerprint": "7a95238174c5fd1ab9df3aa397b7c620_43",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01957.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01957.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "8ce1ac94ea966350669969a22100548c_0",
      "old_fingerprint": "459b8f712e1f1dee351e0dc55a25a415_50",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01958.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01958.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "ca4414850546cdca6529f3d07faed3f0_0",
      "old_fingerprint": "0258b165716fd30db4acc0693c32ac7d_51",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01959.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01959.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "e76fd0e32a865bb78acd5e2849f67d38_0",
      "old_fingerprint": "366f29570c1d18d766f3ff2b0acc397e_52",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 54,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01960.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01960.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 54,
        "end": 54,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 54,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "82d48657e43699b2048026ed05fcdbf1_0",
      "old_fingerprint": "e4ca6f54560d04d3af23a740cc3e55e2_53",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01992.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01992.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "de833b3f0f28d3799f4f2944451e756a_0",
      "old_fingerprint": "07c2d8e20100f7c1cab069263d9fdfcd_446",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest01999.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest01999.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d124e1ad41eb39002f5d3742d7fe7105_0",
      "old_fingerprint": "b0b2d3009c1b2616518a2435137b0f3c_447",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02000.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02000.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ed7e71b15be330301a4caef85601e3da_0",
      "old_fingerprint": "e0cc6889108549d9fe4325b89212a031_448",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02001.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02001.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a96012af4f00c99b2cc572862a75ad39_0",
      "old_fingerprint": "dc7b420d688bec3cfb70099c2fe33f0d_429",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02002.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02002.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8c6946359e59b0d2b3150b2478428399_0",
      "old_fingerprint": "fdce4dc13f81d30b5024404ba20a44d2_406",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02003.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02003.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "acf44ffa4f63fcb63eaa72c03c7ba037_0",
      "old_fingerprint": "d81aec8fc16f2c96e0368828c3217768_422",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02004.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02004.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c5573c0d20573d9422fa465d7461afac_0",
      "old_fingerprint": "66b67ba4ab658a8be46d9dd42f5707fd_427",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02007.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02007.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0f8457760472ceec14a5df7b3b4b81d2_0",
      "old_fingerprint": "2837d4c71ab702e0ac8146640df1ebb4_519",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02008.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02008.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2a9e1ee9067fdabf3d98d111ea9dc420_0",
      "old_fingerprint": "33cf8ced0f0ef773f61c31bbdddd8709_512",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 105,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02009.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02009.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 105,
        "end": 105,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 105,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "acdae5bff3a97c70af9758c49961be58_0",
      "old_fingerprint": "763e1b00afcde580c0046cdcd773292e_513",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02010.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02010.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "59c600be34ace02e9ce01a8be308e48b_0",
      "old_fingerprint": "76daaa2fcb39180fa9360bf76154a28c_483",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02011.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02011.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e35250611e06a2e3cadf74087634b21a_0",
      "old_fingerprint": "80b230b5840876cb6e43d46057bf7ea4_480",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 106,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02012.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02012.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 106,
        "end": 106,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 106,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c33434ec51f54f60353e12d00d770e54_0",
      "old_fingerprint": "913b8088877e03bad1e232cdd3ce2993_521",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 102,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02013.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02013.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 102,
        "end": 102,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 102,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8edd5e6ec326dd04574ac198ae733799_0",
      "old_fingerprint": "5846845141175eaedb4a0175ce02cbb4_469",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 99,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02014.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02014.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 99,
        "end": 99,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 99,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7571e1647f907b232074d5a4cdbd6cc5_0",
      "old_fingerprint": "f9103ab172f18d66ae21fc9d2aa70a06_441",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02015.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02015.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "ab79f7a7f10780758ecc8efa057af982_0",
      "old_fingerprint": "a84828190cb818bfad15b77d23aae8a3_80",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 64,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02016.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02016.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 64,
        "end": 64,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 64,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "4a4667790faa6c4fa00920e2a1e150de_0",
      "old_fingerprint": "eeb302e5a6e20e66075a0cac9ae4e512_81",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02038.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02038.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "43607fb32aebffeb6c704037f5e99258_0",
      "old_fingerprint": "2a7254a5358002d2379f271b3c405974_315",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02039.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02039.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "08f90507248a5bd0a274d258ec6c0a88_0",
      "old_fingerprint": "6aa49cc3a8631b2eb39e701829c91386_316",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02040.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02040.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f71fea48d1a87fd4c4162c41b83dcb6b_0",
      "old_fingerprint": "3f039ab52f59d52633d2dc2663fb7c03_317",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02060.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02060.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "002820e7dbf14549f518e987ace81d07_0",
      "old_fingerprint": "c88cb682709dddca3362e1d820aca4d4_297",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02061.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02061.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eba554fa9272585b4255a8f4585f4398_0",
      "old_fingerprint": "fa9b9a8e155f14283ce7eed053b97993_271",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02062.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02062.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f15b030860634e917aa3fd0e7d9037eb_0",
      "old_fingerprint": "4ecb4ce8b52f21599aaafccab1cacba7_276",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02063.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02063.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ca57ada07cf89796404f7ce2c005518b_0",
      "old_fingerprint": "a5f81b5c2c757681c890621420c92d59_296",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02071.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02071.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8b1dbf12c2d962faac3f3bdf4c0fbb74_0",
      "old_fingerprint": "b0fdf5a256db1c79ea1a55a101efb597_435",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02072.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02072.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3836ac2ff602af88765a3d7fb8ad5a35_0",
      "old_fingerprint": "79d6c17d0855659edf818a6de6c9ea75_437",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02073.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02073.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "527481184a1de4f17f0dd2e0ca4b4714_0",
      "old_fingerprint": "33109d13e47fcaff9d734f8b00c9017f_410",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02074.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02074.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "559c5c84f8484436efe61fc097457b8a_0",
      "old_fingerprint": "236960365e3dd1d185283c4f626e4e0f_367",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02075.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02075.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2fb9554836dfbaa075ad731190c24b46_0",
      "old_fingerprint": "9495f411124507e6bd131919ee47ba48_368",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02076.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02076.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6c4886dfb55f24b8cfcc09c649bc0069_0",
      "old_fingerprint": "d49a2fbf0eb65898018ecacfc68e7abe_369",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02077.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02077.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "56b149a091862d64ba8ca24afbcc78af_0",
      "old_fingerprint": "5670b47588c406b39c467fd87fab1c5b_423",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02078.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02078.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "26ad4e0f416f0c3506536abbcb073bc4_0",
      "old_fingerprint": "6dbe6c7e99f75e360b21385211c93930_370",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02079.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02079.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9de3bc5099e513a27799dfd99723dcf0_0",
      "old_fingerprint": "2bc8658f62170a6cd1cb4414b32225e9_326",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02080.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02080.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2fc9beea587daf4818eb7ae0922e53ab_0",
      "old_fingerprint": "b98f5443921fa773bf694608736ac3d0_325",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02081.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02081.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "55a71114aa925c069565fa70b7cc4101_0",
      "old_fingerprint": "8ac74390e3a2f92aa6e82c6542d8fb42_322",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02082.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02082.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c4d32fff7a2e59014af042644c99f32e_0",
      "old_fingerprint": "2f8527fcb60d9dc14a69cc5c4333128c_321",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02083.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02083.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b52156cbd1ff0f7e6f92f46a4461a604_0",
      "old_fingerprint": "ae4047408eded4f2251dca677183647e_320",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02084.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02084.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "34cfe00e0f41719b9f44c8844b2380c9_0",
      "old_fingerprint": "deba87136d38d82f0029be37e754464f_57",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02085.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02085.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "dd645210eb5de47207ea632805c2f7bd_0",
      "old_fingerprint": "38513285b00ade009168c0d40a3682d6_58",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 56,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02086.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02086.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 56,
        "end": 56,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 56,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "f14d90584687beabd5961ba3e1f8d5aa_0",
      "old_fingerprint": "25feeff33964fa599139c6ac2f6f10f4_59",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02117.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02117.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7d524002f6e2b838ef9989b7c9c0e37d_0",
      "old_fingerprint": "262ab0e0ea507c0a457f85b5e79b367d_148",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02138.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02138.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "08b6748f1f586fb2057c6834b17620b0_0",
      "old_fingerprint": "79f016f6c0d357e530b193642663ca10_149",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02139.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02139.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6a24de00c44089b8996ab192243fd71a_0",
      "old_fingerprint": "10fc7818dcf06da8d1fe8c4db0f4ed7d_131",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 82,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02140.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02140.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 82,
        "end": 82,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 82,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "92efb3f21d06d22f810a29108392fb7b_0",
      "old_fingerprint": "263403e39a5286c8e092da12ec6eec4d_120",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02141.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02141.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "43d40b61b62ebdb7d74500093a0fda4e_0",
      "old_fingerprint": "6af6f14d12f99d40c10b8d0c43501178_129",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 90,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02157.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02157.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 90,
        "end": 90,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 90,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1278c0ef56cc00bd8e8f65fb46470800_0",
      "old_fingerprint": "66938d0f4d0c09d05da13579e6711a68_295",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02158.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02158.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "a75a684b52fc224bb8779fe73ec8995f_0",
      "old_fingerprint": "498dea2d6e54050682c32310325d2336_224",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02159.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02159.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "435510aac396bb4a136a354c8039e91f_0",
      "old_fingerprint": "624c88db9735e60e1b32db32ee3f8ae0_225",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02160.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02160.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "01b233fe8f1a675a072f04589146c9af_0",
      "old_fingerprint": "c0878717bc5d0cc0d08179621956f964_226",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02161.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02161.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "de9212955efe10a56c66dc280dd17677_0",
      "old_fingerprint": "2f31f03ab28772dabbdfb9a946bde766_155",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02162.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02162.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "596f0cfdf6a5b80394059e4fbdf1a326_0",
      "old_fingerprint": "6a496ea4372ff06524294d8f0ea250a0_156",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02163.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02163.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "668be76cf1ea63d9699453554b9fb446_0",
      "old_fingerprint": "2d15061d08629252b4985e9684cee9c8_141",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02164.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02164.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "91f08522e195e0eda3956ae5a25df3ce_0",
      "old_fingerprint": "7bd7ef7782c7b2ca14ecddcaa977e683_166",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02165.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02165.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "750dd1756a84195361c4fb087175cab4_0",
      "old_fingerprint": "7cb754a7ee3ed260a2e02998a2740386_0",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02166.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02166.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "929b40effa6889fec30af4399ed3fb3f_0",
      "old_fingerprint": "717baeead250f1fa9e9e8b04fcb5b24f_5",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02167.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02167.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "9511a22b4e25d1235b060fd68c686b18_0",
      "old_fingerprint": "ec584cb0f518e23ce74545c4b29cf8c8_3",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 49,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02168.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02168.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 49,
        "end": 49,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 49,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "50201fa0d2a9bc8935d9749e4fc4120d_0",
      "old_fingerprint": "7ee24b1f850a5672c331daddb9ff59ee_2",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02209.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02209.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "958c4fba09c6cf4899fc74cbba8cfed7_0",
      "old_fingerprint": "bb6b513d25073bd8e2613d337873ec5b_253",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02245.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02245.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f11883cd710c958dceb8124286ba84e5_0",
      "old_fingerprint": "2943504414e87bcd4dc6ed2088046278_217",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02246.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02246.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dcdf0408918ef6d81f59298bdaf5bb79_0",
      "old_fingerprint": "59affa3e6d71acf8769ba4b8d38fcc3b_213",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 94,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02254.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02254.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 94,
        "end": 94,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 94,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "eecc9020c228a2e42aac9916007e098e_0",
      "old_fingerprint": "acf2460576668cb015ae949744af65ab_360",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02255.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02255.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "697a826e53e720eff3e9a66c1939ac3a_0",
      "old_fingerprint": "7465253721885022c7b48f05ffb4cd0f_310",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02256.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02256.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3e0f249e404b5cda539d4bc2449d5bfe_0",
      "old_fingerprint": "29828cd89628e0962671ffb91b841977_309",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02257.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02257.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8f9333e21ba0982b37f5c32299d30fcc_0",
      "old_fingerprint": "e9c3dfcda0b242e8197c8ce83a4b5c18_308",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02258.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02258.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "778856a9d351af5d772eeb6cf30e6f45_0",
      "old_fingerprint": "981afc71d2e978100fa7b3610748fae4_305",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 91,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02259.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02259.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 91,
        "end": 91,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 91,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c8c7e4e299c4072bc980da505f8ded6d_0",
      "old_fingerprint": "2aeb4eba60f898e30d48a1141bff55b6_304",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02260.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02260.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6c0c64711c198b3db1f0d325513af735_0",
      "old_fingerprint": "239a2919cbf4046a46333d24d68b6021_248",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02261.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02261.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "06f6edec32ef178ffd927f13f98767d3_0",
      "old_fingerprint": "652047c1792a35cd36e87f435a0967d2_42",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02262.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02262.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "774952ee837d6666a546070928637772_0",
      "old_fingerprint": "e1c5e57a41d0b743660b6b2d6335afd9_41",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 53,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02263.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02263.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 53,
        "end": 53,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 53,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "e7ef4f646a4d8bf96b41e3f14c247eb3_0",
      "old_fingerprint": "95625df7eb151725fcb6ea58b9258866_39",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02337.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02337.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "50431fea88e6cd6d874c2ce556684860_0",
      "old_fingerprint": "51492ea6aec1397b6665ac175f777830_421",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 97,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02338.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02338.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 97,
        "end": 97,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 97,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "124b1ea278e9311d86b8907776574976_0",
      "old_fingerprint": "4cb1175b5341f8603fae3a1dc6c9b211_408",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02345.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02345.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b49c176779bfd63759385633f5c597c7_0",
      "old_fingerprint": "781d24025ca8d153508a3b96c135c4cb_506",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 104,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02346.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02346.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 104,
        "end": 104,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 104,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7870c31f598c59e65539c5d8bc8d7d25_0",
      "old_fingerprint": "b2cdd5f2209f610581c6a905169f7963_508",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 101,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02347.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02347.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 101,
        "end": 101,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 101,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "d7f104084e0daa9b2bf9b288c3d63046_0",
      "old_fingerprint": "b0db23b5265e046bc7c175fd2ac60676_459",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02348.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02348.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dc4bc9f0bd35a0f32b4e6cec92118234_0",
      "old_fingerprint": "7b20c8d052b0ffe81935849076f786a5_438",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02349.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02349.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f6eaf683578342e400ed6ff8f577b8c7_0",
      "old_fingerprint": "e87d843455f8faebb9d63371303eab49_434",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02350.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02350.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9c78d225c30fa30a028043d0652559d3_0",
      "old_fingerprint": "6ec527adc6ce76faff4c13c87185191a_432",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 98,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02351.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02351.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 98,
        "end": 98,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 98,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4096a96e3e9319ae339d7008745c6ba7_0",
      "old_fingerprint": "27a7911b01a6c21e811f8a224560b1cf_431",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 63,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02352.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02352.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 63,
        "end": 63,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 63,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "8d7083d5e71a66921241ca26ed28d983_0",
      "old_fingerprint": "82f22242290c1a6ad6a0c2726c17813d_78",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02415.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02415.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "1e04dd1b1384bc9d8552b01079a3847c_0",
      "old_fingerprint": "dbea63b7f11547b532af635101da41c8_198",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02416.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02416.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e849490b6e4159005f0db5907a8a27e7_0",
      "old_fingerprint": "53ea547cac9662aeeffb95736c965089_181",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02417.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02417.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "703bc0ea892bd487e06374019d0d468a_0",
      "old_fingerprint": "27d88038cd7fd9e024b4e64ef3bd061d_193",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02418.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02418.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ba58f947ae760f839b57ab0eeaa02f1c_0",
      "old_fingerprint": "213002832a9c6c67fad5843de31e75f1_191",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02419.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02419.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b797768660bf92bed02aee02f9ad8924_0",
      "old_fingerprint": "a168cee0847c15418b5006445f0f5d6a_185",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02420.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02420.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "da757f97888a9c4c22cd1e11da2a465f_0",
      "old_fingerprint": "a47464422c21fede49880fa2de3bc210_140",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02421.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02421.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e1845acd6f7aa59718c727031e5e69b4_0",
      "old_fingerprint": "f138adb57e5d5adb3bed230f12e104cd_153",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02422.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02422.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c11a8091e973083d7f04824a81961c7e_0",
      "old_fingerprint": "98cf5b4e2fd5deff138d2a669e52c149_154",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02423.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02423.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "908dadb8d759e6e44ac61300a969e059_0",
      "old_fingerprint": "a7cd82848c6af3eca5d5ea917b85634b_157",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02424.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02424.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "05c93d7761d57edea19f4f566a77dc22_0",
      "old_fingerprint": "1209ecde5426e13676aae29ef96decb0_158",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02425.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02425.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "69ffc2fd1f1b563e737b40165ad94070_0",
      "old_fingerprint": "3ed9c460f1160d9d2554bf789e05c326_161",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02426.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02426.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e01a9c17c0ac7e03bd27ff7a9526ce49_0",
      "old_fingerprint": "f5cfadf5a5b5d6c6976658d7ca3ad9fa_176",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02434.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02434.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "854374a329d534b39b8c66af20d0d362_0",
      "old_fingerprint": "5db0d03a619c42edf0209d7c136310e2_328",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 92,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02435.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02435.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 92,
        "end": 92,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 92,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "9aaec78de912dc0aabe0577c5a3a09e8_0",
      "old_fingerprint": "56ab77fab70907a2c70cb7d1df75210e_332",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02436.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02436.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f67a9ae9f3df9102eeb1b44e04696860_0",
      "old_fingerprint": "e6aba87934f02190c311a573d40ece7d_278",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02437.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02437.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "cb93c28fcca526ba71245266677a8461_0",
      "old_fingerprint": "1fea0b050e2cae54b46f75204b0ddbeb_277",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02438.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02438.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3641a9a21f65561e59b23da8562423d3_0",
      "old_fingerprint": "ce7514c17200637b4071c4a733ff5e1a_259",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 93,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02439.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02439.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 93,
        "end": 93,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 93,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ad654ed07ab0fc33c2c1efdd5de926c6_0",
      "old_fingerprint": "2fdcabd2e5edb7368cbd3997c5d4e72c_346",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02440.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02440.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "2d4a16f82094a5742a9288b953f28679_0",
      "old_fingerprint": "829217101b81db4c6a8837d1b68d66aa_228",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02441.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02441.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0ba7bfb4c7fbd64636a9d2c33ecec5a1_0",
      "old_fingerprint": "287b59b165eee4270a648ea65549c148_229",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02442.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02442.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ce6d2d588790462295a7e0d0167512d7_0",
      "old_fingerprint": "670010355ba5d302420c4ec1dbefb54d_236",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02443.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02443.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0591d9ce8d94dff97a1ad05033511d18_0",
      "old_fingerprint": "aa0c661c6dabc496ae51ec164d2a34c7_237",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02444.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02444.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0b5ce0f6904808f287cf0f132cfeb39a_0",
      "old_fingerprint": "536425dd606f761c6b6234a544f04b5c_212",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02445.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02445.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0ba668e01af7e0cea093da078f72daec_0",
      "old_fingerprint": "4de94d2915a46cad8e95eaa6e72461db_211",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02446.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02446.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "f6204757c3c2b221e1d55c79ca55bb41_0",
      "old_fingerprint": "5a8e7e17c0799ac831f8adab3959e408_18",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02447.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02447.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "6fcc2f8808af7a10d28894cab3bbcd57_0",
      "old_fingerprint": "766bb767f979ecdcf8a895f85c17ed62_21",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02448.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02448.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "3e1d64ab5cde8fdab8c15fa6ee09e4f2_0",
      "old_fingerprint": "0f077d1c283b4d43ba4c83c6f13b6672_28",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02473.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02473.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c15a1f2f752b011095e958f2feee3fcc_0",
      "old_fingerprint": "75104fafe574d30d8d64de7fe7bc64dd_209",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02497.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02497.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3810f010ce954740ce8341fef1dc00aa_0",
      "old_fingerprint": "1c0208e33d88f668a5833c3f017f2911_172",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02498.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02498.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0d660480bd7d8b2b7595671f85823883_0",
      "old_fingerprint": "0c6a26007b094cf5a08710d9d0c33a0f_173",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02499.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02499.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "13322adf64284e9f1704c34f0cdd8f86_0",
      "old_fingerprint": "c1fe8d532c13c19687f7cfe29a946689_192",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02500.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02500.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "f4a44065446dffb4af55e7b0e8f2c7c0_0",
      "old_fingerprint": "c01547a8270b0d69e404345a9cde9915_145",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02501.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02501.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e1dc3ccf00ba57a40724fb2b1ed925fe_0",
      "old_fingerprint": "7b434dd98d9c3ba1dee3b13eefd70d42_144",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02502.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02502.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "81affc17efff62b59ce88fa3f5e8901d_0",
      "old_fingerprint": "66fa3d1ec2f20f9d1f8c1c4dcd74a61a_143",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02503.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02503.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b8f7eea9d18e09186e059333298bde8c_0",
      "old_fingerprint": "08860f2cd1184b4f4a4b630ebbf0c3b9_142",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02504.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02504.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e673ed710c9c071b89aaab32249b5d0b_0",
      "old_fingerprint": "98406107b890e70d25c8e61daca33ecd_152",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02505.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02505.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "352c9fc1aac7e0d926f541cbbda2a4e5_0",
      "old_fingerprint": "abc48f99e5db4eedc0908ac2d0ef6395_167",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02506.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02506.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0ff1b3e5299f4790cd8f2f742b26ab6f_0",
      "old_fingerprint": "0f9d3be2dab4691c16ad9d7bbe1fbc66_179",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02519.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02519.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "428dc416756eeffa6e5c3203d47de4fa_0",
      "old_fingerprint": "b29fc0350dfa53f3c8abf55175ccf6f7_265",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 89,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02520.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02520.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 89,
        "end": 89,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 89,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "dc6b8ee5c5f9029c279b9e2ff848a3fc_0",
      "old_fingerprint": "ba9d0dbfe66a8a5393f29a6541c592c4_266",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 87,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02521.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02521.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 87,
        "end": 87,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 87,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "63c48ce53aa015a0a7a5a588ad8e7c88_0",
      "old_fingerprint": "5505b126410d6e964ca419e90e290afe_220",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02522.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02522.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8a6c0ae3208a08c38438f0b509923f2c_0",
      "old_fingerprint": "d3a485930a3d59309e470d9a36ee15b9_216",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02523.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02523.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "4d94dd3964f96c0390b1e886202f1599_0",
      "old_fingerprint": "bd556c24b10e35ace59265bde4d76f94_29",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02524.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02524.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "57f87d060936bca090b0afe4adbb035f_0",
      "old_fingerprint": "899734964ee50f5612843c1bb258faab_30",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02525.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02525.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "44bc42732523434c82ed67e5426e9312_0",
      "old_fingerprint": "cf0ab75635698a256664a33d5c763f38_15",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02526.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02526.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 53
        },
        "content": "request.getSession().putValue(\"userid\", bar)"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().putValue(\"userid\", bar)",
      "fingerprint": "04ff2e1047afc8bb3b41ec2ead42ff94_0",
      "old_fingerprint": "f40639b021fd20071e28bb2cc707e717_17",
      "code_extract": "        request.getSession().putValue(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 51,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02527.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02527.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 51,
        "end": 51,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 51,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "36f6cc7b21fb6a26f1bd318f15419b05_0",
      "old_fingerprint": "f6b46b4d37de3721c52f823d541534d2_34",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02602.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02602.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "bad16aa8aef8f2b5c207e682d3cb3def_0",
      "old_fingerprint": "ed8ee15527c829a162d72649b4ef3a59_559",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02603.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02603.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "418416fb47cd918271096d38c90a71f9_0",
      "old_fingerprint": "cf60b20b218537d8f2af0c2d4c56fb90_552",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02604.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02604.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "c19b650ea0d93e8b71fbd4f3daed3afb_0",
      "old_fingerprint": "2156b20cd99539f202b07b39ad0aaecb_537",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02605.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02605.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "87a683b113f7917751abc45ad9d86daa_0",
      "old_fingerprint": "8f9b71382a23638733b49ad8b3333de2_538",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 107,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02606.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02606.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 107,
        "end": 107,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 107,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "e2064aa3b96e288fc205e0c0396484f2_0",
      "old_fingerprint": "c1037db69b36856f6fc770888e329065_533",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 114,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02614.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02614.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 114,
        "end": 114,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 114,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4c634752b37cccc7019119d1d2f11e10_0",
      "old_fingerprint": "ff5c124fa0c86ed9ce9d874402a2f41b_597",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02615.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02615.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8b4dafcc3eb62e7236fee4e0a5b8a52c_0",
      "old_fingerprint": "ebd143fde36cd9d3aac500e5ecb44915_579",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02616.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02616.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b634c2e14a8303a9494a97408fd4c5c5_0",
      "old_fingerprint": "0b2454585e24fcb85095e2e5aea5461f_580",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 115,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02617.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02617.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 115,
        "end": 115,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 115,
        "end": 115,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 115,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ba389358354911fc16b7c5bf2c80ffdb_0",
      "old_fingerprint": "35628047a4c3d17e7622def154510ef6_599",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 111,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02618.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02618.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 111,
        "end": 111,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 111,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "6dcf7e715b5f87c1db3d4935453d58ad_0",
      "old_fingerprint": "0915fd2561c5c7f3261738c010b45155_582",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 109,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02619.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02619.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 109,
        "end": 109,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 109,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "479f75d9ea5d15c74a7e5a42fb5bff37_0",
      "old_fingerprint": "3da597433a3f1f2dfe39c1b566b5052b_567",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02620.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02620.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "b31ad3a89d5fac7b4e525910bd7f459c_0",
      "old_fingerprint": "ec4af8ab4f02f94cf53506f2e15d6a0c_546",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 108,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02621.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02621.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 108,
        "end": 108,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 108,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ca6c64a973ea91b545620354b48b0999_0",
      "old_fingerprint": "8b0375199f262e77f87a048636dfc13d_554",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02622.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02622.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 56
        },
        "content": "request.getSession().setAttribute(bar, \"10340\")"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().setAttribute(bar, \"10340\")",
      "fingerprint": "e1522ed2d0de3e4bd8099251cd297f15_0",
      "old_fingerprint": "0717329beb41744f99be5deabc77553e_106",
      "code_extract": "        request.getSession().setAttribute(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02623.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02623.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "6e24496ecc34a4390a89ea8d375196aa_0",
      "old_fingerprint": "44ba46a6cee36e52b7b2cd4f0d5dc203_107",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 73,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02624.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02624.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 73,
        "end": 73,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 73,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "7dbca3e296e12c392948d4d638d351b0_0",
      "old_fingerprint": "4466f46f5eca8bd7df122d74c910d510_105",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02700.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02700.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "5d44158d79c0759583fe841e3ace9acf_0",
      "old_fingerprint": "85b80bce5379c0fa956238352d0b62ed_171",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02701.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02701.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "3aa78bea817e0ddf8839323e8c6b30ca_0",
      "old_fingerprint": "eb91b389bf8315f91caf9bd16a3d0bc7_170",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02702.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02702.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "22fdc4f36a4f9479a1804eb96fc3ff3c_0",
      "old_fingerprint": "17f267fb24739b8bbf938958d78d989d_165",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02703.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02703.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "0800a6eb4b075efc087b7b595e248f1a_0",
      "old_fingerprint": "d55b83aeeb764d4aae2a9edce1ac92aa_164",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02704.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02704.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4c68e2027f7b6c41f83ebace83a41405_0",
      "old_fingerprint": "a1644bd9921489c1e91299b854b1879f_163",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02705.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02705.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "19ec29a13d671abb8ce80224d6297bac_0",
      "old_fingerprint": "c73803c9d3446ee34008a516cbc03b99_133",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02706.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02706.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "76113e6f4412a9a14bf301e337d6eccc_0",
      "old_fingerprint": "f2f8826147d514b27daed0e1f4ecd4ab_124",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 83,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02707.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02707.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 83,
        "end": 83,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 83,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "7aefe4aa807779249940a769f8e093e9_0",
      "old_fingerprint": "e5efec7dcda103400ef7e7129dc9ae19_125",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 84,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02708.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02708.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        }
      },
      "sink": {
        "start": 84,
        "end": 84,
        "column": {
          "start": 13,
          "end": 73
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 84,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "4e8fabee20477cd46e599914bbb5e221_0",
      "old_fingerprint": "35b27f6c1d7316a0b52e02e61737521d_162",
      "code_extract": "            request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 88,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02715.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02715.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 88,
        "end": 88,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 88,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "673d8879dad7d4ac5877c11d519088e6_0",
      "old_fingerprint": "4571a461d0e37c453787c032fc23bb9f_255",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02716.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02716.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "50751a4c46b66b61f50a0d02a14dc6d5_0",
      "old_fingerprint": "53c11197702060396d7d1e2023ceeff2_201",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02717.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02717.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8659c1ea506a505a9f0c783292a39893_0",
      "old_fingerprint": "e77e8b2f008c81ef2fbf4c9ec621cf9a_197",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 86,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02718.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02718.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 86,
        "end": 86,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 86,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8c3b6cea1088ad812a418443e0fb1f81_0",
      "old_fingerprint": "0c424be387ac33c9c34aed8fa4b9abf4_206",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02719.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02719.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "ee64b6e2389c4c000a908d34233a5bc4_0",
      "old_fingerprint": "9bc93b68f6fddfe10d669b837e569448_184",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02720.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02720.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "07fbeb32df7c07b8e4a03085c4f16fdc_0",
      "old_fingerprint": "ded13ef1ca600fd88dde69fbee9dda6f_182",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 85,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02721.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02721.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        }
      },
      "sink": {
        "start": 85,
        "end": 85,
        "column": {
          "start": 17,
          "end": 77
        },
        "content": "request.getSession().setAttribute(cookieName, rememberMeKey)"
      },
      "parent_line_number": 85,
      "snippet": "request.getSession().setAttribute(cookieName, rememberMeKey)",
      "fingerprint": "8fcd12cb25f402ff1b6ff2f3ae9b2a79_0",
      "old_fingerprint": "559b259ca3619321a04588dc68329f18_178",
      "code_extract": "                request.getSession().setAttribute(cookieName, rememberMeKey);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02722.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02722.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "8887d7643ba17db1646cbc0eaee46b4f_0",
      "old_fingerprint": "97a012935c1fe82e6c16248349e46d9b_8",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02723.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02723.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "087d69de8970539384b8b34dccf1665e_0",
      "old_fingerprint": "8e4ea3735a71b7150d16268a99708366_12",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02724.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02724.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 52
        },
        "content": "request.getSession().putValue(bar, \"10340\")"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().putValue(bar, \"10340\")",
      "fingerprint": "29fbe16300e2cbacedd3b9dda51723a1_0",
      "old_fingerprint": "78412474915d23962332eeca8ae44dfb_9",
      "code_extract": "        request.getSession().putValue(bar, \"10340\");",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02725.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02725.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "924098cc0d7742368244de3f81b6ac19_0",
      "old_fingerprint": "8a833693e8febf4b96ffd312a2078f80_13",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    },
    {
      "cwe_ids": ["501"],
      "id": "java_lang_trust_boundary_violation",
      "title": "Trust boundary violation detected.",
      "description": "## Description\n\nMixing trusted and untrusted data inside the same data structure can lead\nto untrusted data being mistakenly treated as being trusted.\n\n## Remediations\n\n✅ Avoid adding trusted data to data structures containing untrusted data\n",
      "documentation_url": "https://docs.bearer.com/reference/rules/java_lang_trust_boundary_violation",
      "line_number": 50,
      "full_filename": "../../OWASP/BenchmarkJava/src/main/java/org/owasp/benchmark/testcode/BenchmarkTest02726.java",
      "filename": "java/org/owasp/benchmark/testcode/BenchmarkTest02726.java",
      "category_groups": ["PII", "Personal Data"],
      "source": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        }
      },
      "sink": {
        "start": 50,
        "end": 50,
        "column": {
          "start": 9,
          "end": 57
        },
        "content": "request.getSession().setAttribute(\"userid\", bar)"
      },
      "parent_line_number": 50,
      "snippet": "request.getSession().setAttribute(\"userid\", bar)",
      "fingerprint": "87096947b85b936785592bb7729cbe5e_0",
      "old_fingerprint": "cdcc2dd5eebd9ba54f64d17c28aaf82a_7",
      "code_extract": "        request.getSession().setAttribute(\"userid\", bar);",
      "severity": "warning"
    }
  ]
}
